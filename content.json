{"meta":{"title":"Wang's Blog","subtitle":"","description":"逝者如斯夫 不舍昼夜","author":"Vincent","url":"http://wzw1016.ml","root":"/"},"pages":[{"title":"关于本站","date":"2020-01-31T14:21:04.000Z","updated":"2020-04-05T01:45:12.292Z","comments":false,"path":"about/index.html","permalink":"http://wzw1016.ml/about/index.html","excerpt":"","text":"您好，这里是我的个人博客。 本人才疏学浅，不成体系，也没有什么高深莫测的文章。此博客的建立，绝无班门弄斧之意，而主要是为了对本人在实践过程中与学习中的所领会到的知识进行总结，记录本人在开发过程中遇到的问题，方便以后查阅。不完善之处，欢迎指正。若有幸可以帮助到您，本人不胜荣幸。 本站点文章的图片、引用等元素，已注明出处，如有疏漏之处，侵犯了您的权益，请及时联系我进行修改。 非常感谢您的到访！"},{"title":"categories","date":"2020-01-31T11:25:46.000Z","updated":"2020-02-01T15:12:42.621Z","comments":false,"path":"categories/index.html","permalink":"http://wzw1016.ml/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-31T11:18:30.000Z","updated":"2020-02-01T15:13:00.634Z","comments":false,"path":"tags/index.html","permalink":"http://wzw1016.ml/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-02-03T07:24:56.629Z","updated":"2020-02-03T07:24:56.629Z","comments":true,"path":"lib/needsharebutton/LICENSE.html","permalink":"http://wzw1016.ml/lib/needsharebutton/LICENSE.html","excerpt":"","text":"LicenseThe MIT License (MIT) Copyright © 2015 [Dzmitry Vasileuski] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},{"title":"","date":"2020-02-03T07:24:56.629Z","updated":"2020-02-03T07:24:56.629Z","comments":true,"path":"lib/needsharebutton/Gruntfile.js","permalink":"http://wzw1016.ml/lib/needsharebutton/Gruntfile.js","excerpt":"","text":"'use strict'; module.exports = function( grunt ) { // tasks grunt.initConfig({ // move JS to dist copy: { main: { files: [ {src: 'src/js/needsharebutton.js', dest: 'dist/needsharebutton.js', filter: 'isFile'} ] } }, // minify JS uglify: { scripts: { files: { 'dist/needsharebutton.min.js': 'dist/needsharebutton.js' } } }, // compile LESS less: { styles: { options: { plugins: [ require('less-plugin-glob') ] }, files: { 'dist/needsharebutton.css': 'src/less/needsharebutton.less' } } }, // autoprefix CSS autoprefixer: { options: { browsers: ['> 1%', 'Android 2', 'last 2 versions', 'Firefox ESR', 'Opera 12.1', 'ie 7', 'ie 8', 'ie 9'] }, no_dest: { src: ['dist/needsharebutton.css', 'dist/needsharebutton.css'] } }, // beautify CSS csscomb: { styles: { options: { config: 'csscomb.json' }, files: { 'dist/needsharebutton.css': 'dist/needsharebutton.css' } } }, // concat and minify CSS cssmin: { styles: { files: { 'dist/needsharebutton.min.css': 'dist/needsharebutton.css' } } }, // watch watch: { scripts: { files: ['src/js/*.js'], tasks: ['copy','uglify'] }, styles: { files: ['src/less/*.less', 'dist/fontello-embedded.css'], tasks: ['less','autoprefixer', 'csscomb', 'cssmin'] } }, // local server connect: { server: { options: { port: 8002 } } } }); // download plugins grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-contrib-copy'); grunt.loadNpmTasks('grunt-contrib-uglify'); grunt.loadNpmTasks('grunt-contrib-less'); grunt.loadNpmTasks('grunt-csscomb'); grunt.loadNpmTasks('grunt-contrib-cssmin'); grunt.loadNpmTasks('grunt-autoprefixer'); grunt.loadNpmTasks('grunt-contrib-connect'); // some default tasks grunt.registerTask('default', ['copy', 'uglify', 'less', 'autoprefixer', 'csscomb', 'cssmin']); grunt.registerTask('server', ['connect', 'watch']); };"},{"title":"","date":"2020-02-03T07:24:56.630Z","updated":"2020-02-03T07:24:56.630Z","comments":true,"path":"lib/needsharebutton/README.html","permalink":"http://wzw1016.ml/lib/needsharebutton/README.html","excerpt":"","text":"update：已加上QQ空间，人人网，豆瓣的支持。 起因本来 V2MM 一直使用 MoreBasicShare 相安无事的，在将 MoreBasicShare 移植到 V2MM 的博客评论系统的时候，发现 MoreBasicShare 有几点缺陷难以移植： 代码结构不好，不方便扩展新的分享方式，其中用了大量的字符串拼接； 依赖 jQuery, 而我们的博客评论系统是不依赖 jQuery 的； 偶然发现一个老外写的纯 Javascript 的 Need Share Button, 效果非常好，于是就 Clone 了过来，扩展了一下，增加了很多国内的分享网站，做得更傻瓜易用了一些。 Demo可以见 V2MM 上的分享按钮，此插件还包含一个 Demo 页面，需把项目 clone 到本地展示。 使用方式有多种方式使用，最简单的方法，加载 js 和 css 后，创建一个 class 名为 need-share-button 的分享按钮就好了，其他什么都不用做。 第一步：在网页里加载 needsharebutton.min.js 和 needsharebutton.min.css。 1234&lt;!-- needsharebutton Javascript file --&gt;&lt;script src&#x3D;&quot;js&#x2F;needsharebutton.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;!-- needsharebutton CSS file --&gt;&lt;link href&#x3D;&quot;css&#x2F;needsharebutton.min.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt; 第二步：创建一个need-share-button，插件会自动找到所有 need-share-button, 制作成分享按钮。 1&lt;button class&#x3D;&quot;btn btn-default need-share-button&quot;&gt;Share&lt;&#x2F;button&gt; 这样你会看到网页上的 Share Button 已经可以使用了， 还可以通过 data-share- 传参。 第三步：如果需要使用别的名字，可以手动调用 needShareButton 函数，比如： 123new needShareButton(document.getElementById('my-share-button'));# ornew needShareButton('#my-share-button'); needShareButton 函数needShareButton 函数有两个参数： element, 可以是 Dom 节点，也可以是 CSS 选择器; options, 选项； OptionsOptions 可以通过参数传进去，也可以放在 DOM 节点里（加上 data-share- 前缀）。 iconStyle： default or box； boxForm： horizontal or vertical; position: bottomCenter, top / middle / bottom + Left / Center / Right; networks: 默认： &#39;Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Evernote&#39;; 注意，默认没有 RenRen，如果需要分享到人人网，在 networks 参数里加上 RenRen; url: 默认： location.href; title: 默认：document.title; image: 默认从 meta[property=&quot;og:image&quot;] 或 meta[name=&quot;twitter:image&quot;] 取值； description: 默认从 meta[property=&quot;og:description&quot;] 或 meta[name=&quot;twitter:description&quot;] 取值； 感谢感谢DzmVasileusky，此项目基于他的作品改编。"},{"title":"","date":"2020-02-03T07:24:56.639Z","updated":"2020-02-03T07:24:56.639Z","comments":true,"path":"lib/needsharebutton/package.json","permalink":"http://wzw1016.ml/lib/needsharebutton/package.json","excerpt":"","text":"{\"name\":\"needPopup\",\"description\":\"Responsive, easy to use modal windows developed on Javascript with JQuery.\",\"version\":\"1.1.5\",\"main\":\"./Gruntfile.js\",\"devDependencies\":{\"grunt\":\"~0.4.1\",\"grunt-contrib-watch\":\"^0.6.1\",\"grunt-contrib-less\":\"^1.0.1\",\"grunt-csscomb\":\"^3.0.0\",\"grunt-contrib-cssmin\":\"^0.10.0\",\"grunt-contrib-copy\":\"^0.8.0\",\"grunt-contrib-uglify\":\"^0.6.0\",\"grunt-autoprefixer\":\"^1.0.1\",\"less-plugin-glob\":\"^1.1.0\",\"grunt-contrib-connect\":\"^0.9.0\"}}"},{"title":"","date":"2020-02-03T07:24:56.630Z","updated":"2020-02-03T07:24:56.630Z","comments":true,"path":"lib/needsharebutton/csscomb.json","permalink":"http://wzw1016.ml/lib/needsharebutton/csscomb.json","excerpt":"","text":"{\"exclude\":[\".git/**\",\"node_modules/**\",\"bower_components/**\"],\"always-semicolon\":true,\"block-indent\":\" \",\"color-case\":\"lower\",\"color-shorthand\":true,\"element-case\":\"lower\",\"eof-newline\":true,\"leading-zero\":false,\"quotes\":\"single\",\"remove-empty-rulesets\":true,\"space-after-colon\":\" \",\"space-after-combinator\":\" \",\"space-after-opening-brace\":\"\\n\",\"space-after-selector-delimiter\":\"\\n\",\"space-before-closing-brace\":\"\\n\",\"space-before-colon\":\"\",\"space-before-combinator\":\" \",\"space-before-opening-brace\":\" \",\"space-before-selector-delimiter\":\"\",\"space-between-declarations\":\"\\n\",\"strip-spaces\":true,\"unitless-zero\":true,\"vendor-prefix-align\":true,\"sort-order\":[[\"content\",\"position\",\"z-index\",\"top\",\"right\",\"bottom\",\"left\"],[\"display\",\"visibility\",\"float\",\"clear\",\"overflow\",\"overflow-x\",\"overflow-y\",\"-ms-overflow-x\",\"-ms-overflow-y\",\"clip\",\"zoom\",\"flex-direction\",\"flex-order\",\"flex-pack\",\"flex-align\"],[\"-webkit-box-sizing\",\"-moz-box-sizing\",\"box-sizing\",\"width\",\"min-width\",\"max-width\",\"height\",\"min-height\",\"max-height\",\"margin\",\"margin-top\",\"margin-right\",\"margin-bottom\",\"margin-left\",\"padding\",\"padding-top\",\"padding-right\",\"padding-bottom\",\"padding-left\"],[\"font\",\"font-family\",\"font-size\",\"line-height\",\"font-weight\",\"font-style\",\"color\",\"font-variant\",\"font-size-adjust\",\"font-stretch\",\"font-effect\",\"font-emphasize\",\"font-emphasize-position\",\"font-emphasize-style\",\"font-smooth\"],[\"table-layout\",\"empty-cells\",\"caption-side\",\"border-spacing\",\"border-collapse\",\"list-style\",\"list-style-position\",\"list-style-type\",\"list-style-image\"],[\"quotes\",\"counter-reset\",\"counter-increment\",\"resize\",\"cursor\",\"-webkit-user-select\",\"-moz-user-select\",\"-ms-user-select\",\"user-select\",\"nav-index\",\"nav-up\",\"nav-right\",\"nav-down\",\"nav-left\",\"-webkit-transition\",\"-moz-transition\",\"-ms-transition\",\"-o-transition\",\"transition\",\"-webkit-transition-delay\",\"-moz-transition-delay\",\"-ms-transition-delay\",\"-o-transition-delay\",\"transition-delay\",\"-webkit-transition-timing-function\",\"-moz-transition-timing-function\",\"-ms-transition-timing-function\",\"-o-transition-timing-function\",\"transition-timing-function\",\"-webkit-transition-duration\",\"-moz-transition-duration\",\"-ms-transition-duration\",\"-o-transition-duration\",\"transition-duration\",\"-webkit-transition-property\",\"-moz-transition-property\",\"-ms-transition-property\",\"-o-transition-property\",\"transition-property\",\"-webkit-transform\",\"-moz-transform\",\"-ms-transform\",\"-o-transform\",\"transform\",\"-webkit-transform-origin\",\"-moz-transform-origin\",\"-ms-transform-origin\",\"-o-transform-origin\",\"transform-origin\",\"-webkit-animation\",\"-moz-animation\",\"-ms-animation\",\"-o-animation\",\"animation\",\"-webkit-animation-name\",\"-moz-animation-name\",\"-ms-animation-name\",\"-o-animation-name\",\"animation-name\",\"-webkit-animation-duration\",\"-moz-animation-duration\",\"-ms-animation-duration\",\"-o-animation-duration\",\"animation-duration\",\"-webkit-animation-play-state\",\"-moz-animation-play-state\",\"-ms-animation-play-state\",\"-o-animation-play-state\",\"animation-play-state\",\"-webkit-animation-timing-function\",\"-moz-animation-timing-function\",\"-ms-animation-timing-function\",\"-o-animation-timing-function\",\"animation-timing-function\",\"-webkit-animation-delay\",\"-moz-animation-delay\",\"-ms-animation-delay\",\"-o-animation-delay\",\"animation-delay\",\"-webkit-animation-iteration-count\",\"-moz-animation-iteration-count\",\"-ms-animation-iteration-count\",\"-o-animation-iteration-count\",\"animation-iteration-count\",\"-webkit-animation-direction\",\"-moz-animation-direction\",\"-ms-animation-direction\",\"-o-animation-direction\",\"animation-direction\",\"text-align\",\"-webkit-text-align-last\",\"-moz-text-align-last\",\"-ms-text-align-last\",\"text-align-last\",\"vertical-align\",\"white-space\",\"text-decoration\",\"text-emphasis\",\"text-emphasis-color\",\"text-emphasis-style\",\"text-emphasis-position\",\"text-indent\",\"-ms-text-justify\",\"text-justify\",\"letter-spacing\",\"word-spacing\",\"-ms-writing-mode\",\"text-outline\",\"text-transform\",\"text-wrap\",\"text-overflow\",\"-ms-text-overflow\",\"text-overflow-ellipsis\",\"text-overflow-mode\",\"-ms-word-wrap\",\"word-wrap\",\"word-break\",\"-ms-word-break\",\"-moz-tab-size\",\"-o-tab-size\",\"tab-size\",\"-webkit-hyphens\",\"-moz-hyphens\",\"hyphens\",\"pointer-events\"],[\"opacity\",\"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity\",\"-ms-filter:\\\\'progid:DXImageTransform.Microsoft.Alpha\",\"-ms-interpolation-mode\",\"border\",\"border-width\",\"border-style\",\"border-color\",\"border-top\",\"border-top-width\",\"border-top-style\",\"border-top-color\",\"border-right\",\"border-right-width\",\"border-right-style\",\"border-right-color\",\"border-bottom\",\"border-bottom-width\",\"border-bottom-style\",\"border-bottom-color\",\"border-left\",\"border-left-width\",\"border-left-style\",\"border-left-color\",\"-webkit-border-radius\",\"-moz-border-radius\",\"border-radius\",\"-webkit-border-top-left-radius\",\"-moz-border-radius-topleft\",\"border-top-left-radius\",\"-webkit-border-top-right-radius\",\"-moz-border-radius-topright\",\"border-top-right-radius\",\"-webkit-border-bottom-right-radius\",\"-moz-border-radius-bottomright\",\"border-bottom-right-radius\",\"-webkit-border-bottom-left-radius\",\"-moz-border-radius-bottomleft\",\"border-bottom-left-radius\",\"-webkit-border-image\",\"-moz-border-image\",\"-o-border-image\",\"border-image\",\"-webkit-border-image-source\",\"-moz-border-image-source\",\"-o-border-image-source\",\"border-image-source\",\"-webkit-border-image-slice\",\"-moz-border-image-slice\",\"-o-border-image-slice\",\"border-image-slice\",\"-webkit-border-image-width\",\"-moz-border-image-width\",\"-o-border-image-width\",\"border-image-width\",\"-webkit-border-image-outset\",\"-moz-border-image-outset\",\"-o-border-image-outset\",\"border-image-outset\",\"-webkit-border-image-repeat\",\"-moz-border-image-repeat\",\"-o-border-image-repeat\",\"border-image-repeat\",\"outline\",\"outline-width\",\"outline-style\",\"outline-color\",\"outline-offset\",\"background\",\"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader\",\"background-color\",\"background-image\",\"background-repeat\",\"background-attachment\",\"background-position\",\"background-position-x\",\"-ms-background-position-x\",\"background-position-y\",\"-ms-background-position-y\",\"-webkit-background-clip\",\"-moz-background-clip\",\"background-clip\",\"background-origin\",\"-webkit-background-size\",\"-moz-background-size\",\"-o-background-size\",\"background-size\",\"box-decoration-break\",\"-webkit-box-shadow\",\"-moz-box-shadow\",\"box-shadow\",\"filter:progid:DXImageTransform.Microsoft.gradient\",\"-ms-filter:\\\\'progid:DXImageTransform.Microsoft.gradient\",\"text-shadow\"]]}"},{"title":"","date":"2020-02-03T07:24:56.631Z","updated":"2020-02-03T07:24:56.631Z","comments":true,"path":"lib/needsharebutton/demo/index.html","permalink":"http://wzw1016.ml/lib/needsharebutton/demo/index.html","excerpt":"","text":"needShareButton demo body { font: 14px/1 \"Helvetica Neue\",Helvetica,Arial,sans-serif; margin:0; padding:0; background: #DFF4FF; } .wrapper { padding: 100px 60px; text-align: center; } Share button default mode on bottom center Share Share button box mode with chosen networks Share Share button default mode on middle right Share Share button box mode on middle right Share Share button with class name 'need-share-button' Share new needShareButton(document.getElementById('i-share')); new needShareButton(document.getElementById('share-button-2')); new needShareButton(document.getElementById('share-button-3')); new needShareButton(document.getElementById('share-button-4'));"},{"title":"","date":"2020-02-03T07:24:56.637Z","updated":"2020-02-03T07:24:56.637Z","comments":true,"path":"lib/needsharebutton/dist/needsharebutton.css","permalink":"http://wzw1016.ml/lib/needsharebutton/dist/needsharebutton.css","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ /* Social icons font ***********************************************/ @import url('fontello-embedded.css'); .need-share-button { position: relative; } .need-share-button-opened { position: relative; } .need-share-button-opened img.need-share-wechat-code-image { display: block; max-width: 150px; margin: 5px auto; } .need-share-button_dropdown { position: absolute; z-index: 10; visibility: hidden; overflow: hidden; width: 300px; font-size: 16px; -webkit-transition: .3s; transition: .3s; -webkit-transform: scale(.1); -ms-transform: scale(.1); transform: scale(.1); text-align: center; white-space: normal; opacity: 0; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; -webkit-box-shadow: 0 0 2px rgba(0, 0, 0, .5); box-shadow: 0 0 2px rgba(0, 0, 0, .5); } .need-share-button-opened .need-share-button_dropdown { visibility: visible; -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); opacity: 1; } .need-share-button_dropdown-box-vertical, .need-share-button_dropdown-box-horizontal { -webkit-border-radius: 0; border-radius: 0; } .need-share-button_dropdown-box-vertical { width: 50px; } .need-share-button_dropdown-box-horizontal { width: auto; white-space: nowrap; } .need-share-button_link { display: inline-block; width: 50px; height: 50px; line-height: 50px; cursor: pointer; text-align: center; } .need-share-button_link:hover { -webkit-transition: .3s; transition: .3s; opacity: .7; } /* Dropdown position ***********************************************/ .need-share-button_dropdown-top-left { right: 100%; bottom: 100%; margin-right: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-right { bottom: 100%; left: 100%; margin-bottom: 10px; margin-left: 10px; } .need-share-button_dropdown-top-center { bottom: 100%; left: 50%; margin-bottom: 10px; } .need-share-button_dropdown-middle-left { top: 50%; right: 100%; margin-right: 10px; } .need-share-button_dropdown-middle-right { top: 50%; left: 100%; margin-left: 10px; } .need-share-button_dropdown-bottom-left { top: 100%; right: 100%; margin-top: 10px; margin-right: 10px; } .need-share-button_dropdown-bottom-right { top: 100%; left: 100%; margin-top: 10px; margin-left: 10px; } .need-share-button_dropdown-bottom-center { top: 100%; left: 50%; margin-top: 10px; } /* Default theme ***********************************************/ .need-share-button-default { display: inline-block; margin-bottom: 0; padding: 6px 12px; font-size: 14px; line-height: 1.42857143; font-weight: 400; color: #333; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; vertical-align: middle; border: 1px solid #ccc; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; } /* Network buttons ***********************************************/ .need-share-button_wechat { color: #a2dc30; } .need-share-button_wechat.need-share-button_link-box { color: #fff; background: #a2dc30; } .need-share-button_weibo { color: #d52b2b; } .need-share-button_weibo.need-share-button_link-box { color: #fff; background: #d52b2b; } .need-share-button_douban { color: #072; } .need-share-button_douban:before { content: '豆'; } .need-share-button_douban.need-share-button_link-box { color: #fff; background: #072; } .need-share-button_qqzone { color: #ffce00; } .need-share-button_qqzone:before { content: '\\f1d6'; } .need-share-button_qqzone.need-share-button_link-box { color: #fff; background: #ffce00; } .need-share-button_renren { color: #207cc5; } .need-share-button_renren.need-share-button_link-box { color: #fff; background: #207cc5; } .need-share-button_mailto { color: #efbe00; } .need-share-button_mailto:before { content: '\\e811'; } .need-share-button_mailto.need-share-button_link-box { color: #fff; background: #efbe00; } .need-share-button_twitter { color: #00acec; } .need-share-button_twitter.need-share-button_link-box { color: #fff; background: #00acec; } .need-share-button_pinterest { color: #cd2027; } .need-share-button_pinterest.need-share-button_link-box { color: #fff; background: #cd2027; } .need-share-button_facebook { color: #3b5998; } .need-share-button_facebook.need-share-button_link-box { color: #fff; background: #3b5998; } .need-share-button_googleplus { color: #d44132; } .need-share-button_googleplus.need-share-button_link-box { color: #fff; background: #d44132; } .need-share-button_reddit { color: #000; } .need-share-button_reddit.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_delicious { color: #000; } .need-share-button_delicious.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_tapiture { color: #30547d; } .need-share-button_tapiture.need-share-button_link-box { color: #fff; background: #30547d; } .need-share-button_stumbleupon { color: #f04e23; } .need-share-button_stumbleupon.need-share-button_link-box { color: #fff; background: #f04e23; } .need-share-button_linkedin { color: #0085af; } .need-share-button_linkedin.need-share-button_link-box { color: #fff; background: #0085af; } .need-share-button_slashdot { color: #026664; } .need-share-button_slashdot.need-share-button_link-box { color: #fff; background: #026664; } .need-share-button_technorati { color: #49ae47; } .need-share-button_technorati.need-share-button_link-box { color: #fff; background: #49ae47; } .need-share-button_posterous { color: #795d31; } .need-share-button_posterous.need-share-button_link-box { color: #fff; background: #795d31; } .need-share-button_tumblr { color: #34465d; } .need-share-button_tumblr.need-share-button_link-box { color: #fff; background: #34465d; } .need-share-button_googlebookmarks { color: #fde331; } .need-share-button_googlebookmarks.need-share-button_link-box { color: #fff; background: #fde331; } .need-share-button_newsvine { color: #03652c; } .need-share-button_newsvine.need-share-button_link-box { color: #fff; background: #03652c; } .need-share-button_pingfm { color: #94b5da; } .need-share-button_pingfm.need-share-button_link-box { color: #fff; background: #94b5da; } .need-share-button_evernote { color: #79d626; } .need-share-button_evernote.need-share-button_link-box { color: #fff; background: #79d626; } .need-share-button_friendfeed { color: #b0cbe9; } .need-share-button_friendfeed.need-share-button_link-box { color: #fff; background: #b0cbe9; } .need-share-button_vkontakte { color: #4c75a3; } .need-share-button_vkontakte.need-share-button_link-box { color: #fff; background: #4c75a3; } .need-share-button_odnoklassniki { color: #ed812b; } .need-share-button_odnoklassniki.need-share-button_link-box { color: #fff; background: #ed812b; } .need-share-button_mailru { color: #f89c0e; } .need-share-button_mailru.need-share-button_link-box { color: #fff; background: #f89c0e; }"},{"title":"","date":"2020-02-03T07:24:56.636Z","updated":"2020-02-03T07:24:56.636Z","comments":true,"path":"lib/needsharebutton/dist/fontello-embedded.css","permalink":"http://wzw1016.ml/lib/needsharebutton/dist/fontello-embedded.css","excerpt":"","text":"@font-face { font-family: 'fontello-nms'; src: url('font/fontello.eot?14876200'); src: url('font/fontello.eot?14876200#iefix') format('embedded-opentype'), url('font/fontello.svg?14876200#fontello') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'fontello-nms'; src: url('data:application/octet-stream;base64,') format('woff'), url('data:application/octet-stream;base64,') format('truetype'); } /* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */ /* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */ /* @media screen and (-webkit-min-device-pixel-ratio:0) { @font-face { font-family: 'fontello-nms'; src: url('../font/fontello.svg?14876200#fontello') format('svg'); } } */ .need-share-button_dropdown [class^=\"icon-\"]:before, .need-share-button_dropdown [class*=\" icon-\"]:before { font-family: \"fontello-nms\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .need-share-button_dropdown .icon-ok:before { content: '\\e800'; } /* '' */ .need-share-button_dropdown .icon-heart:before { content: '\\e801'; } /* '' */ .need-share-button_dropdown .icon-thumbs-up:before { content: '\\e802'; } /* '' */ .need-share-button_dropdown .icon-thumbs-down:before { content: '\\e803'; } /* '' */ .need-share-button_dropdown .icon-heart-empty:before { content: '\\e804'; } /* '' */ .need-share-button_dropdown .icon-star:before { content: '\\e805'; } /* '' */ .need-share-button_dropdown .icon-star-empty:before { content: '\\e806'; } /* '' */ .need-share-button_dropdown .icon-up-open:before { content: '\\e807'; } /* '' */ .need-share-button_dropdown .icon-down-open:before { content: '\\e808'; } /* '' */ .need-share-button_dropdown .icon-forward:before { content: '\\e809'; } /* '' */ .need-share-button_dropdown .icon-bookmark:before { content: '\\e80a'; } /* '' */ .need-share-button_dropdown .icon-path:before { content: '\\e80b'; } /* '' */ .need-share-button_dropdown .icon-reddit:before { content: '\\e80c'; } /* '' */ .need-share-button_dropdown .icon-googleplus:before { content: '\\e80e'; } /* '' */ .need-share-button_dropdown .icon-posterous:before { content: '\\e80f'; } /* '' */ .need-share-button_dropdown .icon-bookmark-1:before { content: '\\e810'; } /* '' */ .need-share-button_dropdown .icon-mail:before { content: '\\e811'; } /* '' */ .need-share-button_dropdown .icon-bookmark-empty:before { content: '\\f097'; } /* '' */ .need-share-button_dropdown .icon-twitter:before { content: '\\f099'; } /* '' */ .need-share-button_dropdown .icon-facebook:before { content: '\\f09a'; } /* '' */ .need-share-button_dropdown .icon-rss:before { content: '\\f09e'; } /* '' */ .need-share-button_dropdown .icon-gplus:before { content: '\\f0d5'; } /* '' */ .need-share-button_dropdown .icon-linkedin:before { content: '\\f0e1'; } /* '' */ .need-share-button_dropdown .icon-quote-left:before { content: '\\f10d'; } /* '' */ .need-share-button_dropdown .icon-quote-right:before { content: '\\f10e'; } /* '' */ .need-share-button_dropdown .icon-reply:before { content: '\\f112'; } /* '' */ .need-share-button_dropdown .icon-reply-all:before { content: '\\f122'; } /* '' */ .need-share-button_dropdown .icon-thumbs-up-alt:before { content: '\\f164'; } /* '' */ .need-share-button_dropdown .icon-thumbs-down-alt:before { content: '\\f165'; } /* '' */ .need-share-button_dropdown .icon-tumblr:before { content: '\\f173'; } /* '' */ .need-share-button_dropdown .icon-vkontakte:before { content: '\\f189'; } /* '' */ .need-share-button_dropdown .icon-weibo:before { content: '\\f18a'; } /* '' */ .need-share-button_dropdown .icon-renren:before { content: '\\f18b'; } /* '' */ .need-share-button_dropdown .icon-stumbleupon:before { content: '\\f1a4'; } /* '' */ .need-share-button_dropdown .icon-delicious:before { content: '\\f1a5'; } /* '' */ .need-share-button_dropdown .icon-qq:before { content: '\\f1d6'; } /* '' */ .need-share-button_dropdown .icon-wechat:before { content: '\\f1d7'; } /* '' */ .need-share-button_dropdown .icon-share:before { content: '\\f1e0'; } /* '' */ .need-share-button_dropdown .icon-share-squared:before { content: '\\f1e1'; } /* '' */ .need-share-button_dropdown .icon-pinterest:before { content: '\\f231'; } /* '' */ .need-share-button_dropdown .icon-odnoklassniki:before { content: '\\f263'; } /* '' */ .need-share-button_dropdown .icon-linkedin-squared:before { content: '\\f30c'; } /* '' */ .need-share-button_dropdown .icon-friendfeed:before { content: '\\f312'; } /* '' */ .need-share-button_dropdown .icon-linkedin-rect:before { content: '\\f31b'; } /* '' */ .need-share-button_dropdown .icon-evernote:before { content: '\\f333'; } /* '' */"},{"title":"","date":"2020-02-03T07:24:56.639Z","updated":"2020-02-03T07:24:56.639Z","comments":true,"path":"lib/needsharebutton/dist/needsharebutton.min.js","permalink":"http://wzw1016.ml/lib/needsharebutton/dist/needsharebutton.min.js","excerpt":"","text":"!function(){function a(a,b){if(\"string\"==typeof b){var c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.msMatchesSelector;if(c)for(;a;){if(c.bind(a)(b))return a;a=a.parentElement}return!1}for(;a;){if(a==b)return a;a=a.parentElement}return!1}window.needShareButton=function(b,c){function d(a){var b={};for(var c in f.options)b[c]=f.options[c];b.url=window.location.href,b.title=f.getTitle(),b.image=f.getImage(),b.description=f.getDescription();for(var d in a.dataset)if(d.match(/share/)){var e=d.replace(/share/,\"\");if(!e.length)continue;e=e.charAt(0).toLowerCase()+e.slice(1);var g=a.dataset[d];\"networks\"===e?g=g.toLowerCase().split(\",\"):\"url\"===e&&g&&\"/\"===g[0]&&(g=location.origin+g),b[e]=g}return b}function e(b){var c=document.createElement(\"span\");if(c.className=\"need-share-button_dropdown\",!b.querySelector(\".need-share-button_dropdown\")){var e=d(b);\"box\"==e.iconStyle&&\"horizontal\"==e.boxForm?c.className+=\" need-share-button_dropdown-box-horizontal\":\"box\"==e.iconStyle&&\"vertical\"==e.boxForm&&(c.className+=\" need-share-button_dropdown-box-vertical\"),setTimeout(function(){switch(e.position){case\"topLeft\":c.className+=\" need-share-button_dropdown-top-left\";break;case\"topRight\":c.className+=\" need-share-button_dropdown-top-right\";break;case\"topCenter\":c.className+=\" need-share-button_dropdown-top-center\",c.style.marginLeft=-c.offsetWidth/2+\"px\";break;case\"middleLeft\":c.className+=\" need-share-button_dropdown-middle-left\",c.style.marginTop=-c.offsetHeight/2+\"px\";break;case\"middleRight\":c.className+=\" need-share-button_dropdown-middle-right\",c.style.marginTop=-c.offsetHeight/2+\"px\";break;case\"bottomLeft\":c.className+=\" need-share-button_dropdown-bottom-left\";break;case\"bottomRight\":c.className+=\" need-share-button_dropdown-bottom-right\";break;case\"bottomCenter\":default:c.className+=\" need-share-button_dropdown-bottom-center\",c.style.marginLeft=-c.offsetWidth/2+\"px\"}},1);var g=\"default\"==e.iconStyle?\"need-share-button_link need-share-button_\":\"need-share-button_link-\"+e.iconStyle+\" need-share-button_link need-share-button_\";for(var h in e.networks){var i=document.createElement(\"span\");h=e.networks[h],i.className=g+h,i.className+=\" icon-\"+h,i.dataset.network=h,i.title=h,c.appendChild(i)}c.addEventListener(\"click\",function(c){if(a(c.target,\".need-share-button_link\"))return c.preventDefault(),c.stopPropagation(),f.share[c.target.dataset.network](b),!1}),b.appendChild(c)}}var f=this;f.elem=b||\"need-share-button\",f.getTitle=function(){var a;return document.querySelector&&(a=document.querySelector(\"title\"))?a.innerText:document.title},f.getImage=function(){var a;return document.querySelector&&(a=document.querySelector('meta[property=\"og:image\"]')||document.querySelector('meta[name=\"twitter:image\"]'))?a.getAttribute(\"content\"):\"\"},f.getDescription=function(){var a;return document.querySelector?(a=document.querySelector('meta[property=\"og:description\"]')||document.querySelector('meta[name=\"twitter:description\"]')||document.querySelector('meta[name=\"description\"]'))?a.getAttribute(\"content\"):\"\":(a=document.getElementsByTagName(\"meta\").namedItem(\"description\"))?a.getAttribute(\"content\"):\"\"},f.share={weibo:function(a){var b=d(a),c=\"http://v.t.sina.com.cn/share/share.php?title=\"+encodeURIComponent(b.title)+\"&url=\"+encodeURIComponent(b.url)+\"&pic=\"+encodeURIComponent(b.image);f.popup(c)},wechat:function(a){var b=d(a),c=\"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\"+encodeURIComponent(b.url),e=a.querySelector(\".need-share-button_dropdown\"),f=e.getElementsByClassName(\"need-share-wechat-code-image\")[0];f?f.remove():(f=document.createElement(\"img\"),f.src=c,f.alt=\"loading wechat image...\",f.setAttribute(\"class\",\"need-share-wechat-code-image\"),e.appendChild(f))},douban:function(a){var b=d(a),c=\"https://www.douban.com/share/service?name=\"+encodeURIComponent(b.title)+\"&href=\"+encodeURIComponent(b.url)+\"&image=\"+encodeURIComponent(b.image);f.popup(c)},qqzone:function(a){var b=d(a),c=\"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=\"+encodeURIComponent(b.title)+\"&url=\"+encodeURIComponent(b.url)+\"&pics=\"+encodeURIComponent(b.image)+\"&desc=\"+encodeURIComponent(b.description);f.popup(c)},renren:function(a){var b=d(a),c=\"http://widget.renren.com/dialog/share?title=\"+encodeURIComponent(b.title)+\"&resourceUrl=\"+encodeURIComponent(b.url)+\"&pic=\"+encodeURIComponent(b.image)+\"&description=\"+encodeURIComponent(b.description);f.popup(c)},mailto:function(a){var b=d(a),c=\"mailto:?subject=\"+encodeURIComponent(b.title)+\"&body=Thought you might enjoy reading this: \"+encodeURIComponent(b.url)+\" - \"+encodeURIComponent(b.description);window.location.href=c},twitter:function(a){var b=d(a),c=b.protocol+\"twitter.com/intent/tweet?text=\";c+=encodeURIComponent(b.title)+\"&url=\"+encodeURIComponent(b.url),f.popup(c)},pinterest:function(a){var b=d(a),c=b.protocol+\"pinterest.com/pin/create/bookmarklet/?is_video=false\";c+=\"&media=\"+encodeURIComponent(b.image),c+=\"&url=\"+encodeURIComponent(b.url),c+=\"&description=\"+encodeURIComponent(b.title),f.popup(c)},facebook:function(a){var b=d(a),c=b.protocol+\"www.facebook.com/share.php?\";c+=\"u=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),f.popup(c)},googleplus:function(a){var b=d(a),c=b.protocol+\"plus.google.com/share?\";c+=\"url=\"+encodeURIComponent(b.url),f.popup(c)},reddit:function(a){var b=d(a),c=b.protocol+\"www.reddit.com/submit?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),f.popup(c)},delicious:function(a){var b=d(a),c=b.protocol+\"del.icio.us/post?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),c+=\"&notes=\"+encodeURIComponent(b.description),f.popup(c)},stumbleupon:function(a){var b=d(a),c=b.protocol+\"www.stumbleupon.com/submit?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),f.popup(c)},linkedin:function(a){var b=d(a),c=b.protocol+\"www.linkedin.com/shareArticle?mini=true\";c+=\"&url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),c+=\"&source=\"+encodeURIComponent(b.source),f.popup(c)},posterous:function(a){var b=d(a),c=b.protocol+\"posterous.com/share?\";c+=\"linkto=\"+encodeURIComponent(b.url),f.popup(c)},tumblr:function(a){var b=d(a),c=b.protocol+\"www.tumblr.com/share?v=3\";c+=\"&u=\"+encodeURIComponent(b.url),c+=\"&t=\"+encodeURIComponent(b.title),f.popup(c)},evernote:function(a){var b=d(a),c=b.protocol+\"www.evernote.com/clip.action?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),f.popup(c)},friendfeed:function(a){var b=d(a),c=b.protocol+\"www.friendfeed.com/share?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),f.popup(c)},vkontakte:function(a){var b=d(a),c=b.protocol+\"vkontakte.ru/share.php?\";c+=\"url=\"+encodeURIComponent(b.url),c+=\"&title=\"+encodeURIComponent(b.title),c+=\"&description=\"+encodeURIComponent(b.description),c+=\"&image=\"+encodeURIComponent(b.image),c+=\"&noparse=true\",f.popup(c)},odnoklassniki:function(a){var b=d(a),c=b.protocol+\"www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1\";c+=\"&st.comments=\"+encodeURIComponent(b.description),c+=\"&st._surl=\"+encodeURIComponent(b.url),f.popup(c)}},f.popup=function(a){var b=600,c=500,d=void 0!=window.screenLeft?window.screenLeft:screen.left,e=void 0!=window.screenTop?window.screenTop:screen.top,f=window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:screen.width,g=window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:screen.height,h=f/2-b/2+d,i=g/2-c/2+e,j=window.open(a,\"targetWindow\",\"toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=\"+b+\", height=\"+c+\", top=\"+i+\", left=\"+h);window.focus&&j.focus()},f.options={iconStyle:\"default\",boxForm:\"horizontal\",position:\"bottomCenter\",protocol:-1===[\"http\",\"https\"].indexOf(window.location.href.split(\":\")[0])?\"https://\":\"//\",networks:\"Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Mailto\"};for(var g in c)f.options[g]=c[g];f.options.networks=f.options.networks.toLowerCase().split(\",\"),document.addEventListener(\"click\",function(b){var c=document.querySelector(\".need-share-button-opened\");if(!a(b.target,\".need-share-button-opened\"))if(c)c.classList.remove(\"need-share-button-opened\"),c.querySelector(\".need-share-wechat-code-image\")&&c.querySelector(\".need-share-wechat-code-image\").remove();else{var d=a(b.target,f.elem);d&&(d.classList.contains(\"need-share-button-opened\")||(e(d),setTimeout(function(){d.classList.add(\"need-share-button-opened\")},1)))}})},new needShareButton(\".need-share-button\")}();"},{"title":"","date":"2020-02-03T07:24:56.638Z","updated":"2020-02-03T07:24:56.638Z","comments":true,"path":"lib/needsharebutton/dist/needsharebutton.js","permalink":"http://wzw1016.ml/lib/needsharebutton/dist/needsharebutton.js","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ (function() { // find closest function closest(elem, parent) { if (typeof(parent) == 'string') { var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector; if (!!matchesSelector) { while (elem) { if (matchesSelector.bind(elem)(parent)) { return elem; } else { elem = elem.parentElement; } } } return false; } else { while (elem) { if (elem == parent) { return elem; } else { elem = elem.parentElement; } } return false; } } // share button class window.needShareButton = function(elem, options) { // create element reference var root = this; root.elem = elem || 'need-share-button'; /* Helpers ***********************************************/ // get title from html root.getTitle = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('title')){ return content.innerText; } } return document.title; }; // get image from html root.getImage = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('meta[property=\"og:image\"]') || document.querySelector('meta[name=\"twitter:image\"]')) { return content.getAttribute('content'); } else return ''; } else return ''; }; // get description from html root.getDescription = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('meta[property=\"og:description\"]') || document.querySelector('meta[name=\"twitter:description\"]') || document.querySelector('meta[name=\"description\"]')) { return content.getAttribute('content'); } else return ''; } else { if (content = document.getElementsByTagName('meta').namedItem('description')) return content.getAttribute('content'); else return ''; } }; // share urls for all networks root.share = { 'weibo': function (el) { var myoptions = getOptions(el); var url = 'http://v.t.sina.com.cn/share/share.php?title=' + encodeURIComponent(myoptions.title) + \"&url=\"+encodeURIComponent(myoptions.url) + \"&pic=\"+encodeURIComponent(myoptions.image); root.popup(url); }, 'wechat': function (el) { var myoptions = getOptions(el); var imgSrc = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data='+encodeURIComponent(myoptions.url); var dropdownEl = el.querySelector('.need-share-button_dropdown'); var img = dropdownEl.getElementsByClassName('need-share-wechat-code-image')[0]; if (img) { img.remove(); } else { img = document.createElement('img'); img.src = imgSrc; img.alt = 'loading wechat image...'; img.setAttribute(\"class\",'need-share-wechat-code-image'); dropdownEl.appendChild(img); } }, 'douban': function (el) { var myoptions = getOptions(el); var url = 'https://www.douban.com/share/service?name=' + encodeURIComponent(myoptions.title) + \"&href=\"+encodeURIComponent(myoptions.url) + \"&image=\"+encodeURIComponent(myoptions.image); root.popup(url); }, 'qqzone': function (el) { var myoptions = getOptions(el); var url = 'http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=' + encodeURIComponent(myoptions.title) + \"&url=\"+encodeURIComponent(myoptions.url) + \"&pics=\"+encodeURIComponent(myoptions.image) + \"&desc=\"+ encodeURIComponent(myoptions.description); root.popup(url); }, 'renren': function (el) { var myoptions = getOptions(el); var url = 'http://widget.renren.com/dialog/share?title=' + encodeURIComponent(myoptions.title) + \"&resourceUrl=\"+encodeURIComponent(myoptions.url) + \"&pic=\"+encodeURIComponent(myoptions.image) + \"&description=\"+ encodeURIComponent(myoptions.description); root.popup(url); }, 'mailto' : function(el) { var myoptions = getOptions(el); var url = 'mailto:?subject=' + encodeURIComponent(myoptions.title) + '&body=Thought you might enjoy reading this: ' + encodeURIComponent(myoptions.url) + ' - ' + encodeURIComponent(myoptions.description); window.location.href = url; }, 'twitter' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'twitter.com/intent/tweet?text='; url += encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, 'pinterest' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'pinterest.com/pin/create/bookmarklet/?is_video=false'; url += '&media=' + encodeURIComponent(myoptions.image); url += '&url=' + encodeURIComponent(myoptions.url); url += '&description=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'facebook' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.facebook.com/share.php?'; url += 'u=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'googleplus' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'plus.google.com/share?'; url += 'url=' + encodeURIComponent(myoptions.url); root.popup(url); }, 'reddit' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.reddit.com/submit?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'delicious' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'del.icio.us/post?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&notes=' + encodeURIComponent(myoptions.description); root.popup(url); }, // 'tapiture' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'tapiture.com/bookmarklet/image?'; // url += 'img_src=' + encodeURIComponent(myoptions.image); // url += '&page_url=' + encodeURIComponent(myoptions.url); // url += '&page_title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, 'stumbleupon' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.stumbleupon.com/submit?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'linkedin' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.linkedin.com/shareArticle?mini=true'; url += '&url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&source=' + encodeURIComponent(myoptions.source); root.popup(url); }, // 'slashdot' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'slashdot.org/bookmark.pl?'; // url += 'url=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, // 'technorati' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'technorati.com/faves?'; // url += 'add=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, 'posterous' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'posterous.com/share?'; url += 'linkto=' + encodeURIComponent(myoptions.url); root.popup(url); }, 'tumblr' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.tumblr.com/share?v=3'; url += '&u=' + encodeURIComponent(myoptions.url); url += '&t=' + encodeURIComponent(myoptions.title); root.popup(url); }, // 'googlebookmarks' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'www.google.com/bookmarks/mark?op=edit'; // url += '&bkmk=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&annotation=' + encodeURIComponent(myoptions.description); // // root.popup(url); // }, // 'newsvine' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'www.newsvine.com/_tools/seed&save?'; // url += 'u=' + encodeURIComponent(myoptions.url); // url += '&h=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, // 'pingfm' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'ping.fm/ref/?'; // url += 'link=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&body=' + encodeURIComponent(myoptions.description); // // root.popup(url); // }, 'evernote' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.evernote.com/clip.action?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'friendfeed' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.friendfeed.com/share?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'vkontakte' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'vkontakte.ru/share.php?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&description=' + encodeURIComponent(myoptions.description); url += '&image=' + encodeURIComponent(myoptions.image); url += '&noparse=true'; root.popup(url); }, 'odnoklassniki' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1'; url += '&st.comments=' + encodeURIComponent(myoptions.description); url += '&st._surl=' + encodeURIComponent(myoptions.url); root.popup(url); }, // 'mailru' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'connect.mail.ru/share?'; // url += 'url=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&description=' + encodeURIComponent(myoptions.description); // url += '&imageurl=' + encodeURIComponent(myoptions.image); // // root.popup(url); // } } // open share link in a popup root.popup = function(url) { // set left and top position var popupWidth = 600, popupHeight = 500, // fix dual screen mode dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left, dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top, width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width, height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height, // calculate top and left position left = ((width / 2) - (popupWidth / 2)) + dualScreenLeft, top = ((height / 2) - (popupHeight / 2)) + dualScreenTop, // show popup shareWindow = window.open(url,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=' + popupWidth + ', height=' + popupHeight + ', top=' + top + ', left=' + left); // Puts focus on the newWindow if (window.focus) { shareWindow.focus(); } } /* Set options ***********************************************/ // create default options root.options = { iconStyle: 'default', // default or box boxForm: 'horizontal', // horizontal or vertical position: 'bottomCenter', // top / middle / bottom + Left / Center / Right protocol: ['http', 'https'].indexOf(window.location.href.split(':')[0]) === -1 ? 'https://' : '//', networks: 'Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Mailto' }; // integrate custom options for (var i in options) { root.options[i] = options[i]; } // convert networks string into array root.options.networks = root.options.networks.toLowerCase().split(','); function getOptions(el) { // integrate data attribute options var ret = {}; for (var i in root.options) { ret[i] = root.options[i]; } // these attrs must get dynamically. ret.url = window.location.href; ret.title = root.getTitle(); ret.image = root.getImage(); ret.description = root.getDescription(); for (var option in el.dataset) { // replace only 'share-' prefixed data-attributes if (option.match(/share/)) { var new_option = option.replace(/share/, ''); if (!new_option.length) { continue; } new_option = new_option.charAt(0).toLowerCase() + new_option.slice(1); var val = el.dataset[option]; if (new_option === 'networks') { val = val.toLowerCase().split(','); } else if (new_option === 'url' && val && val[0] === '/') { // fix relative url problem. val = location.origin + val; } ret[new_option] = val; } } return ret; } function createDropdown(el) { // create dropdown var dropdownEl = document.createElement('span'); dropdownEl.className = 'need-share-button_dropdown'; if (el.querySelector('.need-share-button_dropdown')) { return; } var myoptions = getOptions(el); // set dropdown row length if (myoptions.iconStyle == 'box' && myoptions.boxForm == 'horizontal') dropdownEl.className += ' need-share-button_dropdown-box-horizontal'; else if (myoptions.iconStyle == 'box' && myoptions.boxForm == 'vertical') dropdownEl.className += ' need-share-button_dropdown-box-vertical'; // set dropdown position setTimeout(function() { switch (myoptions.position) { case 'topLeft': dropdownEl.className += ' need-share-button_dropdown-top-left'; break case 'topRight': dropdownEl.className += ' need-share-button_dropdown-top-right'; break case 'topCenter': dropdownEl.className += ' need-share-button_dropdown-top-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break case 'middleLeft': dropdownEl.className += ' need-share-button_dropdown-middle-left'; dropdownEl.style.marginTop = - dropdownEl.offsetHeight / 2 + 'px'; break case 'middleRight': dropdownEl.className += ' need-share-button_dropdown-middle-right'; dropdownEl.style.marginTop = - dropdownEl.offsetHeight / 2 + 'px'; break case 'bottomLeft': dropdownEl.className += ' need-share-button_dropdown-bottom-left'; break case 'bottomRight': dropdownEl.className += ' need-share-button_dropdown-bottom-right'; break case 'bottomCenter': dropdownEl.className += ' need-share-button_dropdown-bottom-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break default: dropdownEl.className += ' need-share-button_dropdown-bottom-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break } },1); // fill fropdown with buttons var iconClass = myoptions.iconStyle == 'default' ? 'need-share-button_link need-share-button_' : 'need-share-button_link-' + myoptions.iconStyle + ' need-share-button_link need-share-button_'; for (var network in myoptions.networks) { var link = document.createElement('span'); network = myoptions.networks[network]; link.className = iconClass + network; link.className += ' icon-' + network; link.dataset.network = network; link.title = network; dropdownEl.appendChild(link); } dropdownEl.addEventListener('click', function (event) { if (closest(event.target, '.need-share-button_link')) { event.preventDefault(); event.stopPropagation(); root.share[event.target.dataset.network](el); return false; } }); el.appendChild(dropdownEl); } // close on click outside document.addEventListener('click', function(event) { var openedEl = document.querySelector('.need-share-button-opened'); if (!closest(event.target, '.need-share-button-opened')) { if (openedEl) { openedEl.classList.remove('need-share-button-opened'); // hide wechat code image when close the dropdown. if (openedEl.querySelector('.need-share-wechat-code-image')) { openedEl.querySelector('.need-share-wechat-code-image').remove(); } } else { var el = closest(event.target, root.elem); if (el) { if (!el.classList.contains('need-share-button-opened')) { createDropdown(el); setTimeout(function () { el.classList.add('need-share-button-opened'); }, 1); } } } } }); }; new needShareButton('.need-share-button'); })();"},{"title":"","date":"2020-02-03T07:24:56.638Z","updated":"2020-02-03T07:24:56.638Z","comments":true,"path":"lib/needsharebutton/dist/needsharebutton.min.css","permalink":"http://wzw1016.ml/lib/needsharebutton/dist/needsharebutton.min.css","excerpt":"","text":"@font-face{font-family:fontello-nms;src:url(font/fontello.eot?14876200);src:url(font/fontello.eot?14876200#iefix) format('embedded-opentype'),url(font/fontello.svg?14876200#fontello) format('svg');font-weight:400;font-style:normal}@font-face{font-family:fontello-nms;src:url(data:application/octet-stream;base64,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) format('woff'),url(data:application/octet-stream;base64,) format('truetype')}.need-share-button_dropdown [class*=\" icon-\"]:before,.need-share-button_dropdown [class^=icon-]:before{font-family:fontello-nms;font-style:normal;font-weight:400;speak:none;display:inline-block;text-decoration:inherit;width:1em;margin-right:.2em;text-align:center;font-variant:normal;text-transform:none;line-height:1em;margin-left:.2em}.need-share-button_dropdown .icon-ok:before{content:'\\e800'}.need-share-button_dropdown .icon-heart:before{content:'\\e801'}.need-share-button_dropdown .icon-thumbs-up:before{content:'\\e802'}.need-share-button_dropdown .icon-thumbs-down:before{content:'\\e803'}.need-share-button_dropdown .icon-heart-empty:before{content:'\\e804'}.need-share-button_dropdown .icon-star:before{content:'\\e805'}.need-share-button_dropdown .icon-star-empty:before{content:'\\e806'}.need-share-button_dropdown .icon-up-open:before{content:'\\e807'}.need-share-button_dropdown .icon-down-open:before{content:'\\e808'}.need-share-button_dropdown .icon-forward:before{content:'\\e809'}.need-share-button_dropdown .icon-bookmark:before{content:'\\e80a'}.need-share-button_dropdown .icon-path:before{content:'\\e80b'}.need-share-button_dropdown .icon-reddit:before{content:'\\e80c'}.need-share-button_dropdown .icon-googleplus:before{content:'\\e80e'}.need-share-button_dropdown .icon-posterous:before{content:'\\e80f'}.need-share-button_dropdown .icon-bookmark-1:before{content:'\\e810'}.need-share-button_dropdown .icon-mail:before{content:'\\e811'}.need-share-button_dropdown .icon-bookmark-empty:before{content:'\\f097'}.need-share-button_dropdown .icon-twitter:before{content:'\\f099'}.need-share-button_dropdown .icon-facebook:before{content:'\\f09a'}.need-share-button_dropdown .icon-rss:before{content:'\\f09e'}.need-share-button_dropdown .icon-gplus:before{content:'\\f0d5'}.need-share-button_dropdown .icon-linkedin:before{content:'\\f0e1'}.need-share-button_dropdown .icon-quote-left:before{content:'\\f10d'}.need-share-button_dropdown .icon-quote-right:before{content:'\\f10e'}.need-share-button_dropdown .icon-reply:before{content:'\\f112'}.need-share-button_dropdown .icon-reply-all:before{content:'\\f122'}.need-share-button_dropdown .icon-thumbs-up-alt:before{content:'\\f164'}.need-share-button_dropdown .icon-thumbs-down-alt:before{content:'\\f165'}.need-share-button_dropdown .icon-tumblr:before{content:'\\f173'}.need-share-button_dropdown .icon-vkontakte:before{content:'\\f189'}.need-share-button_dropdown .icon-weibo:before{content:'\\f18a'}.need-share-button_dropdown .icon-renren:before{content:'\\f18b'}.need-share-button_dropdown .icon-stumbleupon:before{content:'\\f1a4'}.need-share-button_dropdown .icon-delicious:before{content:'\\f1a5'}.need-share-button_dropdown .icon-qq:before{content:'\\f1d6'}.need-share-button_dropdown .icon-wechat:before{content:'\\f1d7'}.need-share-button_dropdown .icon-share:before{content:'\\f1e0'}.need-share-button_dropdown .icon-share-squared:before{content:'\\f1e1'}.need-share-button_dropdown .icon-pinterest:before{content:'\\f231'}.need-share-button_dropdown .icon-odnoklassniki:before{content:'\\f263'}.need-share-button_dropdown .icon-linkedin-squared:before{content:'\\f30c'}.need-share-button_dropdown .icon-friendfeed:before{content:'\\f312'}.need-share-button_dropdown .icon-linkedin-rect:before{content:'\\f31b'}.need-share-button_dropdown .icon-evernote:before{content:'\\f333'}.need-share-button,.need-share-button-opened{position:relative}.need-share-button-opened img.need-share-wechat-code-image{display:block;max-width:150px;margin:5px auto}.need-share-button_dropdown{position:absolute;z-index:10;visibility:hidden;overflow:hidden;width:300px;font-size:16px;-webkit-transition:.3s;transition:.3s;-webkit-transform:scale(.1);-ms-transform:scale(.1);transform:scale(.1);text-align:center;white-space:normal;opacity:0;-webkit-border-radius:4px;border-radius:4px;background-color:#fff;-webkit-box-shadow:0 0 2px rgba(0,0,0,.5);box-shadow:0 0 2px rgba(0,0,0,.5)}.need-share-button-opened .need-share-button_dropdown{visibility:visible;-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);opacity:1}.need-share-button_dropdown-box-horizontal,.need-share-button_dropdown-box-vertical{-webkit-border-radius:0;border-radius:0}.need-share-button_dropdown-box-vertical{width:50px}.need-share-button_dropdown-box-horizontal{width:auto;white-space:nowrap}.need-share-button_link{display:inline-block;width:50px;height:50px;line-height:50px;cursor:pointer;text-align:center}.need-share-button_link:hover{-webkit-transition:.3s;transition:.3s;opacity:.7}.need-share-button_dropdown-top-left{right:100%;bottom:100%;margin-right:10px;margin-bottom:10px}.need-share-button_dropdown-top-right{bottom:100%;left:100%;margin-bottom:10px;margin-left:10px}.need-share-button_dropdown-top-center{bottom:100%;left:50%;margin-bottom:10px}.need-share-button_dropdown-middle-left{top:50%;right:100%;margin-right:10px}.need-share-button_dropdown-middle-right{top:50%;left:100%;margin-left:10px}.need-share-button_dropdown-bottom-left{top:100%;right:100%;margin-top:10px;margin-right:10px}.need-share-button_dropdown-bottom-right{top:100%;left:100%;margin-top:10px;margin-left:10px}.need-share-button_dropdown-bottom-center{top:100%;left:50%;margin-top:10px}.need-share-button-default{display:inline-block;margin-bottom:0;padding:6px 12px;font-size:14px;line-height:1.42857143;font-weight:400;color:#333;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-align:center;vertical-align:middle;border:1px solid #ccc;-webkit-border-radius:4px;border-radius:4px;background-color:#fff}.need-share-button_wechat{color:#a2dc30}.need-share-button_wechat.need-share-button_link-box{color:#fff;background:#a2dc30}.need-share-button_weibo{color:#d52b2b}.need-share-button_weibo.need-share-button_link-box{color:#fff;background:#d52b2b}.need-share-button_douban{color:#072}.need-share-button_douban:before{content:'豆'}.need-share-button_douban.need-share-button_link-box{color:#fff;background:#072}.need-share-button_qqzone{color:#ffce00}.need-share-button_qqzone:before{content:'\\f1d6'}.need-share-button_qqzone.need-share-button_link-box{color:#fff;background:#ffce00}.need-share-button_renren{color:#207cc5}.need-share-button_renren.need-share-button_link-box{color:#fff;background:#207cc5}.need-share-button_mailto{color:#efbe00}.need-share-button_mailto:before{content:'\\e811'}.need-share-button_mailto.need-share-button_link-box{color:#fff;background:#efbe00}.need-share-button_twitter{color:#00acec}.need-share-button_twitter.need-share-button_link-box{color:#fff;background:#00acec}.need-share-button_pinterest{color:#cd2027}.need-share-button_pinterest.need-share-button_link-box{color:#fff;background:#cd2027}.need-share-button_facebook{color:#3b5998}.need-share-button_facebook.need-share-button_link-box{color:#fff;background:#3b5998}.need-share-button_googleplus{color:#d44132}.need-share-button_googleplus.need-share-button_link-box{color:#fff;background:#d44132}.need-share-button_reddit{color:#000}.need-share-button_reddit.need-share-button_link-box{color:#fff;background:#000}.need-share-button_delicious{color:#000}.need-share-button_delicious.need-share-button_link-box{color:#fff;background:#000}.need-share-button_tapiture{color:#30547d}.need-share-button_tapiture.need-share-button_link-box{color:#fff;background:#30547d}.need-share-button_stumbleupon{color:#f04e23}.need-share-button_stumbleupon.need-share-button_link-box{color:#fff;background:#f04e23}.need-share-button_linkedin{color:#0085af}.need-share-button_linkedin.need-share-button_link-box{color:#fff;background:#0085af}.need-share-button_slashdot{color:#026664}.need-share-button_slashdot.need-share-button_link-box{color:#fff;background:#026664}.need-share-button_technorati{color:#49ae47}.need-share-button_technorati.need-share-button_link-box{color:#fff;background:#49ae47}.need-share-button_posterous{color:#795d31}.need-share-button_posterous.need-share-button_link-box{color:#fff;background:#795d31}.need-share-button_tumblr{color:#34465d}.need-share-button_tumblr.need-share-button_link-box{color:#fff;background:#34465d}.need-share-button_googlebookmarks{color:#fde331}.need-share-button_googlebookmarks.need-share-button_link-box{color:#fff;background:#fde331}.need-share-button_newsvine{color:#03652c}.need-share-button_newsvine.need-share-button_link-box{color:#fff;background:#03652c}.need-share-button_pingfm{color:#94b5da}.need-share-button_pingfm.need-share-button_link-box{color:#fff;background:#94b5da}.need-share-button_evernote{color:#79d626}.need-share-button_evernote.need-share-button_link-box{color:#fff;background:#79d626}.need-share-button_friendfeed{color:#b0cbe9}.need-share-button_friendfeed.need-share-button_link-box{color:#fff;background:#b0cbe9}.need-share-button_vkontakte{color:#4c75a3}.need-share-button_vkontakte.need-share-button_link-box{color:#fff;background:#4c75a3}.need-share-button_odnoklassniki{color:#ed812b}.need-share-button_odnoklassniki.need-share-button_link-box{color:#fff;background:#ed812b}.need-share-button_mailru{color:#f89c0e}.need-share-button_mailru.need-share-button_link-box{color:#fff;background:#f89c0e}"},{"title":"","date":"2020-02-03T07:24:56.642Z","updated":"2020-02-03T07:24:56.642Z","comments":true,"path":"lib/needsharebutton/src/less/needsharebutton.css","permalink":"http://wzw1016.ml/lib/needsharebutton/src/less/needsharebutton.css","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ /* Social icons font ***********************************************/ @import url(\"fontello-embedded.css\"); .need-share-button { position: relative; } .need-share-button-opened { position: relative; } .need-share-button-opened img.need-share-wechat-code-image { width: 100%; max-width: 200px; display: block; margin: auto; } .need-share-button_dropdown { width: 300px; z-index: 10; overflow: hidden; text-align: center; border-radius: 4px; visibility: hidden; opacity: 0; transform: scale(0.1); transition: .3s; font-size: 16px; position: absolute; background-color: #fff; box-shadow: 0 0 2px rgba(0, 0, 0, 0.5); white-space: normal; } .need-share-button-opened .need-share-button_dropdown { visibility: visible; opacity: 1; transform: scale(1); } .need-share-button_dropdown-box-vertical, .need-share-button_dropdown-box-horizontal { border-radius: 0; } .need-share-button_dropdown-box-vertical { width: 50px; } .need-share-button_dropdown-box-horizontal { width: auto; white-space: nowrap; } .need-share-button_link { display: inline-block; width: 50px; height: 50px; line-height: 50px; text-align: center; cursor: pointer; } .need-share-button_link:hover { transition: .3s; opacity: .7; } /* Dropdown position ***********************************************/ .need-share-button_dropdown-top-left { bottom: 100%; right: 100%; margin-right: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-right { bottom: 100%; left: 100%; margin-left: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-center { bottom: 100%; left: 50%; margin-bottom: 10px; } .need-share-button_dropdown-middle-left { top: 50%; right: 100%; margin-right: 10px; } .need-share-button_dropdown-middle-right { top: 50%; left: 100%; margin-left: 10px; } .need-share-button_dropdown-bottom-left { top: 100%; right: 100%; margin-right: 10px; margin-top: 10px; } .need-share-button_dropdown-bottom-right { top: 100%; left: 100%; margin-left: 10px; margin-top: 10px; } .need-share-button_dropdown-bottom-center { top: 100%; left: 50%; margin-top: 10px; } /* Default theme ***********************************************/ .need-share-button-default { display: inline-block; padding: 6px 12px; margin-bottom: 0; font-size: 14px; font-weight: 400; line-height: 1.42857143; text-align: center; vertical-align: middle; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; border: 1px solid #ccc; border-radius: 4px; color: #333; background-color: #fff; } /* Network buttons ***********************************************/ .need-share-button_wechat { color: #a2dc30; } .need-share-button_wechat.need-share-button_link-box { background: #a2dc30; color: #fff; } .need-share-button_weibo { color: #d52b2b; } .need-share-button_weibo.need-share-button_link-box { background: #d52b2b; color: #fff; } .need-share-button_douban { color: #072; } .need-share-button_douban:before { content: '豆'; } .need-share-button_douban.need-share-button_link-box { background: #072; color: #fff; } .need-share-button_qqzone { color: #ffce00; } .need-share-button_qqzone:before { content: '\\f1d6'; } .need-share-button_qqzone.need-share-button_link-box { background: #ffce00; color: #fff; } .need-share-button_renren { color: #207cc5; } .need-share-button_renren.need-share-button_link-box { background: #207cc5; color: #fff; } .need-share-button_mailto { color: #EFBE00; } .need-share-button_mailto.need-share-button_link-box { background: #EFBE00; color: #fff; } .need-share-button_twitter { color: #00ACEC; } .need-share-button_twitter.need-share-button_link-box { background: #00ACEC; color: #fff; } .need-share-button_pinterest { color: #CD2027; } .need-share-button_pinterest.need-share-button_link-box { background: #CD2027; color: #fff; } .need-share-button_facebook { color: #3B5998; } .need-share-button_facebook.need-share-button_link-box { background: #3B5998; color: #fff; } .need-share-button_googleplus { color: #D44132; } .need-share-button_googleplus.need-share-button_link-box { background: #D44132; color: #fff; } .need-share-button_reddit { color: #000000; } .need-share-button_reddit.need-share-button_link-box { background: #000000; color: #fff; } .need-share-button_delicious { color: #000000; } .need-share-button_delicious.need-share-button_link-box { background: #000000; color: #fff; } .need-share-button_tapiture { color: #30547D; } .need-share-button_tapiture.need-share-button_link-box { background: #30547D; color: #fff; } .need-share-button_stumbleupon { color: #F04E23; } .need-share-button_stumbleupon.need-share-button_link-box { background: #F04E23; color: #fff; } .need-share-button_linkedin { color: #0085AF; } .need-share-button_linkedin.need-share-button_link-box { background: #0085AF; color: #fff; } .need-share-button_slashdot { color: #026664; } .need-share-button_slashdot.need-share-button_link-box { background: #026664; color: #fff; } .need-share-button_technorati { color: #49AE47; } .need-share-button_technorati.need-share-button_link-box { background: #49AE47; color: #fff; } .need-share-button_posterous { color: #795D31; } .need-share-button_posterous.need-share-button_link-box { background: #795D31; color: #fff; } .need-share-button_tumblr { color: #34465D; } .need-share-button_tumblr.need-share-button_link-box { background: #34465D; color: #fff; } .need-share-button_googlebookmarks { color: #FDE331; } .need-share-button_googlebookmarks.need-share-button_link-box { background: #FDE331; color: #fff; } .need-share-button_newsvine { color: #03652C; } .need-share-button_newsvine.need-share-button_link-box { background: #03652C; color: #fff; } .need-share-button_pingfm { color: #94B5DA; } .need-share-button_pingfm.need-share-button_link-box { background: #94B5DA; color: #fff; } .need-share-button_evernote { color: #79D626; } .need-share-button_evernote.need-share-button_link-box { background: #79D626; color: #fff; } .need-share-button_friendfeed { color: #B0CBE9; } .need-share-button_friendfeed.need-share-button_link-box { background: #B0CBE9; color: #fff; } .need-share-button_vkontakte { color: #4C75A3; } .need-share-button_vkontakte.need-share-button_link-box { background: #4C75A3; color: #fff; } .need-share-button_odnoklassniki { color: #ED812B; } .need-share-button_odnoklassniki.need-share-button_link-box { background: #ED812B; color: #fff; } .need-share-button_mailru { color: #F89C0E; } .need-share-button_mailru.need-share-button_link-box { background: #F89C0E; color: #fff; }"},{"title":"","date":"2020-02-03T07:24:56.641Z","updated":"2020-02-03T07:24:56.641Z","comments":true,"path":"lib/needsharebutton/src/js/needsharebutton.js","permalink":"http://wzw1016.ml/lib/needsharebutton/src/js/needsharebutton.js","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ (function() { // find closest function closest(elem, parent) { if (typeof(parent) == 'string') { var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector; if (!!matchesSelector) { while (elem) { if (matchesSelector.bind(elem)(parent)) { return elem; } else { elem = elem.parentElement; } } } return false; } else { while (elem) { if (elem == parent) { return elem; } else { elem = elem.parentElement; } } return false; } } // share button class window.needShareButton = function(elem, options) { // create element reference var root = this; root.elem = elem || 'need-share-button'; /* Helpers ***********************************************/ // get title from html root.getTitle = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('title')){ return content.innerText; } } return document.title; }; // get image from html root.getImage = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('meta[property=\"og:image\"]') || document.querySelector('meta[name=\"twitter:image\"]')) { return content.getAttribute('content'); } else return ''; } else return ''; }; // get description from html root.getDescription = function() { var content; // check querySelector existance for old browsers if (document.querySelector) { if (content = document.querySelector('meta[property=\"og:description\"]') || document.querySelector('meta[name=\"twitter:description\"]') || document.querySelector('meta[name=\"description\"]')) { return content.getAttribute('content'); } else return ''; } else { if (content = document.getElementsByTagName('meta').namedItem('description')) return content.getAttribute('content'); else return ''; } }; // share urls for all networks root.share = { 'weibo': function (el) { var myoptions = getOptions(el); var url = 'http://v.t.sina.com.cn/share/share.php?title=' + encodeURIComponent(myoptions.title) + \"&url=\"+encodeURIComponent(myoptions.url) + \"&pic=\"+encodeURIComponent(myoptions.image); root.popup(url); }, 'wechat': function (el) { var myoptions = getOptions(el); var imgSrc = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data='+encodeURIComponent(myoptions.url); var dropdownEl = el.querySelector('.need-share-button_dropdown'); var img = dropdownEl.getElementsByClassName('need-share-wechat-code-image')[0]; if (img) { img.remove(); } else { img = document.createElement('img'); img.src = imgSrc; img.alt = 'loading wechat image...'; img.setAttribute(\"class\",'need-share-wechat-code-image'); dropdownEl.appendChild(img); } }, 'douban': function (el) { var myoptions = getOptions(el); var url = 'https://www.douban.com/share/service?name=' + encodeURIComponent(myoptions.title) + \"&href=\"+encodeURIComponent(myoptions.url) + \"&image=\"+encodeURIComponent(myoptions.image); root.popup(url); }, 'qqzone': function (el) { var myoptions = getOptions(el); var url = 'http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=' + encodeURIComponent(myoptions.title) + \"&url=\"+encodeURIComponent(myoptions.url) + \"&pics=\"+encodeURIComponent(myoptions.image) + \"&desc=\"+ encodeURIComponent(myoptions.description); root.popup(url); }, 'renren': function (el) { var myoptions = getOptions(el); var url = 'http://widget.renren.com/dialog/share?title=' + encodeURIComponent(myoptions.title) + \"&resourceUrl=\"+encodeURIComponent(myoptions.url) + \"&pic=\"+encodeURIComponent(myoptions.image) + \"&description=\"+ encodeURIComponent(myoptions.description); root.popup(url); }, 'mailto' : function(el) { var myoptions = getOptions(el); var url = 'mailto:?subject=' + encodeURIComponent(myoptions.title) + '&body=Thought you might enjoy reading this: ' + encodeURIComponent(myoptions.url) + ' - ' + encodeURIComponent(myoptions.description); window.location.href = url; }, 'twitter' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'twitter.com/intent/tweet?text='; url += encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, 'pinterest' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'pinterest.com/pin/create/bookmarklet/?is_video=false'; url += '&media=' + encodeURIComponent(myoptions.image); url += '&url=' + encodeURIComponent(myoptions.url); url += '&description=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'facebook' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.facebook.com/share.php?'; url += 'u=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'googleplus' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'plus.google.com/share?'; url += 'url=' + encodeURIComponent(myoptions.url); root.popup(url); }, 'reddit' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.reddit.com/submit?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'delicious' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'del.icio.us/post?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&notes=' + encodeURIComponent(myoptions.description); root.popup(url); }, // 'tapiture' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'tapiture.com/bookmarklet/image?'; // url += 'img_src=' + encodeURIComponent(myoptions.image); // url += '&page_url=' + encodeURIComponent(myoptions.url); // url += '&page_title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, 'stumbleupon' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.stumbleupon.com/submit?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'linkedin' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.linkedin.com/shareArticle?mini=true'; url += '&url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&source=' + encodeURIComponent(myoptions.source); root.popup(url); }, // 'slashdot' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'slashdot.org/bookmark.pl?'; // url += 'url=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, // 'technorati' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'technorati.com/faves?'; // url += 'add=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, 'posterous' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'posterous.com/share?'; url += 'linkto=' + encodeURIComponent(myoptions.url); root.popup(url); }, 'tumblr' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.tumblr.com/share?v=3'; url += '&u=' + encodeURIComponent(myoptions.url); url += '&t=' + encodeURIComponent(myoptions.title); root.popup(url); }, // 'googlebookmarks' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'www.google.com/bookmarks/mark?op=edit'; // url += '&bkmk=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&annotation=' + encodeURIComponent(myoptions.description); // // root.popup(url); // }, // 'newsvine' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'www.newsvine.com/_tools/seed&save?'; // url += 'u=' + encodeURIComponent(myoptions.url); // url += '&h=' + encodeURIComponent(myoptions.title); // // root.popup(url); // }, // 'pingfm' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'ping.fm/ref/?'; // url += 'link=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&body=' + encodeURIComponent(myoptions.description); // // root.popup(url); // }, 'evernote' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.evernote.com/clip.action?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'friendfeed' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.friendfeed.com/share?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); root.popup(url); }, 'vkontakte' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'vkontakte.ru/share.php?'; url += 'url=' + encodeURIComponent(myoptions.url); url += '&title=' + encodeURIComponent(myoptions.title); url += '&description=' + encodeURIComponent(myoptions.description); url += '&image=' + encodeURIComponent(myoptions.image); url += '&noparse=true'; root.popup(url); }, 'odnoklassniki' : function(el) { var myoptions = getOptions(el); var url = myoptions.protocol + 'www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1'; url += '&st.comments=' + encodeURIComponent(myoptions.description); url += '&st._surl=' + encodeURIComponent(myoptions.url); root.popup(url); }, // 'mailru' : function(el) { // var myoptions = getOptions(el); // var url = myoptions.protocol + 'connect.mail.ru/share?'; // url += 'url=' + encodeURIComponent(myoptions.url); // url += '&title=' + encodeURIComponent(myoptions.title); // url += '&description=' + encodeURIComponent(myoptions.description); // url += '&imageurl=' + encodeURIComponent(myoptions.image); // // root.popup(url); // } } // open share link in a popup root.popup = function(url) { // set left and top position var popupWidth = 600, popupHeight = 500, // fix dual screen mode dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left, dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top, width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width, height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height, // calculate top and left position left = ((width / 2) - (popupWidth / 2)) + dualScreenLeft, top = ((height / 2) - (popupHeight / 2)) + dualScreenTop, // show popup shareWindow = window.open(url,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=' + popupWidth + ', height=' + popupHeight + ', top=' + top + ', left=' + left); // Puts focus on the newWindow if (window.focus) { shareWindow.focus(); } } /* Set options ***********************************************/ // create default options root.options = { iconStyle: 'default', // default or box boxForm: 'horizontal', // horizontal or vertical position: 'bottomCenter', // top / middle / bottom + Left / Center / Right protocol: ['http', 'https'].indexOf(window.location.href.split(':')[0]) === -1 ? 'https://' : '//', networks: 'Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Mailto' }; // integrate custom options for (var i in options) { root.options[i] = options[i]; } // convert networks string into array root.options.networks = root.options.networks.toLowerCase().split(','); function getOptions(el) { // integrate data attribute options var ret = {}; for (var i in root.options) { ret[i] = root.options[i]; } // these attrs must get dynamically. ret.url = window.location.href; ret.title = root.getTitle(); ret.image = root.getImage(); ret.description = root.getDescription(); for (var option in el.dataset) { // replace only 'share-' prefixed data-attributes if (option.match(/share/)) { var new_option = option.replace(/share/, ''); if (!new_option.length) { continue; } new_option = new_option.charAt(0).toLowerCase() + new_option.slice(1); var val = el.dataset[option]; if (new_option === 'networks') { val = val.toLowerCase().split(','); } else if (new_option === 'url' && val && val[0] === '/') { // fix relative url problem. val = location.origin + val; } ret[new_option] = val; } } return ret; } function createDropdown(el) { // create dropdown var dropdownEl = document.createElement('span'); dropdownEl.className = 'need-share-button_dropdown'; if (el.querySelector('.need-share-button_dropdown')) { return; } var myoptions = getOptions(el); // set dropdown row length if (myoptions.iconStyle == 'box' && myoptions.boxForm == 'horizontal') dropdownEl.className += ' need-share-button_dropdown-box-horizontal'; else if (myoptions.iconStyle == 'box' && myoptions.boxForm == 'vertical') dropdownEl.className += ' need-share-button_dropdown-box-vertical'; // set dropdown position setTimeout(function() { switch (myoptions.position) { case 'topLeft': dropdownEl.className += ' need-share-button_dropdown-top-left'; break case 'topRight': dropdownEl.className += ' need-share-button_dropdown-top-right'; break case 'topCenter': dropdownEl.className += ' need-share-button_dropdown-top-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break case 'middleLeft': dropdownEl.className += ' need-share-button_dropdown-middle-left'; dropdownEl.style.marginTop = - dropdownEl.offsetHeight / 2 + 'px'; break case 'middleRight': dropdownEl.className += ' need-share-button_dropdown-middle-right'; dropdownEl.style.marginTop = - dropdownEl.offsetHeight / 2 + 'px'; break case 'bottomLeft': dropdownEl.className += ' need-share-button_dropdown-bottom-left'; break case 'bottomRight': dropdownEl.className += ' need-share-button_dropdown-bottom-right'; break case 'bottomCenter': dropdownEl.className += ' need-share-button_dropdown-bottom-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break default: dropdownEl.className += ' need-share-button_dropdown-bottom-center'; dropdownEl.style.marginLeft = - dropdownEl.offsetWidth / 2 + 'px'; break } },1); // fill fropdown with buttons var iconClass = myoptions.iconStyle == 'default' ? 'need-share-button_link need-share-button_' : 'need-share-button_link-' + myoptions.iconStyle + ' need-share-button_link need-share-button_'; for (var network in myoptions.networks) { var link = document.createElement('span'); network = myoptions.networks[network]; link.className = iconClass + network; link.className += ' icon-' + network; link.dataset.network = network; link.title = network; dropdownEl.appendChild(link); } dropdownEl.addEventListener('click', function (event) { if (closest(event.target, '.need-share-button_link')) { event.preventDefault(); event.stopPropagation(); root.share[event.target.dataset.network](el); return false; } }); el.appendChild(dropdownEl); } // close on click outside document.addEventListener('click', function(event) { var openedEl = document.querySelector('.need-share-button-opened'); if (!closest(event.target, '.need-share-button-opened')) { if (openedEl) { openedEl.classList.remove('need-share-button-opened'); // hide wechat code image when close the dropdown. if (openedEl.querySelector('.need-share-wechat-code-image')) { openedEl.querySelector('.need-share-wechat-code-image').remove(); } } else { var el = closest(event.target, root.elem); if (el) { if (!el.classList.contains('need-share-button-opened')) { createDropdown(el); setTimeout(function () { el.classList.add('need-share-button-opened'); }, 1); } } } } }); }; new needShareButton('.need-share-button'); })();"}],"posts":[{"title":"前端工程化之四：模块化打包工具","slug":"前端工程化之四：模块化打包工具","date":"2020-11-20T12:10:02.000Z","updated":"2021-03-02T15:17:26.504Z","comments":true,"path":"2020/11/20/前端工程化之四：模块化打包工具/","link":"","permalink":"http://wzw1016.ml/2020/11/20/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E5%9B%9B%EF%BC%9A%E6%A8%A1%E5%9D%97%E5%8C%96%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/","excerpt":"1. 使用模块打包工具的原因问题 ES Modules 存在环境兼容性问题 模块文件过多，网络请求频繁 所有的前端资源都需要模块化 需求 新特性编译，解决兼容性 将模块文件打包，以减少生产环境的请求次数 (HTTP 1.1 版本的缺陷，如：同域并行请求限制、请求延迟、请求的 Header 浪费带宽流量) 支持不同种类的前端资源类型（js、css、scss、hbs、png、ts、font） 需求1与2可通过构建系统配合编译工具实现，而需求3难以实现","text":"1. 使用模块打包工具的原因问题 ES Modules 存在环境兼容性问题 模块文件过多，网络请求频繁 所有的前端资源都需要模块化 需求 新特性编译，解决兼容性 将模块文件打包，以减少生产环境的请求次数 (HTTP 1.1 版本的缺陷，如：同域并行请求限制、请求延迟、请求的 Header 浪费带宽流量) 支持不同种类的前端资源类型（js、css、scss、hbs、png、ts、font） 需求1与2可通过构建系统配合编译工具实现，而需求3难以实现 2. 概述Webpack、Parcel、Rollup 等 主要功能： 模块打包器（Module Bundler） 模块加载器（Loader） 代码拆分（Code Splitting） 资源模块（Asset Module） 打包工具解决的是前端整体的模块化，并不单指 Javascript 模块化 3. Webpack Webpack 只是打包工具（默认只会处理 import 和 export） 可以使用加载器（loader）进行代码的编译转换 安装 1yarn add webpack webpack-cli --dev 1. 配置文件webpack.config.js 运行在 node 环境，使用 CommonJS 规范 12345678910const path = require('path')module.exports = &#123; entry: './src/index.js', // 入口文件，相对路径不可省略 ./ output: &#123; filename: 'bundle.js', path：path.join(__dirname, 'output'), // 必须为绝对路径, 默认在项目根目录下的 dist 文件夹 &#125; ...&#125; 2. 工作模式可通过 cli 命令 1webpack --mode development 默认为 production，会启动一些插件进行代码优化 development，优化打包速度，添加调试辅助 none，默认打包，不做处理 或 webpack.config.js 12345&#123; ... mode: 'development', ...&#125; 3. 打包结果运行原理mode 设置为 none 后运行 webapck，打包后的文件可以清晰看到 webpack 的运行过程（webpackBootstrap函数） 4. 资源模块加载js files =&gt; bundle.js（by default loader） other files =&gt; bundle.js（by other loader） Loader 是 Webpack 实现前端模块化的核心，通过不同的 Loader 可以加载任何类型的资源文件 使用示例： 123456789101112131415&#123; ... module: &#123; rules: [ &#123; test: /.css$/, use: [ 'style-loader', 'css-loader', ], &#125;, ], &#125; ...&#125; 根据代码的需要动态引入资源 需要资源的不是应用，而是代码 JavaScript 驱动整个前端应用，在 js 中引入资源文件： 逻辑合理，JS 确实需要这些资源文件 保证上线资源不确实，都是必要的 5. 常用 loader 编译转换类（convert to JavaScript module（bundle.js）） css-loader babel-loader … 文件操作类（将加载到的资源拷贝到输出目录，在 bundle.js 中的模块中输出对应的访问路径） file-loader … 代码检查类（对代码语法、风格进行检查，保证生产质量） eslint-loader … 6. webpack 加载资源的方式（尽量较少混用） 遵循 ESM 标准的 import 声明 遵循 CMJ 标准的 require 函数 注意：当使用 require 函数导入 ESM 模块时，对于 ESM 的默认导出，需使用 require 函数返回值的 default 属性获取模块。如下： 1const createHeader = require('./createHeader').default 遵循 AMD 标准的 define 函数和 require 函数 Loader 加载的非 JavaScript 也会触发资源加载 如： 样式文件中的 @import 指令和 url 函数 HTML 文件中图片标签的 src 属性 … 7. webpack 核心工作原理Webpack 会根据配置，从入口文件开始，找到 import 或 require 之类加载文件或资源的语句，解析对应的资源模块，并解析每一个资源模块对应的依赖。构建出项目中文件（模块）之间依赖关系的依赖树。 随后递归此依赖树，找到依赖树中每个节点所加载的的资源文件，根据配置文件中的 rules 属性，使用指定的的加载器（loader）加载该模块。 最后将 loader 加载后的结果放入打包后的结果（bundle.js）中，从而实现整个项目的打包。 8. 自定义 loader source 为接收文件内容 无论使用了几个 loader 处理资源，最终 loader 导出函数的返回值必须为 js 代码（因为 webpack 会在打包后的文件（bundle.js）中对其进行简单的字符串拼接） 例：markdown-loader 方式一： markdown-loader.js 123456const marked = require('marked')module.exports = source =&gt; &#123; const html = marked(source) return `export default $&#123;JSON.stringify(html)&#125;`&#125; webpack.config.js 123456789101112&#123; ... module: &#123; rules: [ &#123; test: /\\.md$/, use: './markdown-loader', &#125; ] &#125; ...&#125; 方式二： markdown-loader.js 123456const marked = require('marked')module.exports = source =&gt; &#123; const html = marked(source) return html&#125; webpack.config.js 123456789101112131415&#123; ... module: &#123; rules: [ &#123; test: /\\.md$/, use: [ 'html-loader', './markdown-loader' ] &#125; ] &#125; ...&#125; 类似处理的管道：file=====&gt; 由 markdown-loader 处理 ==&gt; 由 html-loader 处理 =====&gt; 最终输出到 bundle.js 9. 插件（plugin）使用插件的目的：为了增强 webpack 的自动化能力 如： 清除 dist 目录 拷贝静态文件 压缩输出代码 … webpack + plugin 的确实现了大多数的前端工程化 10. 常用插件 clean-webpack-plugin（清除 dist ） html-webpack-plugin（自动生成 bundle.js 的 HTML，通过 webpack 输出 HTML，自动引用 bundle.js ) copy-webpack-plugin（复制静态文件） mini-css-extract-plugin（将 css 代码从打包结果中提取出来，从而可以实现 css 的按需加载） 若 css 样式体积并不是很大，为了减少网络请求，则无需使用该插件提取为单独文件（150kb以下） optimize-css-assets-webpack-plugin（压缩样式文件） webpack 建议将压缩类的插件添加到 optimization 中的 minimizer 属性数组中（若配置在 plugins 数组中，则该插件任何情况下都会工作，而配置在 minimizer 数组中只会在 minimize 特性开启时才会工作。production 模式下 minimize 默认会自动开启） webpack 生产模式下内置的压缩器只支持 js 文件的压缩 terser-webpack-plugin (webpack 内置 js 压缩文件) 在自定义 optimization.minimizer 时，webpack 内置的压缩器插件将会被自定义的optimization.minimizer 覆盖，所以需要在 optimization.minimizer 中手动重新添加该插件。 使用示例： 1234567891011121314151617181920212223242526272829303132333435363738394041const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin')const HtmlWebpakPlugin = require('html-webpack-plugin')const MiniCssExtractPlugin = require('mini-css-extract-plugin')const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')const terserWebpackPlugin = reuqire('terser-webpack-plugin')module.exports = &#123; ... module: &#123; rules: [ &#123; test: /.css$/, use: [ MiniCssExtractPlugin.loader, 'css-loader', ], &#125;, ], &#125;, optimization: &#123; minimizer: [ new terserWebpackPlugin(), new OptimizeCssAssetsWebpackPlugin(), ] &#125;, pulgins: [ new CleanWebpackPlugin(), new HtmlWebpakPlugin(&#123; // 若HTML需大量定制，可以使用模板 title: 'webpack plugin sample' // 生成HTML的titlt meta: &#123; // 生成HTML的meta viewport: 'width=device-width' &#125;, ... &#125;), new MiniCssExtractPlugin(&#123; filename: '[name].bundle.css' &#125;), ... ], ...&#125; 绝大多数 plugin 模块导出的都是一个类型。 11. 自定义 pluginplugin 通过钩子（Hooks）机制实现（在 webpack 不同的生命周期钩子上挂载不同的任务） plugin 必须为一个函数或者是一个包含 apply 方法的对象 示例：去除打包后的文件 bundle.js 中注释的插件 123456789101112131415161718192021222324252627class MyPlugin &#123; apply(compiler) &#123; compiler.hooks.emit.tap('MyPlugin', compilation =&gt; &#123; // emit 为 webpack 钩子 // compilation 此次打包的上下文 for(const name in compilation.assets) &#123; if(name.endWidth('.js')) &#123; const contents = compilation.assets[name].source() const withoutComments = contents.replace(/\\/\\*\\*+\\*\\//g, '') compilation.assets[name] = &#123; source: () =&gt; withoutComments, size: () =&gt; withoutComments.length &#125; &#125; &#125; &#125;) &#125;&#125; module.exports = &#123; ... plugins: [ new MyPlugin() ] ... &#125; 12. 增强开发体验目标： 以 HTTP server 运行（更加接近生产环境，并且文件方式打开 ajax 请求不能发送 ） 自动编译、自动刷新 source Map 方案一 实现自动编译 1webpack --watch 实现自动刷新 使用 browser-sync 模块 123yarn add browser-syncbrowser-sync dist --file &quot;**&#x2F;*&quot; 弊端：较为麻烦、频繁磁盘读写 Webpack dev server 提供 HTTP server 集成 自动编译、自动刷新 等功能 使用： 1234yarn add webpack-dev-server --devyarn webpack-dev-serveryarn webpack-dev-server --open &#x2F;&#x2F; 自动打开浏览器 将打包后的文件放在内存中，减少了磁盘读写，提高开发效率 配置： 1234567891011121314151617181920module.exports = &#123; ... devServer: &#123; contentBase: './public', // 访问静态资源路径 proxy: &#123; '/api': &#123; // http://localhost:8080/api/users =&gt; https://api.github.com/api/users target: 'https://api.github.com', // http://localhost:8080/api/users =&gt; https://api.github.com/users pathRewrite: &#123; '^/api': '' &#125;, // 不使用 localhost:8080 作为请求 Github 的主机名 changeOrigin: true, &#125; &#125; ... &#125; ...&#125; webpack-cli 4版本后：webpack serve Source Map问题：经过编译后的运行代码，难以调试，故障排查苦难。 映射源代码与转换之后代码之间的关系 解决了源代码与运行代码不一致产生的问题 Webpack 多任务1234567891011121314module.exports = [ &#123; entry: './src/main.js', output: &#123; filename: 'a.js' &#125;, &#125;, &#123; entry: './src/main.js', output: &#123; filename: 'a.js' &#125;, &#125;] 会分别执行 module.exports 导出数组中的每个任务。 Webpack Source Map 配置12345module.exports = &#123; ... devtool: 'source-map', ...&#125; devtool 模式devtool 的多种模式（https://webpack.js.org/configuration/devtool/#devtool） 各标识含义 eval：是否使用 eval() 执行模块代码 cheap：source map 是否包含列信息（cheap 只包含行信息，不包含列） module：是否能够得到 loader 处理之前的源代码 eval：不生成 source map 文件，通过在 eval 函数的字符串参数最后添加 sourceUrl=./foo/bar.js 这种方式，标注模块文件的路径 eval-source-map：生成 source map 文件，可以定位到文件、行、列信息 cheap-eval-source-map：与 eval-source-map 相比，无列信息，为 loader 处理后的代码 cheap-module-eval-source-map：与 cheap-eval-source-map 相比，可以得到未经 loader 处理的源代码 cheap-source-map：未使用 eval() 执行模块代码，得到 loader 处理后的代码 inline-source-map：将 source-map 在代码中以data url 方式嵌入（不推荐使用，增大代码体积） hidden-source-map：生成，但不引入 source-map 文件（开发第三方包） nosources-source-map：提供文件、行、列信息，但无源代码（生产环境保护源代码） 选择 webpack 的 source map 模式 开发环境：cheap-module-eval-source-map 生产环境：none / nosources-source-map 具体以实际业务需求为准 dev server 自动刷新的问题问题核心：自动刷新导致的页面状态丢失 需求：页面不刷新的前提下，及时更新所修改的模块 解决办法： 在编辑器中写死状态或内容 额外代码实现刷新前保存、刷新后读取（如存入 localStorage 中） HMR HMR（Hot Module Replacement 模块热替换）​ 热插拔：在正在运行的设备上随时插拔设备（如电脑的 USB 端口） 定义：应用程序运行过程中，实时替换掉某个模块，应用运行状态不受影响 集成在 webpack-dev-server 中 1webpack-dev-server --hot 或进行配置： 1234567891011121314const webpack = require('webpack')module.exports = &#123; ... devServer: &#123; hot: true &#125; ... plugins: [ ... new webpack.HotModuleReplacement(), ... ]&#125; 样式文件就可以实现热模块替换了（因为 style-loader 已经内部实现了 HMR） 脚本文件需手动替换模块热替换逻辑 还有 js 文件，假设有一个 print.js 模块，向外暴露函数对象 print。 若需要为其实现热模块替换，则需在入口文件中新增如下代码： 123456789...// 判断HMR是否开启if (module.hot) &#123; // 监听print.js文件的变化，一旦其发生变化，不会重新打包，而是执行后续的回调函数 module.hot.accept('./print.js', () =&gt; &#123; print() &#125;)&#125;... 因为 js 文件较为复杂，而样式文件只需替换即可 通过脚手架创建的项目内部都集成了 HMR 方案 HMR 注意事项 处理 HMR 的代码报错会导致页面自动刷新 因为 hot 方式，当热替换失败出现错误时，将回退到刷新页面的方式，页面刷新后错误信息将不容易找到。 解决办法：使用 hotOnly 12345...devServer: &#123; hotOnly: true,&#125;... 将不会刷新页面 没开启 HMR，HMR API 报错 解决办法：先进行判断 123if (module.hot) &#123; ...&#125; 因为 module.hot 对象是 webpack 的 HMR 插件提供的 代码中多出了与业务功能无关的代码 处理热替换的代码将不会被打包（无需处理） 13. 生产环境优化生产环境注重运行效率、开发环境注重开发效率 配置方式 mode 可以为不同的环境创建不同的配置 webpack 4 中的 production 模式下默认会开启一些优化 如（DefinePlugin、tree shaking） 配置方式 配置文件根据环境不同导出不同配置（适用于中小型项目） 123456789101112131415// env 为通过 cli 运行提供的环境名参数，argv 为运行 cli 过程中提供的所有参数module.exports = (env, argv) =&gt; &#123; const config = &#123;&#125; if(env = 'production') &#123; config.mode = 'production' config.devtool = false config.plugin = [ ...config.plugin, new CleanWebpackPlugin(), new CopyWebpackPlugin([ 'plublic' ]), ] &#125; return config&#125; webpack 可导出一个返回配置的函数 1webpack --env production webpack 默认以开发方式运行 或直接判断环境变量导出对应配置 1234567let config = &#123;&#125;process.env.NODE_ENV === 'production'? config = &#123;...&#125;: config = &#123;...&#125; module.exports = config 不同环境对应不同配置文件 一般为三个配置：开发环境配置、生产环境配置、二者公共配置 webpack.common.js webpack.production.js webpack.development.js webpack.production.js 123456789101112const common = require('./webpack.common')const merge = require('webpack-merge')const &#123; CleanWebpackPlugin &#125; = requie('clean-webpack-plugin')const CopyWebpackPlugin = require('copy-webpack-plugin')module.exports = merge(common, &#123; mode: 'production'， plugins: [ new CleanWebpackPlugin(), new CopyWebpackPlugin([ 'plublic' ]), ]&#125;) 使用 webpack-merge 模块提供的 merge 函数代替 Object.assign() 方法，因为 Object.assign() 方法会默认替换掉同名属性，而 merge 方法自动处理合并逻辑。 1webpack --config webpack.production.js 运行 webpack 打包 或定义到 npm script 中 webpack.development.js 同理 DefinePlugin作用：为代码注入全局成员 在 production 模式下默认会启，为 webpack 内置插件 1234567891011const webpack = require('webpack')module.exports = &#123; ... plugins: [ new webpack.DefinePlugin(&#123; API_BASE_URL: JSON.stringify('https://api.example.com'), // 值要求为 js 代码片段 &#125;) ] ...&#125; 在 main.js 中使用 1console.log(API_BASE_URL) Tree Shaking移除未引用代码（dead code） 在 production 模式下默认会启。 Tree Shaking 并非某一插件，而是一组功能搭配使用后的优化效果。 模拟使用 tree shaking 12345678module.exports = &#123; ... optimization: &#123; usedExports: true, // 只导出外部使用的成员 minimize: true, // 代码压缩（会自动去除未引用代码） &#125;, ...&#125; usedExports 负责标记“枯树叶”，minimize 负责“摇掉”它们 Scope Hoisting（作用域提升）目的：合并模块函数 123456789module.exports = &#123; ... optimization: &#123; usedExports: true, concatenateModules: true, // 尽可能的将所有的模块合并输出到同一个函数中 minimize: true, &#125;, ...&#125; 若模块过多，打包后的模块函数会比较多， concatenateModules 可以尽可能的将所有的模块合并输出到同一个函数中， 以此提升运行效率，减少代码体积 在 webpack 3 中添加 Tree-shaking &amp; BabelTree-shaking 前提是 ES Module babel-loader 并非无法与 tree shaking 共存，而是当 babel-loader 将 ESM 代码转换为 CMJ 代码后，tree shaking 无法工作。 若关闭 @babel/preset-env 预设中转换 ESM 的插件，则 tree-shaking 则一定会正常工作 如下： 123456789101112131415161718192021222324module.exports = &#123; ... module: &#123; rules: [ &#123; test: /\\.js$/, use: &#123; loader: 'babel-loader', options: &#123; presets: [ ['@babel/preset-env', &#123; module: false &#125;] // 转换 ESM 的插件 ] &#125; &#125; &#125; ] &#125;, optimization: &#123; usedExports: true, concatenateModules: true, minimize: true, &#125;, ...&#125; sideEffectswebpack 4 允许通过配置的方式标识代码是否有副作用，从而为 tree shaking 提供更大的压缩空间 此处的副作用：模块执行时除了导出成员之外所做的事情 sideEffects 一般用于标记 npm 包是否有副作用 应用场景： 若 components 目录下有 button.js、heading.js、link.js 等模块，并在 index.js 中重导出（聚合） index.js： 123export &#123; default as Button &#125; from './button.js'export &#123; default as Heading &#125; from './heading.js'export &#123; default as Link &#125; from './link.js' 而在 main.js 中： 123import &#123; Button &#125; from './components'document.body.appendChild(Button()) 只引入了 button 一个模块。 但此时，所有的组件模块都会被加载执行。 使用 sideEffects： webpack.config.js 123456789module.exports = &#123; ... optimization: &#123; sideEffects: true, usedExports: true, minimize: true, &#125;, ...&#125; package.json 12345&#123; ... \"sideEffects\": false, // 表明所有模块都没有副作用 ...&#125; 开启 sideEffects 后，打包时 webpack 会检查 package.json 中是否存在 sideEffects 标识，以此判断模块是否有副作用。 若模块没有副作用，则模块将不再会打包。 注意事项： 使用 sideEffects 的前提，就是确保代码真的没有副作用。 为了防止 webpack 在打包时漏掉代码中所需模块，需谨慎开启副作用； 或是在 package.json 中标识有副作用的模块，如下： 123456789&#123; ... \"sideEffects\": [ \"src/extend.js\", \"*.css\", ... ], ...&#125; 14. 代码分割（Code Splitting）面临的问题：通过 webpack 打包过后的所有代码都会被打包到一起。如应用复杂，模块过多，打包出的 bundle.js 将会体积较大。然而应用开始工作时，并不是每个模块在启动时都是必要的，因此出现浪费流量和带宽的情况。 解决办法：分包，按需加载。 具体实现途径有两种： 1. 多入口打包（Muti Entry）一般适用于传统的 多页面应用，通常一个页面对应一个入口（entry），公共部分单独提取 webpack.config.js 12345678910111213141516171819202122232425262728module.exports = &#123; ... entry: &#123; index: './src/index.js', album: './src/album.js', &#125;, output: &#123; filename: '[name].bundle.js', &#125;, pulgins: [ new CleanWebpackPlugin(), new HtmlWebpakPlugin(&#123; title: 'Muti Entry', template: './src/index.html', filename: 'index.html', // 指定 HtmlWebpakPlugin 在生成 hmtl 页面是自动引入的 js 文件。如不指定，会默认加载所有 js 文件 chunks: ['index'], &#125;), new HtmlWebpakPlugin(&#123; title: 'Muti Entry', template: './src/album.html', filename: 'album.html', chunks: ['album'], &#125;), ... ], ...&#125; 注意 entry 为一个对象（entry 为数组是将文件打包到一起） 公共模块提取 123456789module.exports = &#123; ... optimization: &#123; splitChunks: &#123; chunks: 'all', // 标识把所有的公共模块都提取到单独的打包文件中 &#125; &#125;, ...&#125; 打包后将在输出目录下生成公共的模块打包文件 2. 动态导入（ import() ）动态导入的模块会被自动分包 使用 ES Module 模块化规范 Magic Comments（魔法注释） 123456...import(/* webpackChunkName: 'album' */'./src/album') .then()... 通过 import 函数的内联注释，为打包后生成的包名命名 15. 输出文件名 Hash目的：更好的控制前端静态资源的缓存 方法：生产模式下，文件名使用 Hash 三种方式的 hash 值： filename: &#39;[name]-[hash].bundle.js&#39; 项目级别的 hash 值。一旦项目任意一处发生改变，下一次打包的 hash 值都会变换 filename: &#39;[name]-[chunkHash].bundle.js&#39; chunk 级别的 hash 值。打包过程中，同一路的 chunk（如动态 import 生成的 chunk、多打包入口生成的 chunk ），hash 值相同。同一 chunk 的文件发生修改，打包重新生成的同一 chunk 的文件的 hash 就会发生改变。 filename: &#39;[name]-[contentHash].bundle.js&#39; 文件级别的 hash 值。根据输出文件的内容生成 hash，文件内容发生变化，hash 值就会发生改变。 指定 hash 的长度：filename: &#39;[name]-[hash:8].bundle.js&#39;。默认 20 位。 使用方式： 123456789101112131415module.exports = &#123; ... output: &#123; filename: '[name]-[hash].bundle.css', &#125; pulgins: [ new CleanWebpackPlugin(), new HtmlWebpakPlugin(), new MiniCssExtractPlugin(&#123; filename: '[name]-[hash].bundle.css', &#125;), ... ], ...&#125; 综合考虑，若以控制缓存为目的，8 位 contentHash 较为优选","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://wzw1016.ml/tags/webpack/"},{"name":"模块化","slug":"模块化","permalink":"http://wzw1016.ml/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"}]},{"title":"前端工程化之三：模块化开发","slug":"前端工程化之三：模块化开发","date":"2020-10-12T04:40:02.000Z","updated":"2021-03-02T15:17:20.480Z","comments":true,"path":"2020/10/12/前端工程化之三：模块化开发/","link":"","permalink":"http://wzw1016.ml/2020/10/12/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/","excerpt":"模块化一直是前端工程化中的重大问题，在标准化的 ES Module 推出之前，前端开发人员为了进行模块化开发，创造多样的模块化规范，如 CommonJS、AMD 等社区模块化规范。本文从记录模块化演变过程为开始，以加深本人在对模块化的理解，并着重记录现代的模块化规范（ ES Module、CommonJS ）。","text":"模块化一直是前端工程化中的重大问题，在标准化的 ES Module 推出之前，前端开发人员为了进行模块化开发，创造多样的模块化规范，如 CommonJS、AMD 等社区模块化规范。本文从记录模块化演变过程为开始，以加深本人在对模块化的理解，并着重记录现代的模块化规范（ ES Module、CommonJS ）。 内容概要 模块化演变过程 模块化规范 常用的模块化打包工具 基于模块化工具构建现代 Web 工具 打包工具的优化技巧 1. 模块化概述模块化就是，通过将复杂代码按照功能的不同划分成不同的模块来单独维护的一种方式。以此提高开发效率，降低维护成本。 模块化仅仅是思想。 3. 模块化演变过程stage1 - 3：早期在没有工具和规范的情况下，以原始的模块系统未基础，通过约定，对模块化的落地方式。 stage4：模块化规范 stage-1：文件划分方式划分 js 文件，通过 script 分别引入 弊端 污染全局作用域 命名冲突问题 无法管理模块依赖关系 stage-2：命名空间方式每个模块值暴露一个对象，所有模块成员都挂载到这个对象上 弊端 仍然没有私有空间，模块内部仍可能被修改 仍然无法管理模块依赖关系 stage-3：IIFE将模块成员在 IIFE 中挂在到 全局对象 window 上 优点 每个模块有了自己的私有空间，模块内部不被外部修改了 可以将 IIFE 的参数作为依赖声明来使用。相对于文件划分和命名空间方式，模块间的依赖方式便更加明显，如下： 1234567// module a;(function($) &#123; function method1() &#123; $('body').animate(&#123; margin: '200px' &#125;) &#125; window.moduleA = &#123; method1 &#125;&#125;)(jQuery) stage-4：模块化规范的出现模块化规范 + 模块加载器 CommonJS 规范（NodeJs标准） 一个文件就是一个模块 每个模块都有单独的作用域 通过 module.exports 导出成员 通过 require 函数载入模块 以同步方式加载模块，启动时加载模块，在浏览器中效率较低（每一次页面加载，都会进行大量的同步请求） AMD（Asynchronous Module Definition）Require.js 实现了 AMD 规范 123define() // 定义require() // 载入 当加载一个模块时，会自动创建 script 标签请求对应的 js 文件，并且去执行对应的模块代码 目前绝大多数的额第三方库都支持 AMD 规范。 但 AMD 使用起来相对复杂； 而且，当项目中模块划分过于细致，会导致模块 JS 文件请求频繁。 CMD（Common Module Definition）Sea.js 类似 CommonJS 规范 ES Module4. 模块化标准规范CommonJS in Node.js（为内置模块系统，无兼容性问题） ES Modules in Browsers ES Modules（ES2015中语言层面的模块化规范） 5. ES Modules两方面，一：特性、二：语法，三：兼容性 特性1234567...&lt;body&gt; &lt;script type=\"module\"&gt; &lt;/script&gt;&lt;/body&gt;... 自动采用严格模式，忽略 ‘use strict’ 每个 ES Module 都是独立运行在私有的作用域中 ES Module 中，通过 CORS 的方式请求外部 JS 模块 因此若不在同一源下，请求的服务端地址的响应头中必须提供有效的 CORS 标头。 ES Module 中的 script 标签会自动延迟执行脚本（等同于 script 标签的 derfer 属性） 网页的加载过程中，采取 script 立即执行的机制。页面的渲染会等待脚本执行完成，再继续完成渲染。使用 ES Module 后，脚本延迟执行，不会阻塞页面渲染 ES Module 不支持文件形式访问，因此需使用 http server 的方式访问页面 语法注意： export {...}、import {...} 为固定语法，并非对象字面量和解构语法 export {...} 导出的为内部成员的引用。如下例： module1.js 1234567let foo = 'foo'setTimeout(() =&gt; &#123; foo = 'bar'&#125;, 1000)export &#123; foo &#125; main.js 1234567import &#123; foo &#125; from './module1.js'console.log(foo) // 'foo'setTimeout(() =&gt; &#123; console.log(foo) // 'bar'&#125;, 1000) import {...} 导入的成员为只读的常量 export 导出module1.js 1234export const foo = 'foo'export function hello() &#123; console.log('Hello !')&#125; main.js 1234import &#123; foo, hello &#125; from './module1.js'console.log(foo)hello() 如果在 html 中使用： 12345678...&lt;script type=\"module\"&gt; import &#123; foo, hello &#125; from './module1.js' console.log(foo) hello()&lt;/script&gt;... 或者统一导出 module1.js 123456const foo = 'foo'function hello() &#123; console.log('Hello !')&#125;export &#123; foo, hello &#125; // 为固定语法，并非导出一个对象。应按下方形式引入 main.js 1import &#123; foo, hello &#125; from './module1.js' export { foo, hello } 并非对象字面量 导出时重命名 module1.js 1234export &#123; foo as bar, hello as h&#125; main.js 1import &#123; bar, h &#125; from './module1.js' 重命名的特殊情况 module1.js 1234export &#123; foo as default, // default hello&#125; main.js 1import &#123; default as foo, hello &#125; from './module1.js' default 为 JS 关键字，不可作为变量直接使用，引入时需重命名 默认导出 module1.js 1export default &#123; foo, hello &#125; // 此时导出为一个对象，即 &#123; foo: foo, hello: hello &#125; main.js 1234// 不可以直接解构，因为 import &#123; ... &#125; = '...' 为对单独导出所设定的特殊语法import module1 from './module1.js'const &#123; foo, hello &#125; = module1 import 导入注意： 原生 ES Module 引入时，需完整填写文件路径。不可省略 .js 扩展名，不可省略目录下的 index.js 文件相对路径开头不可省略 ./，省略 ./ 会被误判为加载第三方模块（绝对路径写法：&#39;/src/components/commont/index.js&#39;，从项目根目录开始）（或可以使用完整的 URL ，引用 CDN 资源） 若只需要执行某个模块，而不需要引用该模块的成员，可以如下写法 1import &#123;&#125; from './module1.js' 或： 1import './module1.js' 将模块导出的成员全部提取： 123import * as allMumber from './module1.js'const &#123; foo, hello &#125; = allMumber 使用 import() 函数动态加载模块（该函数返回一个 promise） 123import('./module1.js').then(module1 =&gt; &#123; &#125;) 同时存在 export {...} 和 export ... 时 module1.js 12345678const foo = 'foo'function hello() &#123; console.log('Hello !')&#125;export &#123; foo, hello &#125; export default 'default export' main.js 1import &#123; foo, hello, default as title &#125; from './module1.js' 或者： 1import title, &#123; foo, hello &#125; from './module1.js' 导出导入成员index.js 12export &#123; Button &#125; from './component/button/index.js'export &#123; Avatar &#125; from './component/avatar/index.js' 若导入的模块中采取 export default, 则需： 1export &#123; default as Button &#125; from './component/button/index.js' 直接导出导入成员时，导入的成员在当前模块中不可访问 ES Module in Node.js支持情况node 8.5 之后，开始实验性的支持 ES Module 使用准备： 需将文件扩展名由 .js 文件改为 .mjs 执行时，需如下命令： 1node --experimental-modules index.mjs 使用 12345import fs from 'fs'import _ from 'lodash'import &#123; writeFileSync &#125; from 'fs' // 内置模块兼容了 ESM 提取成员的方式import &#123; cameCase &#125; from 'lodash' // 报错 与 CommonJS 交互 ESM 中可以导入 CommonJS 模块，且 CommonJS 模块始终只会导出一个默认成员，ESM 中只会导入默认成员，不能直接提取成员（即 import { … }） 不能在原生 CommonJS 模块中使用 require() 函数载入 ESM 与 CommonJS 的差异ESM 中没有 CommonJS 中的一些模块全局成员，如下： ES Modules CommonJS import require export module 如下 __filename 如下 __dirname ES Modules 中 得到 __filename 的方法： 1234import &#123; fileURLToPath &#125; from 'url'const url = import.meta.urlconst __filename = fileURLToPath(url) 得到 \\filename后，获取 __dirname： 123import &#123; dirname &#125; from 'path' const __dirname = dirname(__filename) Node 新版本对 ESM 的进一步支持只需在项目下新建 package.json 中新增 type 字段， package.json 12345&#123; ... \"type\": \"module\", ...&#125; 就不需要再修改 js 文件的后缀名。 此时，若某个文件需要使用 CommonJS 语法，需将文件扩展名改为 .cjs Babel 兼容方案1yarn add @babel&#x2F;node @babel&#x2F;core @babel&#x2F;preset-env --dev @babel/core：babel 核心模块 @babel/preset-env：babel 预设集合（包含了最新的 JS 规范中的所有新特性） module1.js 1234const foo = 'hello'const bar = 'world'export &#123; foo, bar &#125; index.js 123import &#123; foo, bar &#125; from 'module.js'console.log(foo, bar) 1yarn babel-node index.js --presets&#x3D;@babel&#x2F;preset-env 启用 node 执行 index.js 或项目根目录下新建 babel 配置文件 .babelrc ，简化命令，如下： 123&#123; \"presets\": [\"@babel/preset-env\"]&#125; 执行只需： 1yarn babel-node index.js 或使用单独的插件（transforms ES2015 modules to CommonJS）进行转换： 1yarn add @babel&#x2F;plugin-transform-modules-commonjs --dev 使用该插件处理 ESM 的兼容问题 .babelrc 12345&#123; \"plugins\": [ \"@babel/plugin-transform-modules-commonjs\" ]&#125; 1yarn babel-node index.js","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"模块化","slug":"模块化","permalink":"http://wzw1016.ml/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"}]},{"title":"前端工程化之二：自动化构建工具","slug":"前端工程化之二：自动化构建工具","date":"2020-10-03T14:40:02.000Z","updated":"2021-03-02T15:17:12.670Z","comments":true,"path":"2020/10/03/前端工程化之二：自动化构建工具/","link":"","permalink":"http://wzw1016.ml/2020/10/03/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E4%BA%8C%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/","excerpt":"本文记录在前端的自动化构建中常用的方法和工具，如使用 npm scripts，或使用 grunt、gulp、fis 这类工具来简化开发流程，将项目开发中机械式的任务进行自动化。","text":"本文记录在前端的自动化构建中常用的方法和工具，如使用 npm scripts，或使用 grunt、gulp、fis 这类工具来简化开发流程，将项目开发中机械式的任务进行自动化。 1. 使用npm scriptspackage.json 1234567...\"scripts\": &#123; \"serve\": \"...\", \"build\": \"...\", \"start\": \"...\"&#125;... 可以解决一部分简单的构建任务 2. 常用的构建工具 Grunt Gulp FIS 1. Grunt安装依赖： 1yarn add grunt --dev 项目根目录下创建 gruntfile.js 文件： 1module.exports = grunt =&gt; &#123;&#125; 该文件向外暴露一个函数，接收一个参数，该参数上定义了一些关于 grunt 任务的方法。 基本使用，创建任务： 12345module.exports = grunt =&gt; &#123; grunt.registerTask('foo', () =&gt; &#123; console.log('foo task run') &#125;)&#125; 可以在终端中运行 yarn grunt foo，执行定义的任务。 定义异步任务： 123456789module.exports = grunt =&gt; &#123; grunt.registerTask('async-task', function() &#123; const done = this.async() setTimeout(() =&gt; &#123; console.log('async-task run()') done() &#125;, 2000) &#125;)&#125; 对失败任务进行标记： 123456module.exports = grunt =&gt; &#123; grunt.registerTask('bad', () =&gt; &#123; console.log('bad task run') return false &#125;)&#125; 对异步失败任务进行标记： 123456789module.exports = grunt =&gt; &#123; grunt.registerTask('bad-async-task', function() &#123; const done = this.async() setTimeout(() =&gt; &#123; console.log('bad-async-task run()') done(false) &#125;, 2000) &#125;)&#125; 定义组合任务列表： 123module.exports = grunt =&gt; &#123; grunt.registerTask('compose', ['foo', 'bad', 'bar'])&#125; 组合任务列表中失败任务的后续任务不会执行 如需要让失败任务的后续任务执行，运行： 1yarn grunt bad-tasks --force 定义多目标任务： 12345678910111213module.exports = grunt =&gt; &#123; grunt.initConfig(&#123; build: &#123; css: 'test1', js: 'test2', &#125; &#125;) grunt.registerMultiTask('build', function() &#123; console.log(this.options()) console.log(`target: $&#123;this.target&#125;, data: $&#123;this.data&#125;`) &#125;)&#125; 使用 grunt 插件 安装对应插件依赖，如 grunt-sass： 1yarn add grunt-sass sass --dev 在 gruntfile.js 中使用 grunt.loadNpmTasks() 方法加载插件： 1234module.exports = grunt =&gt; &#123; ... grunt.loadNpmTasks('grunt-sass')&#125; 或使用社区中提供的 ‘load-grunt-tasks’ 包自动加载NPM插件： 123456const loadGruntTasks = require('load-grunt-tasks')module.exports = grunt =&gt; &#123; ... loadGruntTasks(grunt)&#125; 为任务配置目标： 123456789101112131415161718const sass = require('sass')module.exports = grunt =&gt; &#123; grunt.initConfig(&#123; sass: &#123; options: &#123; sourceMap: true, implementation: sass, &#125;, main: &#123; files: &#123; 'dist/css/main.css': 'src/scss/main.scss', &#125; &#125; &#125; &#125;) ...&#125; 运行任务 yarn grunt sass … 2. Gulp工作原理输入（读取流） ==&gt; 加工（转换流） ==&gt; 输出（写入流） 基本使用注册任务 1234exports.task1 = done =&gt; &#123; console.log('task1 run') done()&#125; 运行：yarn gulp task1 default 未默认任务，yarn gulp 即可 任务组合使用123456789const &#123; series, parallel &#125; = require('gulp')const task1 = ...const task2 = ...const task3 = ...exports.foo = series(task1, task2, task3) // 串行任务exports.bar = parallel(task1, task2, task3) // 并行任务 异步任务方式（gulp 中的任务都是异步任务）1. 1234exports.task1 = done =&gt; &#123; console.log('task1 run') done()&#125; 失败： 1234exports.error_task1 = done =&gt; &#123; console.log('error_task1 run') done(new Error('task1 failed!'))&#125; 同样遵循错误优先原则 失败失败时会中断任务队列 Promise 1234exports.task2 = () =&gt; &#123; console.log('task2 run') return Promise.resolve() // resolve的值会被忽略&#125; 失败： 1234exports.task2 = () =&gt; &#123; console.log('task2 run') return Promise.resolve() // resolve的值会被忽略&#125; 使用 async…await… 12345678910const time = time =&gt; &#123; return new Promise(resolvee =&gt; &#123; setTimeout(resolve, time) &#125;)&#125;exports.task3 = async () =&gt; &#123; await timeout(1000) console.log('task3 run')&#125; Stream 返回 stream 对象 12345678const fs = require('fs')exports.task4 = () =&gt; &#123; const readStream = fs.createReadStream('package.json') const writeStream = fs.createWriteStream('temp.txt') readStream.pipe(writeStream) return readStream&#125; 等同于： 12345678exports.task4 = done =&gt; &#123; const readStream = fs.createReadStream('package.json') const writeStream = fs.createWriteStream('temp.txt') readStream.pipe(writeStream) readStream.on('end', () =&gt; &#123; done() &#125;)&#125; 实际上 gulp 中注册了 end 事件，监听流的结束 文件操作 API + 插件使用使用 gulp 实现构建任务的常用流程： ①. 使用 gulp 提供的 src 方法创建读取流 ②. 借助插件实现文件加工（或自己转换） ③. 使用 gulp 提供的 dest方法创建写入流，写入目标文件 12345678910const &#123; src, dest &#125; = require('gulp')const cleanCss = require('gulp-clean-css')const rename = require('gulp-rename')exports.default = () =&gt; &#123; return src('src/normalize.css') .pipe(cleanCss()) // 使用插件压缩css .pipe(rename(&#123; extends: 'min.css' &#125;)) // 使用插件重命名扩展名 .pipe(dest('dist'))&#125; 4. FIS","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"自动化构建","slug":"自动化构建","permalink":"http://wzw1016.ml/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"}]},{"title":"前端工程化之一：脚手架工具","slug":"前端工程化之一：脚手架工具","date":"2020-09-16T14:40:02.000Z","updated":"2021-03-02T15:17:04.621Z","comments":true,"path":"2020/09/16/前端工程化之一：脚手架工具/","link":"","permalink":"http://wzw1016.ml/2020/09/16/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E4%B8%80%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7/","excerpt":"本文从脚手架的作用、常用的脚手架工具、通用脚手架工具剖析、开发一款脚手架几方面内容着手。记录本人在前端工程化中脚手架工具的学习","text":"本文从脚手架的作用、常用的脚手架工具、通用脚手架工具剖析、开发一款脚手架几方面内容着手。记录本人在前端工程化中脚手架工具的学习 1.作用创建项目基础结构、提供项目规范和约定 （快速创建项目骨架） （在开发相同类型的项目时，它们的组织结构、开发范式、模块依赖、工具配置、基础代码很可能相同。通过脚手架工具解决创建项目时大量重复工作的问题） 2. 常用的脚手架工具Yeoman 通用型，根据模板生成通用的项目结构 Plop 开发过程中创建特定类型的文件。 3. YeomanThe web’s scaffolding(脚手架) tool for modern webapps 可以通过 Yeoman 搭配 不同的generator 创建任何类型的项目 基本使用 全局安装yo 1yarn global add yo 安装所需的generator，例： 1yarn global add generator-node 通过 yo 运行 generator 1234mkdir my-modulecd my-moduleyo node 1. 创建 Generator 创建一个包名为 generator-name（generator-开头，name：自定义名称）的项目 安装基类依赖 1yarn add yeoman-generator 目录结构 结构一 123456├───package.json└───generators&#x2F; ├───app&#x2F; │ └───index.js └───router&#x2F; └───index.js /app 下的 generator 为使用 yo 命令运行时的默认 generator（此例中指令为 yo name）。 其他文件夹下的 generator 为 sub-generator（此例中指令为 yo name:router） 结构二 12345├───package.json├───app&#x2F;│ └───index.js└───router&#x2F; └───index.js 此目录结构时，需确保 package.json 中包含如下字段： 123456&#123; &quot;files&quot;: [ &quot;app&quot;, &quot;router&quot; ]&#125; 定义 generator 123const Generator = require('yeoman-generator')module.exports = class extends Generator &#123;&#125; Yeoman（yeoman-generator） 提供了一个基类，其中实现一些实用的函数。 使用 CommonJS 模块化规范定义一个继承自此基类的类，可以在定义的这个类中实现定义所需的功能。 重写 constructor 定义所需的自定义原型方法 关联项目到全局命令 1yarn link 2. 运行时上下文（Running Context）定义私有方法 下划线前缀 编写方法名 123456789class extends Generator &#123; method1() &#123; console.log('hey 1'); &#125; _method2() &#123; console.log('private hey'); &#125;&#125; 实例方法 123456789class extends Generator &#123; constructor(args, opts) &#123; super(args, opts) this.helperMethod = function () &#123; console.log('won\\'t be called automatically'); &#125;; &#125;&#125; 继承自父 generator 1234567891011class MyBase extends Generator &#123; helper() &#123; console.log('methods on the parent generator won\\'t be called automatically'); &#125;&#125;module.exports = class extends MyBase &#123; exec() &#123; this.helper(); &#125;&#125; 运行循环方法（类似生命周期） initializing prompting：yo name 后在终端中询问信息。使用 this.prompt() 调用 configuring default writing conflicts install：安装依赖 end 异步任务在方法中返回一个 promise 对象，resolved 时继续执行，异常时失败并停止。 如果方法不会返回 promise 对象，可以使用 this.async() 方法，this.async() 返回一个函数，可以在完成任务后调用，如下： 1234567asyncTask() &#123; var done = this.async(); getUserEmail(function (err, name) &#123; done(err); &#125;);&#125; 如果 done 函数参数为 Error 对象，则失败并停止。 3. 用户交互（User Interactions） prompt prompt 模块内部使用 Inquire.js 实现 1234567891011121314151617181920module.exports = class extends Generator &#123; async prompting() &#123; const answers = await this.prompt([ &#123; type: \"input\", name: \"name\", message: \"Your project name\", default: this.appname // Default to current folder name &#125;, &#123; type: \"confirm\", name: \"cool\", message: \"Would you like to enable the Cool feature?\" &#125; ]); this.log(\"app name\", answers.name); this.log(\"cool feature\", answers.cool); &#125;&#125; 此实例中，在执行yo name指令之后，会发出命令行询问。 可以获取到用户输入，在 wring() 执行时使用，如下： 12345678910111213141516module.exports = class extends Generator &#123; async prompting() &#123; this.answers = await this.prompt([ &#123; type: \"confirm\", name: \"cool\", message: \"Would you like to enable the Cool feature?\", store: true, &#125; ]); &#125; writing() &#123; this.log(\"cool feature\", this.answers.cool); // user answer `cool` used &#125;&#125;; store: true 记住先前的输入作为新的默认输入。 Sub Generator用来生成特定文件的 generator 特性 使用 Yeoman 的步骤总结 明确需求 找到合适的 Generator（ https://yeoman.io/ ） 全局安装对应的 Generator 通过 Yo 运行对应的 Generator 填写选项 生成项目结构 4. Plop一个小而美的脚手架工具 使用 Plop 的步骤总结 将 plop 模块作为项目开发依赖安装 在项目根目录下创建一个 plopfile.js 文件 在 plopfile.js 文件中定义脚手架任务 编写用于生成特定类型文件的模板 通过 Plop 提供的 CLI 运行脚手架任务 5. 自定义脚手架package.json 中定义 bin 字段为启动目录，其开头为： 1#!&#x2F;usr&#x2F;bin&#x2F;env node","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"脚手架","slug":"脚手架","permalink":"http://wzw1016.ml/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"}]},{"title":"前端工程化概述","slug":"前端工程化概述","date":"2020-09-06T14:27:53.000Z","updated":"2021-03-02T14:39:03.652Z","comments":true,"path":"2020/09/06/前端工程化概述/","link":"","permalink":"http://wzw1016.ml/2020/09/06/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E6%A6%82%E8%BF%B0/","excerpt":"最近在学习前端工程化相关的内容。本文从前端工程化的原因、表现开始，对前端工程化进行整体的描述，以加深自身对前端工程化的意义的体会。","text":"最近在学习前端工程化相关的内容。本文从前端工程化的原因、表现开始，对前端工程化进行整体的描述，以加深自身对前端工程化的意义的体会。 1. 进行前端工程化的原因解决当下面临的问题，如： 传统语言或语法的弊端 无法使用模块化 / 组件化 重复的机械式工作 代码风格的统一、质量的保证 依赖后端服务接口支持 整体依赖后端项目 2. 工程化的表现一切以提高效率、降低成本、保证质量为目的的手段都属于工程化 从 创建项目 =&gt; 编码 =&gt; 预览 / 测试 =&gt; 提交 =&gt; 部署，一切都应该被自动化 创建项目：创建项目结构；创建特定类型文件 编码：格式化代码；代码风格校验；编译/构建/打包 预览 / 测试：Web Server；Live Reloading；HMR；Mock；Source Map 提交：Git Hooks；Lint-staged；持续集成 部署：CI/CD；自动发布 3. 工程化不等于工具像 create-react-app、vue-cli、angular-cli、gatsby-cli 此类工具，其实是特定类型的项目，官方给出的 集成式工程化方案。 4. Node.js 驱动了前端工程化的进步Node.js 是前端工程化的基础，前端工程化的很多工具，都是基于 Node.js 开发的","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}]},{"title":"JavaScript粗略实现散列表","slug":"JavaScript粗略实现散列表","date":"2020-08-06T08:38:41.000Z","updated":"2021-03-02T14:24:25.339Z","comments":true,"path":"2020/08/06/JavaScript粗略实现散列表/","link":"","permalink":"http://wzw1016.ml/2020/08/06/JavaScript%E7%B2%97%E7%95%A5%E5%AE%9E%E7%8E%B0%E6%95%A3%E5%88%97%E8%A1%A8/","excerpt":"使用 JavaScript 的数组（Array）结构简单地实现一个采用链地址法处理冲突（碰撞）的散列表（hashTable，或称为哈希表）。 利用霍纳法则（秦九韶算法）将计算 hashCode 的时间复杂度由O(N^2)降低到O(N)。 并当装填因子（loadFactory，散列表内元素个数 / 散列表容量）大于0.75时，进行扩容；当装填因子小于0.25时，进行减容。并使其容量恒为质数，以减少散列化后造成的的冲突。","text":"使用 JavaScript 的数组（Array）结构简单地实现一个采用链地址法处理冲突（碰撞）的散列表（hashTable，或称为哈希表）。 利用霍纳法则（秦九韶算法）将计算 hashCode 的时间复杂度由O(N^2)降低到O(N)。 并当装填因子（loadFactory，散列表内元素个数 / 散列表容量）大于0.75时，进行扩容；当装填因子小于0.25时，进行减容。并使其容量恒为质数，以减少散列化后造成的的冲突。 其结构如下： 1[[[key, value], [key, value]...], [[key, value], [key, value]...]... ] 使用图表示其结构： 实现代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136(function() &#123; function HashTable () &#123; this.storage = [] this.count = 0 this.limit = 7 // 对传入标识进行散列化的函数 HashTable.prototype.hashFunction = function (key, size) &#123; let hashCode = 0 //利用霍纳法则（秦九韶算法）将计算hashCode的时间复杂度由O(N^2)降低到O(N) for (let index = 0; index &lt; key.length; index++) &#123; hashCode = 37 * hashCode + key.charCodeAt(index) &#125; const index = hashCode % size return index &#125; // 新增 / 修改 HashTable.prototype.put = function (key, value) &#123; const index = this.hashFunction(key, this.limit) let bucket = this.storage[index] if (!bucket) bucket = this.storage[index] = [] // 修改 for (let index = 0; index &lt; bucket.length; index++) &#123; const tuple = bucket[index] if (tuple[0] === key) &#123; tuple[1] = value return true &#125; &#125; // 新增 this.storage[index].push([key, value]) this.count += 1 // 判断 是否需要执行扩容操作，扩容后的散列表容量仍为质数（当loadFactor大于0.75时） if ((this.count / this.limit) * 100 &gt; 75) &#123; this.limit = this.getPrime(this.limit * 2 + 1) this.resize(this.limit) &#125; return true &#125; // 查询 HashTable.prototype.get = function(key) &#123; const index = this.hashFunction(key, this.limit) const bucket = this.storage[index] if (!bucket) return null for (let index = 0; index &lt; bucket.length; index++) &#123; const tuple = bucket[index] if (tuple[0] === key) &#123; return tuple[1] &#125; &#125; return null &#125; // 删除 HashTable.prototype.remove = function(key) &#123; const index = this.hashFunction(key, this.limit) const bucket = this.storage[index] if (!bucket) return null for (let index = 0; index &lt; bucket.length; index++) &#123; const tuple = bucket[index] if (tuple[0] === key) &#123; const value = tuple[1] bucket.splice(index, 1) this.count -= 1 if (bucket.length === 0) &#123; this.storage[index] = null &#125; // 判断 是否需要执行减容操作，减容后的散列表容量仍为质数（当loadFactor小于0.25时） if (this.limit &gt; 7 &amp;&amp; (this.count / this.limit) * 100 &lt; 25) &#123; this.limit = this.getPrime(Math.floor(this.limit / 2)) this.resize(this.limit) &#125; return value &#125; &#125; return null &#125; HashTable.prototype.isEmpty = function() &#123; return this.count === 0 &#125; HashTable.prototype.size = function() &#123; return this.count &#125; HashTable.prototype.resize = function(newLimit) &#123; const oldStorage = this.storage // 重置散列表 this.storage = [] this.count = 0 this.limit = newLimit // 将原来的数据以新的映射关系put到新的散列表中 for (let index = 0; index &lt; oldStorage.length; index++) &#123; const oldBucket = oldStorage[index] if (!oldBucket) continue for (let i = 0; i &lt; oldBucket.length; i++) &#123; const oldTuple = oldBucket[i] this.put(oldTuple[0], oldTuple[1]) &#125; &#125; &#125; // 判断传入数字是否是质数的辅助方法 HashTable.prototype.isPrime = function(num) &#123; if (num &lt;= 1) return false for (let index = 2; index &lt; Math.floor(Math.sqrt(num)); index++) &#123; if (num % index === 0) return false &#125; return true &#125; // 获取第一个大于所传入数字的质数的辅助方法 HashTable.prototype.getPrime = function(num) &#123; while(!this.isPrime(num)) &#123; num += 1 &#125; return num &#125; &#125; window.HashTable = HashTable&#125;)(window) 完！","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://wzw1016.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://wzw1016.ml/tags/Javascript/"},{"name":"数据结构","slug":"数据结构","permalink":"http://wzw1016.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"hashTable","slug":"hashTable","permalink":"http://wzw1016.ml/tags/hashTable/"}]},{"title":"hexo deploy后Github Pages自定义域名失效","slug":"hexo deploy后Github Pages自定义域名失效","date":"2020-07-05T17:37:17.000Z","updated":"2020-07-05T17:48:25.119Z","comments":true,"path":"2020/07/06/hexo deploy后Github Pages自定义域名失效/","link":"","permalink":"http://wzw1016.ml/2020/07/06/hexo%20deploy%E5%90%8EGithub%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/","excerpt":"","text":"有一个小问题，每次写完博客 hexo d 部署到 Github Pages 后，进到自己的网站一看 404。 解决方法很简单： 在 hexo 博客根目录的 source 文件夹下新建一个文件名为 CNAME 的无格式后缀文件，内容为你的 Github Pages 自定义域名。","categories":[{"name":"blog","slug":"blog","permalink":"http://wzw1016.ml/categories/blog/"}],"tags":[{"name":"git","slug":"git","permalink":"http://wzw1016.ml/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://wzw1016.ml/tags/hexo/"}]},{"title":"webpack HMR（热模块替换）","slug":"webpack HMR（热模块替换）","date":"2020-07-05T13:00:34.000Z","updated":"2021-03-02T14:30:00.095Z","comments":true,"path":"2020/07/05/webpack HMR（热模块替换）/","link":"","permalink":"http://wzw1016.ml/2020/07/05/webpack%20HMR%EF%BC%88%E7%83%AD%E6%A8%A1%E5%9D%97%E6%9B%BF%E6%8D%A2%EF%BC%89/","excerpt":"之前入门时，也是学习过 glup、grunt 和 webpack，但由于平时一般都是在脚手架环境下进行开发，记的越来越模糊了。打算再次系统的学习一次 webpack。至于另外二者，那就需要时再说。 HMR 是 hot module replacement 的缩写，也就是热模块替换，或者叫模块热替换。","text":"之前入门时，也是学习过 glup、grunt 和 webpack，但由于平时一般都是在脚手架环境下进行开发，记的越来越模糊了。打算再次系统的学习一次 webpack。至于另外二者，那就需要时再说。 HMR 是 hot module replacement 的缩写，也就是热模块替换，或者叫模块热替换。 它的作用就是：当项目中的一个模块发生改变时，只会重新打包这一个模块。 这样，当项目中拥有很多模块时，如果修改了一个模块，webpack 只会重新打包这一个模块，而不是将全部模块重新打包。这样可以很大提升项目开发时的构建速度。 开启方式很简单，由于devServer 内部支持 HMR 功能，所以只需要在 webpack 的 devServer 配置中新增 hot: true 选项即可，如下： 123456789101112module.exports = &#123; ... devServer: &#123; contentBase: 'build', compress: true, port: 3000, open: true, // 开启HMR hot: true &#125; ...&#125; 这一步完成，就可以实现样式文件的热模块替换了（因为 style-loader 已经内部实现了 HMR） 那 html 文件和 js 文件该如何实现呢？ 答案是： html 文件不需要实现热模块替换，因为 html 文件只有一个，当发生改变时一定会重新打包，因此无需处理，也没有办法处理； 而且，当开启了 HMR 时，还会有一个问题：修改了 html，webpack 不会重新打包。只需要将 entry 入口改为一个数组，同时将 html 的相对路径添加到数组中。如下： 12345module.exports = &#123; ... entry: ['./src/js/index.js', './src/index.html'] ...&#125; 还有 js 文件，假设有一个 print.js 模块，向外暴露函数对象 print。 若需要为其实现热模块替换，则需在入口文件中新增如下代码： 123456789...// 判断HMR是否开启if (module.hot) &#123; // 监听print.js文件的变化，一旦其发生变化，不会重新打包，而是执行后续的回调函数 module.hot.accept('./print.js', () =&gt; &#123; print() &#125;)&#125;... HMR 对 js 文件的处理，只能处理非入口文件的 js 文件，因为一旦入口文件发生变化，各模块就会重新引入处理打包，这也是合情合理的。 一些原因，很久没有写博客了，以后一定抽时间多进行输出！","categories":[{"name":"前端工程化","slug":"前端工程化","permalink":"http://wzw1016.ml/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"}],"tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://wzw1016.ml/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"webpack","slug":"webpack","permalink":"http://wzw1016.ml/tags/webpack/"}]},{"title":"对JavaScript再次审视的总结","slug":"对JavaScript再次审视的总结","date":"2020-05-21T04:45:21.000Z","updated":"2020-05-23T10:42:13.498Z","comments":true,"path":"2020/05/21/对JavaScript再次审视的总结/","link":"","permalink":"http://wzw1016.ml/2020/05/21/%E5%AF%B9JavaScript%E5%86%8D%E6%AC%A1%E5%AE%A1%E8%A7%86%E7%9A%84%E6%80%BB%E7%BB%93/","excerpt":"此文没有什么长篇大论，仅仅是个人再次深入学习 JavaScript 的记录，以及遗忘知识点的回顾。","text":"此文没有什么长篇大论，仅仅是个人再次深入学习 JavaScript 的记录，以及遗忘知识点的回顾。 翻阅 ECMAScript Specification，解决了我很长时间的一个疑惑。Object.prototype 是浏览器基于 spec 而创建的一个 built-in 的对象。 对此，很多人说的 “JavaScript 中所有函数的 prototype 属性值都是 Object 构造函数的实例对象” 这句话，是不完全正确的。 instanceof 运算符仅仅用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。 Object instanceof Function 为 true 是由于 Object.__proto__ === Function.prototype。而 Function instanceof Object 、Function instanceof Function、Object instanceof Object 也都可以用原型链证实。 因此 instanceof 无法判断 Function 和 Object 哪个是鸡哪个是蛋。 JavaScript 的作用域为词法作用域（即静态作用域）。函数的作用域在函数定义的时候就决定了。 JS 引擎在代码执行之前，会创建执行上下文环境，做出以下操作： 收集变量、函数以及函数的参数 arguments （如果是函数执行上下文的话）作为变量对象（Variable Object，VO）（在进入执行上下文阶段为 VO，在执行代码阶段变为AO。AO即 Activation Object）。 确认 this 的指向 创建作用域链 “收集变量、函数” 就是 “使用 var 声明的变量存在提升，即函数声明提升”的原因（切记是声明提升，就是只声明，并不赋值）。 函数声明提升的优先级高于变量声明提升的优先级，就像下方代码这样： 1234567console.log(foo)function foo() &#123; console.log('foo')&#125;var foo = 1 最后会输出foo 函数体。是因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明。如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。（这句话，如果用下方模拟的这个例子来解释的话，就是：在进入全局执行上下文阶段，由于函数声明提升的优先级比变量声明提升的优先级高，所以 foo 函数先声明，再 var foo 声明，没有任何卵用！） 如果模拟一下 JS 引擎实际的执行流程，那就是这样的： 123456function foo() &#123;&#125;var fooconsole.log(foo)foo = 1 关于闭包 从理论角度来说，JavaScript 中所有的函数都会产生闭包，这是因为：函数在创建的时候，就会将外层执行上下文中的作用域链保存当前执行上下文的作用域 [[Scopes]] 中。 从实践角度来说，闭包的产生实际就是：即使执行上下文中的变量对象已经销毁了，而变量仍可以使用。实际开发时有两种情况：①函数中引用了外部的变量；②外层函数将内层函数 return （实际开发意义很大） 理论角度的闭包就是理论而已，确实时这个理，实际开发中没啥卵用。 闭包就是为了延长变量对象的生命周期而已，并无其他深奥之处。 let 与 const 没有提升的原因是：使用 let 和 const 声明的变量， JavaScript 引擎在扫描代码发现变量声明时（也就是进入执行上下文时），将二者声明的变量放入临时性死区（ Temporal Dead Zone，TDZ ）。访问 TDZ 内的变量会报错。在执行代码时，将变量从 TDZ 内取出，这事方可访问。 Symbol 作为属性名时，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。可以使用Object.getOwnPropertySymbols 方法，获取指定对象的所有 Symbol 属性名。 如果希望使用同一个 Symbol 值，可以使用 Symbol.for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。就像下方这样： 1234var s1 = Symbol.for('foo');var s2 = Symbol.for('foo');console.log(s1 === s2); // true 以前一直搞不懂 Symbol 在实际开发中的用途，在 issue 中发现了解答，用途如下： 定义类的私有变量/方法 运用在单例模式中 以上，大部分取经自 冴羽的博客。 继承 原型链继承。即将子类的原型指向父类的实例，并校正子类原型的 constructor 属性。 借用构造函数继承（伪继承）。使用 call 或 apply 在子类中调用父类，将父类的 this 指向子类的 this。 组合继承。实际上就是 原型链继承 + 借用构造函数继承。 原型链继承的作用：实现真正的继承 借用构造函数继承的作用：当子类中有与父类相同的属性时，节省代码量","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[]},{"title":"mint-ui按需引入的问题","slug":"mint-ui按需引入的问题","date":"2020-05-07T08:40:06.000Z","updated":"2020-05-07T09:41:48.179Z","comments":true,"path":"2020/05/07/mint-ui按需引入的问题/","link":"","permalink":"http://wzw1016.ml/2020/05/07/mint-ui%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"按 Mint UI 官网中描述，实现按需打包的步骤如下： 安装开发依赖 babel-plugin-component 配置： 1234567891011&#123; \"presets\": [ [\"es2015\", &#123; \"modules\": false &#125;] ], \"plugins\": [[\"component\", [ &#123; \"libraryName\": \"mint-ui\", \"style\": true &#125; ]]]&#125;","text":"按 Mint UI 官网中描述，实现按需打包的步骤如下： 安装开发依赖 babel-plugin-component 配置： 1234567891011&#123; \"presets\": [ [\"es2015\", &#123; \"modules\": false &#125;] ], \"plugins\": [[\"component\", [ &#123; \"libraryName\": \"mint-ui\", \"style\": true &#125; ]]]&#125; 在项目中配置后，npm run serve 重新运行报错如下： 1ERROR Error: .plugins[0][1] must be an object, false, or undefined 就是说 plugins 索引为0的第一个元素 的 索引为1的第二个元素必须是个 object 或 false 或 undefined。 又回去官网瞅了瞅，发现官网说的是在 .babelrc 中配置。 所以官网应该是没有更新，说的还是二版本脚手架 vue-cli2 中的按需引入配置。 按照错误提示，将项目根路径下 babel.config.js （三版本脚手架 @vue/cli 的 babel 配置文件）中内容修改如下： 1234567891011121314module.exports = &#123; presets: [ '@vue/cli-plugin-babel/preset' ], \"plugins\": [ [ 'component', &#123; \"libraryName\": \"mint-ui\", \"style\": true &#125; ] ]&#125; 配置后重新运行即可。 完！","categories":[{"name":"Vue","slug":"Vue","permalink":"http://wzw1016.ml/categories/Vue/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://wzw1016.ml/tags/bug/"},{"name":"vue","slug":"vue","permalink":"http://wzw1016.ml/tags/vue/"},{"name":"babel","slug":"babel","permalink":"http://wzw1016.ml/tags/babel/"}]},{"title":"git clone后本地只有master分支的问题","slug":"gitclone后本地只有master分支","date":"2020-05-07T05:30:22.000Z","updated":"2020-05-07T06:20:39.453Z","comments":true,"path":"2020/05/07/gitclone后本地只有master分支/","link":"","permalink":"http://wzw1016.ml/2020/05/07/gitclone%E5%90%8E%E6%9C%AC%E5%9C%B0%E5%8F%AA%E6%9C%89master%E5%88%86%E6%94%AF/","excerpt":"举个例子： 在公司上班时是在 dev 分支进行开发并提交到 dev 分支，回家后想要接着进行开发。 git clone 后进行 git branch 查看本地分支，只有 master 分支；而 git branch -a 查看远程分支，所有分支都在。如下：","text":"举个例子： 在公司上班时是在 dev 分支进行开发并提交到 dev 分支，回家后想要接着进行开发。 git clone 后进行 git branch 查看本地分支，只有 master 分支；而 git branch -a 查看远程分支，所有分支都在。如下： 两个命令，都可以追溯远程分支： 命令一： 1git checkout -b mybranch origin&#x2F;abranch 此命令可以追溯远程分支的同时自定义本地分支名称，其余与下方命令无区别 命令二： 1git checkout --track origin&#x2F;branch 完！","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://wzw1016.ml/tags/git/"}]},{"title":"vee-validate3.3.0的使用","slug":"vee-validate 3.3.0的使用","date":"2020-05-06T02:15:17.000Z","updated":"2020-05-06T05:57:14.908Z","comments":true,"path":"2020/05/06/vee-validate 3.3.0的使用/","link":"","permalink":"http://wzw1016.ml/2020/05/06/vee-validate%203.3.0%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"在 vue 项目中用到 vee-validate 进行表单验证时，用之前版本的语法一直报错，发现 vee-validate 已经升级到 3.3.0 版本。只有英文文档，而且个人感觉写的也不是很好。总结一下，以免再次踩坑。 新版本本人也是边学边用，如有纰漏，欢迎指正。","text":"在 vue 项目中用到 vee-validate 进行表单验证时，用之前版本的语法一直报错，发现 vee-validate 已经升级到 3.3.0 版本。只有英文文档，而且个人感觉写的也不是很好。总结一下，以免再次踩坑。 新版本本人也是边学边用，如有纰漏，欢迎指正。 流程 安装 编写 validate.js 并引入 在模板中使用验证规则 安装使用 npm 或者 yarn 安装（包名 vee-validate），也可 CDN 引入，不再赘述，详见官网 Installation。 validate.js在项目中创建 validate.js 文件。内容如下： 123456789101112131415161718192021import Vue from 'vue'import &#123;extend, ValidationProvider, ValidationObserver, localize&#125; from 'vee-validate'import zh_CN from 'vee-validate/dist/locale/zh_CN.json'import &#123;required&#125; from 'vee-validate/dist/rules'Vue.component('ValidationProvider', ValidationProvider)Vue.component('ValidationObserver', ValidationObserver)localize('zh_CN', zh_CN)extend('required', &#123; ...required&#125;)extend('phoneNumber', &#123; validate: value =&gt; /^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/.test(value), message: filed =&gt; '请输入正确的' + filed&#125;)extend('SMSVerficationCode', &#123; validate: value =&gt; /^\\d&#123;6&#125;$/.test(value), message: filed =&gt; '请输入正确的' + filed&#125;) 需在入口文件 main.js 中引入。 1import './common/utils/validator' 拆解1import &#123;extend, ValidationProvider, ValidationObserver, localize&#125; from 'vee-validate' extend ：扩展验证规则的函数。 ValidationProvider ：vee-validate 最核心组件对象，用来包裹需要规则验证的 input 进行实时验证。 ValidationObserver ：使用它可以在提交时进行表单的统一验证。 localize ：进行错误提示本地化的函数。 vee-validate 向外暴露的不止这四个对象，还有 normalizeRules、configure 等，我这里没有用到，暂不讨论。 1import zh_CN from 'vee-validate/dist/locale/zh_CN.json' 引入中文语言包。 1import &#123;required&#125; from 'vee-validate/dist/rules' 引入内置验证规则 required。 vee-validate 提供了一些通用的验证规则供使用，详见Rules。可以引入你所需要的，也可以全部引入，就像这样： 1import * as rules from 'vee-validate/dist/rules' 声明使用内置的验证规则： 123Object.keys(rules).forEach(rule =&gt; &#123; extend(rule, rules[rule])&#125;) 12Vue.component('ValidationProvider', ValidationProvider)Vue.component('ValidationObserver', ValidationObserver) 全局注册 ValidationProvider 组件与 ValidationObserver 组件。 1localize('zh_CN', zh_CN) 使用中文提示。 123extend('ruleName', &#123; // options&#125;) 为了保持包的小巧，vee-validate 默认没有安装任何验证规则。可以使用 extend 函数来自定义验证规则。 函数的第一个参数为验证规则名，第二个参数为验证规则的配置。这里只是 extend 函数的语法之一，其他语法请见Adding Rules。 在模板中使用验证规则实时验证（单独验证）相较于 2.x 版本的 vee-validate，3.x 版本的最大变动就是通过使用 ValidationProvider 组件包裹 input，替代直接添加在 input 上的 v-validate 指令。 ValidationProvider 利用 v-slot （插槽）为模板提供错误信息。 2.x版本语法： 12&lt;input v-model=\"email\" name=\"myemail\" v-validate=\"'required|email'\"&gt;&lt;span calss=\"error\" v-show=\"errors.has('myemail')\"&gt;&#123;&#123;errors.first('myemail')&#125;&#125;&lt;/span&gt; 3.x版本语法： 1234&lt;ValidationProvider name=\"手机号码\" rules=\"required|phoneNumber\" v-slot=\"&#123;errors&#125;\"&gt; &lt;input type=\"tel\" maxlength=\"11\" placeholder=\"手机号\" v-model=\"phoneNumber\"&gt; &lt;span class=\"error\"&gt;&#123;&#123;errors[0]&#125;&#125;&lt;/span&gt;&lt;/ValidationProvider&gt; 参数 rules 的值为 validate.js 中定义的验证规则名的字符串。 如有多个验证规则，用 | 隔开。或者可以采用 规则的对象语法（Rules Object Expression），就像这样： 1234&lt;ValidationProvider name=\"手机号码\" :rules=\"&#123;required: true, phoneNumber: true&#125;\" v-slot=\"&#123;errors&#125;\"&gt; &lt;input type=\"tel\" maxlength=\"11\" placeholder=\"手机号\" v-model=\"phoneNumber\"&gt; &lt;span class=\"error\"&gt;&#123;&#123;errors[0]&#125;&#125;&lt;/span&gt;&lt;/ValidationProvider&gt; 统一验证3.x 版本提交表单时的统一验证证相比之前也有了很大的变动。 举个例子。 这是 2.x 版本的： 1234567891011121314151617181920212223&lt;template&gt; &lt;form&gt; &lt;input v-model=\"username\" name=\"username\" v-validate=\"'required|username'\" placeholder=\"用户名\"&gt; &lt;span calss=\"error\" v-show=\"errors.has('username')\"&gt;&#123;&#123;errors.first('username')&#125;&#125;&lt;/span&gt; &lt;input v-model=\"password\" name=\"password\" v-validate=\"'required|password'\" placeholder=\"密码\"&gt; &lt;span calss=\"error\" v-show=\"errors.has('password')\"&gt;&#123;&#123;errors.first('password')&#125;&#125;&lt;/span&gt; &lt;button @click.prevent=\"validateBeforeSubmit\"&gt;Submit&lt;/button&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; validateBeforeSubmit() &#123; this.$validator.validate().then(success =&gt; &#123; // Do something! &#125;) &#125; &#125;&#125;&lt;/script&gt; 3.x 版本需要这样： 123456789101112131415161718192021222324252627&lt;template&gt; &lt;ValidationObserver v-slot=\"&#123; handleSubmit &#125;\"&gt; &lt;form&gt; &lt;ValidationProvider v-slot=\"&#123;errors&#125;\"&gt; &lt;input type=\"text\" name=\"username\" rules=\"required|username\" placeholder=\"用户名\" /&gt; &lt;span calss=\"error\"&gt;&#123;&#123;errors[0]&#125;&#125;&lt;/span&gt; &lt;/ValidationProvider&gt; &lt;ValidationProvider v-slot=\"&#123;errors&#125;\"&gt; &lt;input type=\"password\" name=\"password\" rules=\"required|password\" placeholder=\"密码\" /&gt; &lt;span calss=\"error\"&gt;&#123;&#123;errors[0]&#125;&#125;&lt;/span&gt; &lt;/ValidationProvider&gt; &lt;button @click.prevent=\"handleSubmit(submit)\"&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/ValidationObserver&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; submit() &#123; // Only executes when validation passes! &#125; &#125;&#125;;&lt;/script&gt; ValidationObserver 通过 v-slot 提供了一个函数 handleSubmit 用来进行表单的统一验证，handleSubmit接收一个函数参数，这个函数只有当提交的表单合法时，才会调用。 上方代码中，当点击 Submit进行表单提交时，只有当输入的 username 与 password 都符合验证规则时，才会执行函数 submit。 参考 VeeValidate","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wzw1016.ml/tags/vue/"}]},{"title":"函数声明与函数表达式","slug":"函数声明与函数表达式","date":"2020-05-02T05:57:37.000Z","updated":"2020-05-16T08:21:07.450Z","comments":true,"path":"2020/05/02/函数声明与函数表达式/","link":"","permalink":"http://wzw1016.ml/2020/05/02/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"函数声明与函数表达式是 JavaScript 中创建函数最常见的两种方式。此文记录本人对其二者的理解。","text":"函数声明与函数表达式是 JavaScript 中创建函数最常见的两种方式。此文记录本人对其二者的理解。 函数声明（Function Declaration）语法123function name([param,[, param,[..., param]]]) &#123; [statements]&#125; 使用函数声明的函数定义为一条完整的语句。 特点 有提升，可以在函数声明之前被调用（原因：js 引擎会在代码执行之前创建执行上下文环境，将函数声明保存到执行上下文对象中）。 就像这样： 12345fn1(1, 2) // 3function fn1(a, b) &#123; console.log(a + b)&#125; 开发中应尽量避免使用函数提升。 函数表达式（Function Expression）语法123let function_expression = function [name]([param1[, param2[, ..., paramN]]]) &#123; [statements]&#125; 函数表达式其与函数声明十分相似，二者最主要区别是函数名称。函数表达式中的函数名称可以省略，从而创建匿名函数。 使用没有函数名函数表达式的函数定义，本身不是一个完整的语句，不能单独存在，只能与其他语句配合成为一条完整的语句。 匿名函数表达式使用的多种方式赋值/保存给一个变量12345let fn2 = function (a, b) &#123; console.log(a * b)&#125;fn2(1, 2) // 2 作为另一个函数的实参（配合高阶函数）123setTimeout(function () &#123; console.log('延迟执行的函数表达式')&#125;, 1000) 该方式本质上也是将函数表达式保存为一个变量，内部会将定义的匿名函数赋值给内部定义的实参。 作为另一个函数的返回值（配合高阶函数）1234567function fn3(a) &#123; return function (b) &#123; console.log(a + b) &#125;&#125;fn3(1)(2) // 3 同样，该方式本质上也是将函数表达式保存为一个变量。 立即执行（IIFE实现模块化）123(function (a, b) &#123; console.log(a + b)&#125;)(1, 2) // 3 命名函数表达式当函数表达式不省略函数名时，可以在该函数内部（并且只能在该函数内部）使用该函数名访问该函数，该函数名作为的变量保存的值只读不可修改。 可以借助命名函数表达式代替 ECMAScript 不推荐使用的 arguments.callee，如下： 12345678let fn4 = function fn5() &#123; console.log(fn5) console.log(fn5 === fn4) fn5 = 1 console.log(fn5)&#125;fn4() 执行输出如下： 图：命名函数表达式执行 ### 命名函数表达式的应用 例需求：使用演示定时器模拟实现循环定时器。 实现： 1234setTimeout(function callback() &#123; console.log('action') setTimeout(callback, 1000)&#125;, 1000) 此时，可以实现控制台中每隔一秒输出一次 action。 这里只是举个例子，不推荐实际开发中这样使用，毕竟浏览器栈空间有限，这样很可能会造成栈溢出报错。 函数表达式的提升不同于函数声明语句，函数表达式没有提升，无法在使用函数表达式的函数定义之前调用，如果调用会报错。 12345fn6(1, 2) // Uncaught ReferenceError: fn6 is not definedlet fn6 = function (a, b) &#123; console.log(a - b)&#125; 总结函数声明与函数表达式其实都没什么难点，只是要注意匿名函数表达式的延申。 参考文章 MDN - 函数声明 MDN - 函数表达式","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[{"name":"Function","slug":"Function","permalink":"http://wzw1016.ml/tags/Function/"}]},{"title":"hexo报错TypeError [ERR_INVALID_URL]\":\" Invalid URL\":\"","slug":"hexo报错TypeError [ERR_INVALID_URL] Invalid URL","date":"2020-04-25T08:25:45.000Z","updated":"2020-04-25T09:08:35.101Z","comments":true,"path":"2020/04/25/hexo报错TypeError [ERR_INVALID_URL] Invalid URL/","link":"","permalink":"http://wzw1016.ml/2020/04/25/hexo%E6%8A%A5%E9%94%99TypeError%20[ERR_INVALID_URL]%20Invalid%20URL/","excerpt":"在写完上一篇，进行 hexo g 时报错： TypeError [ERR_INVALID_URL]: Invalid URL: http://localhost:8080&amp;#39; 具体如下图：","text":"在写完上一篇，进行 hexo g 时报错： TypeError [ERR_INVALID_URL]: Invalid URL: http://localhost:8080&amp;#39; 具体如下图： 问题 图：hexo报错TypeError [ERR_INVALID_URL]: Invalid URL: 解决办法更改文章中此格式的链接： 1&#39;http:&#x2F;&#x2F;localhost:8080&#39; 更改为： 1\\&#39;&lt;http:&#x2F;&#x2F;localhost:8080&gt;\\&#39; 使用反斜杠对单引号进行转义。 使用尖括号包裹链接（markdown 语法）。 个人猜测应该是 hexo 某插件对文章内链接的解析存在问题，这里就不深究！ 完！","categories":[{"name":"blog","slug":"blog","permalink":"http://wzw1016.ml/categories/blog/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://wzw1016.ml/tags/bug/"},{"name":"hexo","slug":"hexo","permalink":"http://wzw1016.ml/tags/hexo/"}]},{"title":"vue脚手架中使用开发环境代理","slug":"vue脚手架中使用开发环境代理","date":"2020-04-25T04:55:21.000Z","updated":"2020-04-25T08:33:46.692Z","comments":true,"path":"2020/04/25/vue脚手架中使用开发环境代理/","link":"","permalink":"http://wzw1016.ml/2020/04/25/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BB%A3%E7%90%86/","excerpt":"在 vue-cli 和 @vue/cli 中使用开发环境代理解决跨域（ cross-origin ）问题。 Access to XMLHttpRequest at &#39;http://localhost:2000/index_category&#39; from origin &#39;http://localhost:8080&#39; has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.","text":"在 vue-cli 和 @vue/cli 中使用开发环境代理解决跨域（ cross-origin ）问题。 Access to XMLHttpRequest at &#39;http://localhost:2000/index_category&#39; from origin &#39;http://localhost:8080&#39; has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. vue-cli 中（二版本脚手架）配置项目根目录下 config 文件夹中文件 index.js 的 dev.proxyTable 选项： 12345678910111213141516171819module.exports = &#123; dev: &#123; ... proxyTable: &#123; '/api': &#123; target: 'http://www.example.org', // target host changeOrigin: true, // needed for virtual hosted sites pathRewrite: &#123; '^/api/old-path': '/api/new-path', // rewrite path '^/api/remove/path': '/path', // remove base path &#125; &#125;, ... // 其他代理路径 &#125;, ... &#125;, ...&#125; 接着在需要使用代理转发的接口请求函数中将指定的名称（上方示例中是 &#39;/api&#39;）拼串到对应的 URL 前，重启项目即可。 @vue-cli 中（三版本脚手架）配置项目根目录下 vue.config.js 中的 devServer.proxy 选项： 12345678module.exports = &#123; ... // 配置开发代理服务器 devServer: &#123; proxy: 'http://www.example.org', // target host &#125;, ...&#125; 这种对策适用于只有一个后台时，当不同请求需要通过代理转发到不同的服务器时，可以采用下方的配置： 12345678910111213141516171819202122232425module.exports = &#123; ... // 配置开发代理服务器 devServer: &#123; proxy: &#123; '/api': &#123; target: 'http://www.example.org', // target host changeOrigin: true, // needed for virtual hosted sites pathRewrite: &#123; '^/api/old-path': '/api/new-path', // rewrite path '^/api/remove/path': '/path', // remove base path &#125; &#125;, '/foo': &#123; target: '&lt;other_url&gt;', pathRewrite: &#123; '^/api/old-path': '/api/new-path', // rewrite path '^/api/remove/path': '/path', // remove base path &#125; &#125; ... &#125; &#125;, ...&#125; 与 vue-cli 中的用法大同小异。 参考 devServer.proxy http-proxy-middleware","categories":[{"name":"Vue","slug":"Vue","permalink":"http://wzw1016.ml/categories/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://wzw1016.ml/tags/vue/"}]},{"title":"模拟JS中的new运算符","slug":"模拟JS中的new运算符","date":"2020-04-11T06:34:40.000Z","updated":"2020-04-11T10:47:58.986Z","comments":true,"path":"2020/04/11/模拟JS中的new运算符/","link":"","permalink":"http://wzw1016.ml/2020/04/11/%E6%A8%A1%E6%8B%9FJS%E4%B8%AD%E7%9A%84new%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"模拟 JavaScript 中使用 new 关键字配合构造函数创建实例对象。其基本思想如下： 创建一个新的空对象（{}）。 给新创建的对象添加 __proto__ 属性，属性值为构造函数的 prototype 属性值。 将构造函数的作用域赋值给新创建的对象（此时 this 就指向了新创建的对象）。 执行构造函数中的代码（为新创建的对象添加属性） 判断构造函数的返回值类型，返回新的对象。","text":"模拟 JavaScript 中使用 new 关键字配合构造函数创建实例对象。其基本思想如下： 创建一个新的空对象（{}）。 给新创建的对象添加 __proto__ 属性，属性值为构造函数的 prototype 属性值。 将构造函数的作用域赋值给新创建的对象（此时 this 就指向了新创建的对象）。 执行构造函数中的代码（为新创建的对象添加属性） 判断构造函数的返回值类型，返回新的对象。 模拟实现创建一个名为 newInstance 的函数，接收的第一个参数为构造函数，剩余参数为构造函数指定的实参。 其返回值为其第一个构造函数参数的实例对象。 newInstance(constructor[, argument1, argument2, argument3, ……]) 具体代码如下： 12345678910111213function newInstance(constructor, ...args) &#123; // 创建一个新的空对象 const instance = &#123;&#125; // 给新创建的对象添加 __proto__ 属性，属性值为构造函数的 prototype 属性值 instance.__proto__ = constructor.prototype // 将构造函数中的 this 指向新创建的对象，并执行构造函数 const result = constructor.apply(instance, args) // 如果构造函数的返回值为对象类型，函数的返回值就是构造函数的返回值 // 如果构造函数的返回值为其他基本类型，函数的返回值为构造函数内部新创建的对象 return result instanceof Object ? result : instance&#125; 参考 《JavaScript 高级程序设计（第3版）》 MDN - new 运算符","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[]},{"title":"vue.esm.js与vue.runtime.esm.js的差异","slug":"vue.esm.js与vue.runtime.esm.js的差异","date":"2020-04-09T13:53:40.000Z","updated":"2020-05-25T06:29:32.782Z","comments":true,"path":"2020/04/09/vue.esm.js与vue.runtime.esm.js的差异/","link":"","permalink":"http://wzw1016.ml/2020/04/09/vue.esm.js%E4%B8%8Evue.runtime.esm.js%E7%9A%84%E5%B7%AE%E5%BC%82/","excerpt":"在使用@vue/cli编译项目时，控制台报出如下错误： [Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.","text":"在使用@vue/cli编译项目时，控制台报出如下错误： [Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build. 翻译过来就是说：你正在使用的vue，是只包含运行时（runtime-only） 的构建版本，而不包含编译器（compiler）。要么将模板预编译进渲染（render）函数，要么使用包含编译器的构建版本。 此时入口文件 main.js 的代码如下： 1234567import Vue from 'vue'import App from './App'new Vue(&#123; components: &#123; App &#125;, template: '&lt;App /&gt;'&#125;).$mount('#app') vue的版本要想知道问题出现的原因，得先了解 vue 的各个版本： UMD CommonJS ES Module (基于构建工具使用) ES Module (直接用于浏览器) 完整版（Full） vue.js vue.common.js vue.esm.js vue.esm.browser.js 只包含运行时版（Runtime-only） vue.runtime.js vue.runtime.common.js vue.runtime.esm.js - 完整版 (生产环境) vue.min.js - - vue.esm.browser.min.js 只包含运行时版 (生产环境) vue.runtime.min.js - - - 表：vue各版本 ### 各版本解释 完整版：同时包含编译器和运行时的版本。 编译器：用来将模板编译成为 JavaScript 渲染函数的代码。 运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。 对比当需要在客户端进行编译模板 (比如传入一个字符串给 template 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)时，就像这样： 12345import App from './App'new Vue(&#123; component: &#123; App &#125;, template: '&lt;App /&gt;'&#125;).$mount('#app') 此时就需要使用完整版的 vue。 当使用 vue-loader 或 vueify 的时候，*.vue 文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可。就像这样： 1234import App from './App'new Vue(&#123; render: h =&gt; h(App)&#125;).$mount('#app') render 函数接收一个函数作为参数，用来创建虚拟DOM（VNode）。 因为运行时版本相比完整版体积要小大约 30%，所以应该尽可能使用运行时版本。 问题原因@vue/cli 默认使用的是不带编译器的 runtime-only 版（即 vue.runtime.esm.js），无法对模板进行预编译。 解决方案方案一：使用带编译器的 vue三版本的脚手架 @vue/cli 相较于二版本的脚手架 vue-cli ，最大的变化就是将配置文件隐藏，我们无法直接修改配置。 当需要修改配置时，可以在 @vue/cli 创建的项目根目录下，新建一个名为 vue.config.js 的配置文件。 1）、我们的目的是修改 webpack 的配置，将引入的 vue 变更为 vue.esm.js。参照 @vue/cli 的配置参考和 webpack的配置，在 vue.config.js 中新增一个名为 configureWebpack 的配置选项，具体如下： 1234567891011// vue.config.jsmodule.exports = &#123; // 选项... configureWebpack: &#123; // webpack的配置 resolve: &#123; alias: &#123; // 模块路径别名 'vue$': 'vue/dist/vue.esm.js' // $代表精确匹配 &#125; &#125; &#125;&#125; 或者： 在 vue.config.js 中新增一个名为 runtimeCompiler 的配置选项，具体如下： 12345// vue.config.jsmodule.exports = &#123; // 选项... runtimeCompiler: true,&#125; runtimeCompiler 的值决定是否使用包含运行时编译器的 vue 构建版本。 其默认值为 false，也就是 @vue/cli 默认使用的是不带编译器的 vue； 设置为 true 后，则使用带编译器的完整版 vue，就可以在 vue 组件中使用 template 选项了。 再者： 直接引入带编译器的完整版 vue： 1234567import Vue from 'vue/dist/vue.esm.js'import App from './App'new Vue(&#123; components: &#123; App &#125;, template: '&lt;App /&gt;'&#125;).$mount('#app') 不推荐使用这种方式。 三种方式本质一样，都是将 vue 的构架版本修改为带编译器的完整版（vue.esm.js） 前两种方式修改配置后，需重新运行项目。 方案二：使用渲染函数直接上代码，将 main.js 的代码修改如下： 123456import Vue from 'vue'import App from './App'new Vue(&#123; render: h =&gt; h(App)&#125;).$mount('#app') 使用渲染函数，会在项目构建时进行预编译。 参考 vue官方文档 - 对不同构建版本的解释 @vue/cli - 配置参考 webpack - 配置","categories":[{"name":"Vue","slug":"Vue","permalink":"http://wzw1016.ml/categories/Vue/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://wzw1016.ml/tags/bug/"},{"name":"vue","slug":"vue","permalink":"http://wzw1016.ml/tags/vue/"},{"name":"webpack","slug":"webpack","permalink":"http://wzw1016.ml/tags/webpack/"}]},{"title":"new Date().getTime()与Date.now()效率对比","slug":"new Date.getTime()与Date.now()效率小对比","date":"2020-04-05T09:54:56.000Z","updated":"2020-04-05T10:53:00.449Z","comments":true,"path":"2020/04/05/new Date.getTime()与Date.now()效率小对比/","link":"","permalink":"http://wzw1016.ml/2020/04/05/new%20Date.getTime()%E4%B8%8EDate.now()%E6%95%88%E7%8E%87%E5%B0%8F%E5%AF%B9%E6%AF%94/","excerpt":"看到好多人的文章里获取时间戳时，会用 new Date().getTime() 获取，而不是使用 Date.now()，难道是前者性能更好？于是做了一个简单的小测试对比一下。","text":"看到好多人的文章里获取时间戳时，会用 new Date().getTime() 获取，而不是使用 Date.now()，难道是前者性能更好？于是做了一个简单的小测试对比一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120;(function times1() &#123; console.time('执行new Date().getTime()1次，耗时') for (let index = 0; index &lt; 1; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()1次，耗时') console.time('执行Date.now()1次，耗时') for (let index = 0; index &lt; 1; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()1次，耗时') console.log('------------------------------------------')&#125;)();(function times10() &#123; console.time('执行new Date().getTime()10次，耗时') for (let index = 0; index &lt; 10; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()10次，耗时') console.time('执行Date.now()10次，耗时') for (let index = 0; index &lt; 10; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()10次，耗时') console.log('------------------------------------------')&#125;)();(function times100() &#123; console.time('执行new Date().getTime()100次，耗时') for (let index = 0; index &lt; 100; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()100次，耗时') console.time('执行Date.now()100次，耗时') for (let index = 0; index &lt; 100; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()100次，耗时') console.log('------------------------------------------')&#125;)();(function times1000() &#123; console.time('执行new Date().getTime()1000次，耗时') for (let index = 0; index &lt; 1000; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()1000次，耗时') console.time('执行Date.now()1000次，耗时') for (let index = 0; index &lt; 1000; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()1000次，耗时') console.log('------------------------------------------')&#125;)();(function times10000() &#123; console.time('执行new Date().getTime()10000次，耗时') for (let index = 0; index &lt; 10000; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()10000次，耗时') console.time('执行Date.now()10000次，耗时') for (let index = 0; index &lt; 10000; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()10000次，耗时') console.log('------------------------------------------')&#125;)();(function times100000() &#123; console.time('执行new Date().getTime()100000次，耗时') for (let index = 0; index &lt; 100000; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()100000次，耗时') console.time('执行Date.now()100000次，耗时') for (let index = 0; index &lt; 100000; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()100000次，耗时') console.log('------------------------------------------')&#125;)();(function times1000000() &#123; console.time('执行new Date().getTime()1000000次，耗时') for (let index = 0; index &lt; 1000000; index++) &#123; new Date().getTime() &#125; console.timeEnd('执行new Date().getTime()1000000次，耗时') console.time('执行Date.now()1000000次，耗时') for (let index = 0; index &lt; 1000000; index++) &#123; Date.now() &#125; console.timeEnd('执行Date.now()1000000次，耗时') console.log('------------------------------------------')&#125;)() 输出结果如下： new Date().getTime()与Date.now()效率多次对比 Date.now() 的性能明显比 new Date().getTime() 要高嘛，而且无论是单次调用还是多次调用，都是 Date.now() 较快。 奇怪，那为什么你们都用 new Date().getTime() 哇？（陷入全世界只有我一个人不知道的恐慌）。 此处存疑，欢迎指正！","categories":[],"tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://wzw1016.ml/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"小测试","slug":"小测试","permalink":"http://wzw1016.ml/tags/%E5%B0%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"你知道requestAnimationFrame()吗？","slug":"你知道requestAnimationFrame()吗？","date":"2020-04-05T03:06:35.000Z","updated":"2020-04-05T10:55:25.398Z","comments":true,"path":"2020/04/05/你知道requestAnimationFrame()吗？/","link":"","permalink":"http://wzw1016.ml/2020/04/05/%E4%BD%A0%E7%9F%A5%E9%81%93requestAnimationFrame()%E5%90%97%EF%BC%9F/","excerpt":"Web 应用中，实现动画效果的手段有很多。可以使用 CSS3 的 transition 和 animation 实现；可以使用 HTML5 中的 canvas 实现；也可以可以使用 Javascript 中的定时器进行实现。 除此之外，HTML5 为 Javascript 增加了一个新的 API，即 Window.requestAnimationFrame()，翻译成中文。这个方法会告诉浏览器：你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。","text":"Web 应用中，实现动画效果的手段有很多。可以使用 CSS3 的 transition 和 animation 实现；可以使用 HTML5 中的 canvas 实现；也可以可以使用 Javascript 中的定时器进行实现。 除此之外，HTML5 为 Javascript 增加了一个新的 API，即 Window.requestAnimationFrame()，翻译成中文。这个方法会告诉浏览器：你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。 为什么要使用 requestAnimationFrame()定时器实现动画的弊端很长时间以来，setTimeout() 和 setInterval() 都是 JavaScript 实现动画的最核心技术。就像下面这样： 123456789(function() &#123; function updateAnimations() &#123; doAnimation1() doAnimation2() // 其他动画... &#125; setInterval(updateAnimations, 100)&#125;)() 函数 updateAnimations 会每隔 100ms 调用一次，根据其内部代码对相应元素进行修改，进行页面的重绘（repaint）。 循环间隔的衡量使用这种方式实现动画循环，需要对间隔时间需要从两个方面进行考虑。第一，循环的间隔不能太长，这样才能保证动画效果显得平滑流畅；第二，循环的时间也不能太短，以确保浏览器能够完整的渲染动画。 现如今大多数电脑的刷新率都是 60HZ，也就是说，页面每秒最多只能进行60次重绘。大多数浏览器都会对重绘的操作进行限制，不超过显示器刷新的最大频率。因为即使超过，用户体验也不会有提升，反而可能会使动画抖动，也就是我们日常所说的“掉帧”。 因此，动画的最佳循环间隔是 1000ms/60，约等于 17ms。以这个循环间隔绘制的动画是最平滑流畅的，因为它接近浏览器的极限绘制速度。 在声明式编程时代，这样需要由开发者计算，而最佳方案却只有一个，无疑是不友好的。 定时器的精准问题由于 JavaScript 是单线程运行的，所以定时器的回调函数需要等待前面的任务全部执行完毕后，才能执行。因此，当前面任务的执行时间超过定时器所设置的时间间隔，就会导致定时器变得“并不准时”。如下代码所示： 123456789let start = Date.now()setTimeout(() =&gt; &#123; let end = Date.now() console.log(end - start)&#125;, 1000)for (let i = 0; i &lt; 30000; i++) &#123; console.log('主线程上的代码正在执行')&#125; 在 chrome 中运行，如所示： 定时器“不准时” 可以看到，定时器执行所用的时间并不与所设定的间隔时间吻合。 CSS 动画的优势在于浏览器知道动画什么时候开始，因此其可以明确每次执行动画重绘页面的间隔时间，其动画会更显顺滑。而受限于 JavaScript 的单线程特性，定时器实现的动画，无法保证每次动画执行的间隔时间完全相同。因此定时器实现的动画，可能会出现抖动、卡顿的现象。 requestAnimationFrame()JavaScript 动画受限于定时器的弊端，因此，requestAnimationFrame 应运而生。与定时器相比，其最大的优势在于其顺应浏览器的最大重绘频率（也就是显示器的刷新率）。它保证屏幕的每一次刷新间隔中，操作动画的函数只会执行一次。因此不会出现“丢帧”的情况。 此外，在大多数浏览器里，当 requestAnimationFrame() 运行在后台标签页或者隐藏的&lt;iframe&gt;里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命。 requestAnimationFrame()的使用语法 该方法需要传入一个回调函数作为参数，该回调函数会在浏览器的重绘之前执行。 window.requestAnimationFrame(callback) 被传入的回调函数会接收一个参数 DOMHighResTimeStamp， 该参数与 performance.now() 的返回值相同，用于标识 requestAnimationFrame() 开始去执行回调函数的时刻。 requestAnimationFrame() 的返回值为一个长整型的数值。 是回调列表中唯一的标识，与定时器的返回值类似。是个非零值，没别的意义。可以将之传给 window.cancelAnimationFrame() 以取消回调函数。 基本使用12345678910let element = document.getElementById('SomeElementYouWantToAnimate')let moveLength = 0function repeatMove() &#123; moveLength++ element.style.transform = `translateX($&#123;moveLength&#125;px)` requestAnimationFrame(repeatMove)&#125;repeatMove() 在动画函数内部调用 requestAnimationFrame，同时传入该动画函数。在执行动画函数时，页面重新绘制，此时 requestAnimationFrame 会调用传入的函数。有点像递归的感觉。 优雅降级requestAnimationFrame 的兼容性，可以参考 CanIUse。 requestAnimationFrame 在大多数主流浏览器中都可以使用，但少数低版本浏览器无法使用，因此需要向下兼容，在不兼容的浏览器中使用定时器模拟 requestAnimationFrame 。 以下代码摘自张鑫旭的个人博客参考 1234567891011121314151617181920212223242526(function() &#123; var lastTime = 0; var vendors = ['webkit', 'moz']; for(var x = 0; x &lt; vendors.length &amp;&amp; !window.requestAnimationFrame; ++x) &#123; window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']; window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || // Webkit中此取消方法的名字变了 window[vendors[x] + 'CancelRequestAnimationFrame']; &#125; if (!window.requestAnimationFrame) &#123; window.requestAnimationFrame = function(callback, element) &#123; var currTime = new Date().getTime(); var timeToCall = Math.max(0, 16.7 - (currTime - lastTime)); var id = window.setTimeout(function() &#123; callback(currTime + timeToCall); &#125;, timeToCall); lastTime = currTime + timeToCall; return id; &#125;; &#125; if (!window.cancelAnimationFrame) &#123; window.cancelAnimationFrame = function(id) &#123; clearTimeout(id); &#125;; &#125;&#125;()); 使用之后，就可以向下兼容到 IE6。 参考 JavaScript 高级程序设计（第3版） MDN - window.requestAnimationFrame JavaScrip标准参考教程（alpha），by 阮一峰 张鑫旭的个人博客 - CSS3动画那么强，requestAnimationFrame还有毛线用？","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://wzw1016.ml/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"函数节流与函数防抖","slug":"函数节流与函数防抖","date":"2020-04-04T14:05:31.000Z","updated":"2020-04-04T15:17:39.115Z","comments":true,"path":"2020/04/04/函数节流与函数防抖/","link":"","permalink":"http://wzw1016.ml/2020/04/04/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/","excerpt":"函数节流与函数防抖，实际上就是为了解决事件频繁被触发，而造成不必要的性能浪费的性能优化手段。例如，浏览器的 onresize 事件，鼠标的 mousemove 事件，如果其频繁触发，很可能会造成浏览器的卡顿；或者，如果向后台频繁发送请求，也会增大服务器的压力。这时，我们就可以使用函数节流或函数防抖进行优化。","text":"函数节流与函数防抖，实际上就是为了解决事件频繁被触发，而造成不必要的性能浪费的性能优化手段。例如，浏览器的 onresize 事件，鼠标的 mousemove 事件，如果其频繁触发，很可能会造成浏览器的卡顿；或者，如果向后台频繁发送请求，也会增大服务器的压力。这时，我们就可以使用函数节流或函数防抖进行优化。 函数节流（throttle） 概念：在设定的执行周期内，函数只会执行一次 实现代码12345678910function throttle(callback, delay) &#123; let start = 0 // start = 0 ，保证第一次current - start 一定大于间隔值 delay，从而保证第一次调用一定会执行 return function () &#123; const current = Date.now() if (current - start &gt; delay) &#123; callback.apply(this, arguments) // 1).使this与原事件处理函数中的this相同 2).传入原事件处理函数的参数 start = current &#125; &#125;&#125; 使用场景函数节流适合多次事件按时间做平均分配触发。 例如： 浏览器窗口调整（resize） 页面滚动（scroll） DOM 元素的拖拽（mousemove） 购物网站抢购（mousedown） 函数防抖（debounce） 概念： 在函数触发一段时间后再执行，如果在这段时间内再次触发，则重新计时。 实现代码123456789101112131415function debounce(callback, delay) &#123; let timeId return function () &#123; // 缓存arguments const args = arguments // 清除待执行的定时器任务 clearTimeout(timeId) // 每隔delay的时间，启动一个新的延时定时器，去准备调用callback timeId = setTimeout(() =&gt; &#123; callback.apply(this, args) // 1).使this与原事件处理函数中的this相同 2).传入原事件处理函数的参数 &#125;, delay) &#125;&#125; 使用场景适合多次事件一次响应的情况 例如： 实时搜索联想（keyup） 文本输入的验证（连续输入文字后发送 ajax 请求进行验证，验证一次就好） 判断scroll是否滑到底部（滚动事件+函数防抖） 函数节流与函数防抖的比较相同点 都是为了对函数的频繁触发进行优化 不同点 节流是让函数在每个时间段内只执行一次；而防抖是，规定时间段内的连续触发，只会执行最后一次。","categories":[],"tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://wzw1016.ml/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"Lodash","slug":"Lodash","permalink":"http://wzw1016.ml/tags/Lodash/"}]},{"title":"自定义实现数组的difference方法与merge方法","slug":"自定义实现数组的difference方法与merge方法","date":"2020-03-25T05:44:08.000Z","updated":"2020-04-04T14:26:22.412Z","comments":true,"path":"2020/03/25/自定义实现数组的difference方法与merge方法/","link":"","permalink":"http://wzw1016.ml/2020/03/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E7%9A%84difference%E6%96%B9%E6%B3%95%E4%B8%8Emerge%E6%96%B9%E6%B3%95/","excerpt":"difference(arr)作用得到一个当前数组中所有不与指定数组 arr 中元素相同的数组（改方法不会改变原数组）。 举个例子，假设数组有一个名为 difference 的方法，可以实现上述功能，那么： 12const array = [1, 2, 5, 8]console.log(array.difference([5, 7])) // (3) [1, 2, 5]","text":"difference(arr)作用得到一个当前数组中所有不与指定数组 arr 中元素相同的数组（改方法不会改变原数组）。 举个例子，假设数组有一个名为 difference 的方法，可以实现上述功能，那么： 12const array = [1, 2, 5, 8]console.log(array.difference([5, 7])) // (3) [1, 2, 5] 自定义实现123456Array.prototype.difference = function (arr) &#123; if (!arr || arr.length === 0) &#123; return [...this] &#125; return this.filter(item =&gt; arr.indexOf(item) === -1)&#125; 利用 filter() 与 indexOf() 对当前数组进行过滤，得到结果数组。 merge(arr)作用得到一个由当前数组与指定数组 arr 合并后组成的新的数组（改方法不会改变原数组）。 举个例子，假设数组有一个名为 merge 的方法，可以实现上述功能，那么： 12const array = [1, 2, 3]console.log(array.merge([2, 6])) // (5) [1, 2, 3, 6] 该方法与数组原生方法 concat 的不同之处在于，如果指定数组 arr 中的元素，在当前数组中已经存在，merge 方法则不会将该重复元素合并到当前数组中。而 concat 会进行合并。 自定义实现123456789101112Array.prototype.merge = function (arr) &#123; const resultArr = [...this] if (!arr || arr.length === 0) &#123; return resultArr &#125; arr.forEach(item =&gt; &#123; if (resultArr.indexOf(item) === -1) &#123; resultArr.push(item) &#125; &#125;) return resultArr&#125; 对指定的数组进行遍历，逐个判断是否需要塞入当前数组，从而得到结果数组。","categories":[],"tags":[{"name":"Lodash","slug":"Lodash","permalink":"http://wzw1016.ml/tags/Lodash/"},{"name":"Array","slug":"Array","permalink":"http://wzw1016.ml/tags/Array/"}]},{"title":"自定义实现Lodash中数组的chunk方法与compact方法","slug":"自定义实现Lodash中数组的chunk方法与compact方法","date":"2020-03-22T06:19:59.000Z","updated":"2020-04-04T14:26:06.796Z","comments":true,"path":"2020/03/22/自定义实现Lodash中数组的chunk方法与compact方法/","link":"","permalink":"http://wzw1016.ml/2020/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0Lodash%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84chunk%E6%96%B9%E6%B3%95%E4%B8%8Ecompact%E6%96%B9%E6%B3%95/","excerpt":"chunk(size)作用将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。 如果 array 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块。 举个例子，假设数组有一个名为 chunk 的方法，可以实现上述功能，那么： 1234let arr = [1, 2, 3, 4, 5, 6, 7]console.log(arr.chunk(2)) // [[1, 2], [3, 4], [5, 6], [7]]console.log(arr.chunk(3)) // [[1, 2, 3], [4, 5, 6], [7]] 参数 size 的默认值为 1。","text":"chunk(size)作用将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。 如果 array 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块。 举个例子，假设数组有一个名为 chunk 的方法，可以实现上述功能，那么： 1234let arr = [1, 2, 3, 4, 5, 6, 7]console.log(arr.chunk(2)) // [[1, 2], [3, 4], [5, 6], [7]]console.log(arr.chunk(3)) // [[1, 2, 3], [4, 5, 6], [7]] 参数 size 的默认值为 1。 自定义实现123456789101112131415161718192021Array.prototype.chunk = function (size) &#123; // size的默认值为1 size = size || 1 const length = this.length if (length === 0) return [] if (size &gt; length) size = length const resultArrayLength = Math.ceil(length / size) // 结果数组 const resultArray = new Array(resultArrayLength) let index = 0 let start = 0 while (index &lt; resultArrayLength) &#123; resultArray[index++] = this.slice(start, start += size) &#125; return resultArray&#125; 利用 while 循环与数组的 slice 方法对原数组进行反复的抽取，得到目标数组。 compact()作用 创建一个新数组，包含原数组中所有的非假值元素。例如 false, null, 0, &quot;&quot;, undefined, 和 NaN 都是被认为是“假值”。 举个例子，假设数组有一个名为 compact 的方法，可以实现上述功能，那么： 123let arr = [0, 1, 'a', 'b', '', true, false, null]console.log(arr.compact()) // [1, 'a', 'b', true] 自定义实现123Array.prototype.compact = function () &#123; return this.filter(value =&gt; value)&#125; 利用数组的 filter 方法对原数组进行过滤，得到目标数组。 参考文章 Lodash - “Array” 方法","categories":[],"tags":[{"name":"Lodash","slug":"Lodash","permalink":"http://wzw1016.ml/tags/Lodash/"},{"name":"Array","slug":"Array","permalink":"http://wzw1016.ml/tags/Array/"}]},{"title":"数组扁平化","slug":"数组扁平化","date":"2020-03-04T09:09:41.000Z","updated":"2020-03-22T06:21:36.135Z","comments":true,"path":"2020/03/04/数组扁平化/","link":"","permalink":"http://wzw1016.ml/2020/03/04/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/","excerpt":"何为数组扁平化？数组扁平化是指将一个多维数组转化为一维数组。 举个例子，假设有个名为 flatten 的函数，接受一个数组作为参数，并将之扁平化： 12const arr = [1, 2, [3, [4, 5]]]console.log(flatten(arr)) // [1, 2, 3, 4, 5]","text":"何为数组扁平化？数组扁平化是指将一个多维数组转化为一维数组。 举个例子，假设有个名为 flatten 的函数，接受一个数组作为参数，并将之扁平化： 12const arr = [1, 2, [3, [4, 5]]]console.log(flatten(arr)) // [1, 2, 3, 4, 5] 实现数组扁平化的方法flat()ES2015（即ES6）中新增了数组的 flat() 方法，可以直接对多维数组进行“展平”，返回一个“展平”后的数组。 flat() 方法和数组的其他方法一样，定义在原型对象 Array.prototype 上。 flat() 接收一个可选参数 depth， 用于指定要提取嵌套数组的结构深度，默认值为1。 使用如下： 12345const arr = ['a', ['b', [1, [2, 3]], 'd']]console.log(arr.flat()) // ['a', 'b', [1, [2, 3]], 'd']console.log(arr.flat(2)) // ['a', 'b', 1, [2, 3], 'd']console.log(arr.flat(3)) // ['a', 'b', 1, 2, 3, 'd'] 可以使用 Infinity，展开任意深度的嵌套数组。如下： 12const arr = [1, 2, [3, [4, [5, [6, [7, 8]]]]]]console.log(arr.flat(Infinity)) // [1, 2, 3, 4, 5, 6, 7, 8] 当参数 depth 为负数时，会返回一个由原数组浅拷贝后的数组。如下： 1234567const arr = [1, 2, [3, 4]]const arr2 = arr.flat(-1)console.log(arr2) // [1, 2, [3, 4]]// 修改浅拷贝得到的数组，原数组也会发生改变arr2[2][0] = 5console.log(arr) // [1, 2, [5, 4]] flat() 方法会将数组中的空项移除： 12const arr = [1, 2, , 4, 5]arr.flat() // [1, 2, 4, 5] 函数递归 + reduce() + concat()自定义一个数组的方法 flatten，用于扁平化指定数组： 12345678910function flattenDepth(array) &#123; return array.reduce((acc, item) =&gt; &#123; if(Array.isArray(item)) &#123; acc = acc.concat(flattenDepth(item)) &#125; else &#123; acc = acc.concat(item) &#125; return acc &#125;, [])&#125; 简写后： 123function flattenDepth(arr) &#123; return arr.reduce((acc, item) =&gt; acc.concat(Array.isArray(item) ? flattenDepth(item) : item), [])&#125; 扩展运算符 + some() + concat()123456function flattenDepth(array) &#123; while (array.some(item =&gt; Array.isArray(item))) &#123; array = [].concat(...array) &#125; return array&#125; 通过 ES6 的扩展运算符语法（…）将目标数组中的所有元素遍历取出，进行 concat () 合并。 总结核心思想就是，遍历目标数组，若数组中的元素为非数组，则与返回的新数组进行 concat() 合并；若数组中的元素仍为数组，则进行递归遍历，并同时与返回的新数组进行 concat() 合并，直到目标数组中的所有元素都不是数组为止。 参考文章 MDN - Array.prototype.flat()","categories":[],"tags":[{"name":"Lodash","slug":"Lodash","permalink":"http://wzw1016.ml/tags/Lodash/"},{"name":"Array","slug":"Array","permalink":"http://wzw1016.ml/tags/Array/"},{"name":"flatten","slug":"flatten","permalink":"http://wzw1016.ml/tags/flatten/"}]},{"title":"promise.then()的返回值","slug":"promise.then()的返回值","date":"2020-02-23T05:25:26.000Z","updated":"2020-02-25T06:20:10.834Z","comments":true,"path":"2020/02/23/promise.then()的返回值/","link":"","permalink":"http://wzw1016.ml/2020/02/23/promise.then()%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/","excerpt":"Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加状态改变时的回调函数。 Promise.prototype.then() 方法返回的是一个新的 Promise 实例对象，因此可以采用链式写法。 本文主要记录 promise.then() 返回值的不同情况。","text":"Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加状态改变时的回调函数。 Promise.prototype.then() 方法返回的是一个新的 Promise 实例对象，因此可以采用链式写法。 本文主要记录 promise.then() 返回值的不同情况。 then() 的基本用法 new Promise(executor).then(onFulfilled[, onRejected]) onFulfilled： 当 Promise 变成 fulfilled 状态时调用的函数。 onRejected： 当 Promise 变成 rejected 状态时调用的函数。 then方法的返回值结论then() 返回的 promise 实例对象的结果由 then() 中指定的回调函数执行的结果决定。即由传入的 onFulfilled 或 onRejected 执行的结果决定。 没有返回任何值（实际返回 undefined），那么 then() 返回的 promise 将会成为接受（resolved）状态。promise 携带的 value 为 undefined。 123Promise.resolve() .then(() =&gt; &#123;&#125;) .then(value =&gt; console.log('onFulfilled', value)) // onFulfilled undefined 返回了一个一般的值，那么 then() 返回的 promise 将会成为接受（resolved）状态。promise 携带的 value 为返回的值。 123Promise.resolve() .then(() =&gt; 1, () =&gt; 2) .then(value =&gt; console.log('onFulfilled', value)) // onFulfilled 1 抛出一个错误（throw xxx），那么 then() 返回的 promise 将会成为拒绝（rejected）状态。promise 携带的 reason 为抛出的错误。 123456789Promise.resolve() .then(() =&gt; &#123; // 使 .then() 返回一个 rejected promise throw new Error('3') &#125;) .then( () =&gt; console.log('不会调用'), (reason) =&gt; console.log('onRejected', reason) // onRejected Error: 3 ) 返回一个接受（resolved）状态的 promise，那么 then() 返回的 promise 将会成为接受（resolved）状态。then() 返回的 promise 携带的 value 为回调函数返回的 promise 携带的 value。 123Promise.resolve() .then(() =&gt; Promise.resolve(4)) .then(value =&gt; console.log('onFulfilled', value)) // onFulfilled 4 返回一个拒绝（rejected）状态的 promise，那么 then() 返回的 promise 将会成为拒绝（rejected）状态。then() 返回的 promise 携带的 reason 为回调函数返回的 promise 携带的 reason 。 123456Promise.resolve() .then(() =&gt; Promise.reject(5)) .then( () =&gt; console.log('不会调用'), (reason) =&gt; console.log('onRejected', reason) // onRejected 5 ) 返回一个初始（pending）状态的 promise，那么 then() 返回的 promise 将会成为初始（pending）状态。 12345let promise = Promise.resolve().then(() =&gt; ( new Promise(() =&gt; &#123;&#125;)))console.log(promise) // Promise &#123;&lt;pending&gt;&#125; 参考文章 使用 Promise","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[{"name":"Promise","slug":"Promise","permalink":"http://wzw1016.ml/tags/Promise/"}]},{"title":"JS中的错误Error与错误处理","slug":"JS中的错误Error与错误处理","date":"2020-02-20T02:51:17.000Z","updated":"2020-02-21T15:35:36.494Z","comments":true,"path":"2020/02/20/JS中的错误Error与错误处理/","link":"","permalink":"http://wzw1016.ml/2020/02/20/JS%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AFError%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","excerpt":"Error实例对象Error 是 JavaScript 中的错误类，它同时也是一个构造函数，可以用来创建一个错误对象。Error 的实例会在运行发生错误时抛出，Error 对象像其它对象一样，也可以由用户自定义创建。 12let err = new Error('error message')console.log(err) // Error: error message","text":"Error实例对象Error 是 JavaScript 中的错误类，它同时也是一个构造函数，可以用来创建一个错误对象。Error 的实例会在运行发生错误时抛出，Error 对象像其它对象一样，也可以由用户自定义创建。 12let err = new Error('error message')console.log(err) // Error: error message 语法结构 new Error([message]) message：可选参数，表示出错时的提示信息 。 JavaScript 语言标准只提到，Error 实例对象有 message 属性，没有提到其他属性 。 不同执行引擎对 Error 类的实现有所不同， 大多数 JavaScript 引擎，对 Error 实例还提供 name 和 stack 属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。 name：错误名称（非标准属性） stack：错误的堆栈（非标准属性） 作为函数使用 当像函数一样使用 Error 时 – 如果没有 new，它也会返回一个 Error 对象。也就是说，仅仅调用 Error 将产生与通过 new 关键字构造 Error 输出相同的对象。 1234let err1 = new Error('1')console.log(err1) // Error: 1let err2 = new Error('1')console.log(err2) // Error: 1 Error类的方法与属性方法Error 类本身没有任何方法。但是，由于在 JavaScript 中所有类都是 Object 的子类，所以其会包含一些继承自 Object 类的方法。 属性 Error 类也没有自身定义的类属性，其所有属性据来自于其父类Object。 Error.prototype － 添加到其实例中的属性 Error实例运行时错误实例会由执行引擎自动创建和抛出，我们也可以通过构造函数自定义 Error 实例，与其它类一样我们也可以通过 Error.prototype 向实例中添加属性和方法。 Error 实例包含以下属性或方法： Error.prototype.constructor － 指定对象的构造函数 Error.prototype.message － 错误信息 Error.prototype.name － 错误名 Error.prototype.stack － 错误堆栈信息。该属性是一个非标准属性，但被大多数执行引擎所支持。 Error.prototype.toString() － 表示错误对象的描述信息。继承并重写Object.prototype.toString() Error类型除标准错误对象 Error 外，JavaScript 中还内置了一些类型错误对象。它们会在特殊时刻，或由特定的对象触发。 常用的有： ReferenceError - 引用错误 ReferenceError 错误对象会在无效引用时触发。也可以通过构造函数创建该对象的实例： new ReferenceError([message]) 引用未定义的变量时，会抛出该错误： 1console.log(a) // Uncaught ReferenceError: a is not defined 另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果或者 this 赋值： 1234567// 等号左侧不是变量console.log() = 1// Uncaught ReferenceError: Invalid left-hand side in assignment// this 对象不能手动赋值this = 1// Uncaught SyntaxError: Invalid left-hand side in assignment TypeError - 类型错误 TypeError 错误会在变量或参数不属于有效类型时触发。也可以通过构造函数创建该对象的实例： new TypeError([message]) 比如，对字符串、布尔值、数值等原始类型的值使用 new 命令，就会抛出这种错误，因为 new 命令的参数应该是一个构造函数： 1234567new 123// Uncaught TypeError: 123 is not a constructornew true// Uncaught TypeError: true is not a constructor··· 或是当调用对象不存在的方法，也会抛出 TypeError 错误，因为obj.unknownMethod的值是undefined，而不是一个函数。 123let obj = &#123;&#125;obj.unknownMethod()// Uncaught TypeError: obj.unknownMethod is not a function SyntaxError - 语法错误SyntaxError 错误对象会在解析代码的过程中发生的语法错误时触发。也可以通过构造函数创建该对象的实例： new SyntaxError([message]) 1234567// 变量名错误let 1a// Uncaught SyntaxError: Invalid or unexpected token// 缺少括号console.log 'hello')// Uncaught SyntaxError: Unexpected string 上面代码的错误，都是在语法解析阶段就可以发现，所以会抛出SyntaxError。第一个错误提示是“token 非法”，第二个错误提示是“字符串不符合要求”。 RangeError - 范围错误RangeError错误对象会在数值变量或参数超出其有效范围时触发。也可以通过构造函数创建该对象的实例： new RangeError([message]) 触发RangeError错误的情况有：对 Array 构造函数使用错误的长度值； 对 Number 对象的方法参数超出范围； 以及函数堆栈超过最大值等。 123456789101112131415// 对 Array 构造函数使用错误的长度值new Array(-1)// Uncaught RangeError: Invalid array length// 对 Number 对象的方法参数超出范围let numObj = 77.1234console.log(numObj.toExponential(101))// Uncaught RangeError: toExponential() argument must be between 0 and 100// 函数堆栈超过最大值function fn() &#123; fn()&#125;fn()// RangeError: Maximum call stack size exceeded 除了这几种常见的的错误类型之外，还有： URIErrorURIError错误会错误使用全局URI函数如 encodeURI()、decodeURI() 等时触发。也可以通过构造函数创建该对象的实例。 该错误类型在目前的 ECMAScript 规范中仍处于草案（Draft）阶段，详情点击。 InternalError InternalError 对象表示出现在 JavaScript 引擎内部的错误。 例如： “InternalError: too much recursion”（内部错误：递归过深）。 该错误类型目前尚未成为规范的一部分。 EvalErrorEvalError对象表示全局函数eval()中发生的错误。 该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留，详情点击。 自定义错误当 JavaScript 内置错误类型不能满足需要时，还可以自定义错误。自定义错误就是继承 Error 对象，并对其进行一定的扩展： 123456function MyError(message) &#123; this.message = message || 'Default Message' this.name = 'MyError'&#125;MyError.prototype = new Error()MyError.prototype.constructor = MyError 接着，我们就可以生成这种自定义类型的错误了： 1new MyError('this is my customizable error') 错误的处理抛出错误 - throw 语句 通常，可以在创建 Error 实例后，通过 throw 关键字抛出： 12throw new Error('go wrong!')// Error: go wrong! 实际上，throw 可以抛出任何类型的值： 12345678910111213141516171819// 抛出一个字符串throw 'Error！'// Uncaught Error！// 抛出一个数值throw 42// Uncaught 42// 抛出一个布尔值throw true// Uncaught true// 抛出一个对象throw &#123; toString: function () &#123; return 'Error!' &#125;&#125;// Uncaught &#123;toString: ƒ&#125; 对于 JavaScript 引擎来说，遇到 throw 语句，程序就中止了。引擎会接收到 throw 抛出的信息，可能是一个错误实例，也可能是其他类型的值。 捕获错误 - try … catch结构 一旦发生错误，程序就中止执行了。 JavaScript提供了 try...catch 结构来捕获和处理错误， 选择是否往下执行。 12345try &#123; throw new Error('go wrong!')&#125; catch (error) &#123; console.log('error.message = ' + error.message)&#125; 上方代码，try 代码块中抛出错误，该错误将立即被 catch 捕获，将该错误作为参数传递给 catch，并执行 catch 中的代码。 也就是说，如果不确定某些代码是否会报错，就可以把它们放在 try...catch 代码块之中，便于进一步对错误进行处理。 catch 代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。 try...catch 可以嵌套使用。 finally代码块可以在 try...catch 结构最后添加一个 finally 代码块，表示不管是否出现错误，都必需在最后运行的语句。 如下代码，就是一个使用 try...catch...finally 的经典场景。 1234567891011function openFile() &#123; try &#123; writeFile(data) // 将可能出错的写入文件放入try代码块中 &#125; catch (err) &#123; handleError(err) // 如果在写入文件过程中出现错误，将在此处理 &#125; finally &#123; closeFile() // 总是会关闭文件 &#125;&#125; 即使在 try 和 catch 的代码块中存在 return 语句，finally 中的代码依然会执行。 如下代码： 1234567891011121314function still(a) &#123; try &#123; console.log(a) return 'result' &#125; finally &#123; console.log('FINALLY') &#125;&#125;console.log(still('test'))// test// FINALLY// result 从阮一峰老师的博客中可以看到： 在 try 或 catch 中，return 语句的执行是排在 finally 代码之前的，只是等 finally 代码执行完毕后才返回。 代码如下： 1234567891011121314let count = 0function countUp() &#123; try &#123; return count &#125; finally &#123; count++ &#125;&#125;console.log(countUp())// 0console.log(count)// 1 上面的代码中可以看到，countUp() 的返回值 count 先被确定为 0，但是此时并没有直接返回，而是先执行 finally 代码块中的内容。 finall 代码块中的 return 语句会覆盖掉在 try 或 catch 中的 return。也就是说， 如果 finall 代码块中存在 return，那么该条 return语句中的值将作为 try...catch...finally 的返回值。 12345678910111213function test() &#123; try &#123; console.log(1); return 'from_try'; &#125; catch (e) &#123; // TODO &#125; finally &#123; console.log(2); return 'from_finally'; &#125;&#125; 参考文章 MDN —— Error Standard ECMA-262 6th Edition / June 2015 ECMAScript® 2015 Language Specification 阮一峰的网络日志 —— 错误处理机制 IT笔录 —— JavaScript Error对象及错误类型","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[]},{"title":"详解state与setState","slug":"详解state与setState","date":"2020-02-15T06:25:22.000Z","updated":"2020-02-16T16:40:29.609Z","comments":true,"path":"2020/02/15/详解state与setState/","link":"","permalink":"http://wzw1016.ml/2020/02/15/%E8%AF%A6%E8%A7%A3state%E4%B8%8EsetState/","excerpt":"前言 本文参考了一些资料，逐一通过例子对 state 和 setState() 进行梳理、总结，并在此记录。 使用过 react 的小伙伴都知道， React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。 而 setState() 是 react 中的一个非常重要的方法。当我们调用 setState() 的时候，react 会更新组件的状态 state，并且自动重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。","text":"前言 本文参考了一些资料，逐一通过例子对 state 和 setState() 进行梳理、总结，并在此记录。 使用过 react 的小伙伴都知道， React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。 而 setState() 是 react 中的一个非常重要的方法。当我们调用 setState() 的时候，react 会更新组件的状态 state，并且自动重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。 state 一个组件的显示形态是可以由它数据状态和配置参数决定的。一个组件可以拥有自己的状态， react 的 state 就是用来存储这种可变化的状态的。 以下方这个 Counter 计数器为例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import React, &#123; Component &#125; from 'react'import ReactDOM from 'react-dom'class Counter extends React.Component &#123; state = &#123; count: 0 &#125; // 点击按钮 'A 测试1', count数量加1 test1 = () =&gt; &#123; this.setState(&#123; count: 3 &#125;) // 调用对象形式的setState()更新状态 console.log('setState()之后', this.state.count) &#125; // 点击按钮 'A 测试2', count数量加1 test2 = () =&gt; &#123; this.setState(state =&gt; (&#123; // 调用函数形式的setState()更新状态 count: state.count + 1 &#125;)) console.log('setState()2之后', this.state.count) &#125; // 点击按钮 'A 测试3', 调用带回调函数的setState() test3 = () =&gt; &#123; this.setState( state =&gt; (&#123; count: state.count + 1 &#125;), () =&gt; &#123;// 状态数据更新且界面更新后立即执行 console.log('在callback中', this.state.count) &#125; ) &#125; // 点击按钮 'A 测试4', 调用两次参数为对象形式的setState() test4 = () =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()4之后', this.state.count) &#125; // 点击按钮 'A 测试5', 调用两次参数为函数形式的setState() test5 = () =&gt; &#123; this.setState(state =&gt; (&#123; count: state.count + 1 &#125;)) this.setState(state =&gt; (&#123; count: state.count + 1 &#125;)) console.log('setState()5之后', this.state.count) &#125; render() &#123; console.log('A render()', this.state.count) return ( &lt;div&gt; &lt;h1&gt;A组件: &#123;this.state.count&#125;&lt;/h1&gt; &lt;button onClick=&#123;this.test1&#125;&gt;A 测试1&lt;/button&gt; &amp;nbsp;&amp;nbsp; &lt;button onClick=&#123;this.test2&#125;&gt;A 测试2&lt;/button&gt; &amp;nbsp;&amp;nbsp; &lt;button onClick=&#123;this.test3&#125;&gt;A 测试3&lt;/button&gt; &amp;nbsp;&amp;nbsp; &lt;button onClick=&#123;this.test4&#125;&gt;A 测试4&lt;/button&gt; &amp;nbsp;&amp;nbsp; &lt;button onClick=&#123;this.test5&#125;&gt;A 测试5&lt;/button&gt; &amp;nbsp;&amp;nbsp; &lt;/div&gt; ) &#125;&#125;ReactDOM.render(&lt;Counter /&gt;, document.getElementById('root')) 上面代码是一个 Counter 组件，count 存放在的实例的 state 对象当中，这个对象在构造函数里面初始化。这个组件的 render 函数内，会根据组件的 state 的中的 count 值的变化而对应显示。 注意 当我们要改变组件的状态的时候，不能直接用 this.state = xxx 这种方式来修改，如果这样做 React 就没办法知道你修改了组件的状态，它也就没有办法更新页面。所以，一定要使用 React 提供的 setState 方法，它接受一个函数或者对象作为参数。 例如，此代码不会重新渲染组件： 12// Wrongthis.state.count = 1 而是应该使用 setState(): 12// Correctthis.setState(&#123;count: 1&#125;) setState()的基本用法setState() 更新状态的两种用法 setState(stateChange[, callback]) —— 接收的第一个参数为对象 stateChange 为一个对象， 这个对象表示该组件的新状态。但你只需要传入需要更新的部分，而不需要传入整个对象 。 stateChange 会将传入的对象浅层合并到新的 state 中 12345678···test1 = () =&gt; &#123; this.setState(&#123;count: this.state.count + 1&#125;) console.log('setState()2之后', this.state.count)&#125;··· 以上方这个组件 Counter 为例，点击按钮 A 测试1，调用函数 test1，控制台输出以下内容： 12&gt; setState()之后 0&gt; A render() 1 我们可以看出，这种形式的setState()是异步的。 setState(updater[, callback]) —— 接收的第一个参数为函数 updater 为返回值为 stateChange对象的函数：(state, props) =&gt; stateChange。React 会把上一个 setState 的结果传入这个函数作为第一个参数， 将此次更新被应用时的 props 做为第二个参数 。即：updater 函数中 接收的参数 state 和 props 的值永远被保证为最新的。并且，updater 的返回值会与 state 进行浅合并。 12345678910···test2 = () =&gt; &#123; this.setState(state =&gt; (&#123; count: state.count + 1 &#125;)) console.log('setState()之后', this.state.count)&#125;··· 以组件 Counter 为例，点击按钮 A 测试2，调用函数 test2，控制台输出以下内容： 12&gt; setState()2之后 0&gt; A render() 1 这种形式的setState()也是异步的。 setState(param, callback) —— 带回调函数的setState() callback 是可选的回调函数, 它将在 setState 完成合并并重新渲染组件后执行 。 123456789101112···test3 = () =&gt; &#123; this.setState( state =&gt; (&#123;count: state.count + 1&#125;), () =&gt; &#123; console.log('在callback中', this.state.count) &#125; )&#125;··· 以组件 Counter 为例，点击按钮 A 测试3，调用函数 test3，控制台输出以下内容： 12&gt; A render() 1&gt; 在callback中 1 此时可以获取到 setState() 后最新的状态数据。 注意： 关于 setState() 的第二个参数为可选的回调函数，React官方文档中是这样描述的： 通常，我们建议使用 componentDidUpdate() 来代替此方式。 结论： 如果后续状态不依赖于当前状态 ===&gt; 使用对象方式 如果后续状态依赖于当前状态 ===&gt; 使用函数方式 setState()真的是异步的吗？在上面的代码中，我们可以看到，在此时的场景中，对象参数形式 和 函数参数形式 的 setState()都是异步的。那么， setState() 真的是异步的吗？ 先给出结论： 由 React 控制的事件处理过程中的 setState 都是异步的，如：生命周期函数、合成事件 由非 React 控制的事件处理过程中的 setState 都是同步的，如：定时器回调中、原生事件监听回调中、promise成功/失败的回调中 …… 例子：接下来我们用几个例子验证一下： 生命周期函数中的 setState()12345678910111213141516171819class Counter extends Component &#123; state = &#123;count: 0&#125; componentDidMount() &#123; console.log('setState()之前', this.state.count) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()之后', this.state.count) &#125; render() &#123; console.log('render()', this.state.count) return ( &lt;div&gt; &#123;`Counter is: $&#123;this.state.count&#125;`&#125; &lt;/div&gt; ) &#125;&#125; 输出顺序如下： 1234&gt; render() 0&gt; setState()之前 0&gt; setState()之后 0&gt; render() 1 结果显而易见，setState() 此时是异步执行的。 合成事件中的 setState() 首先得了解一下什么是合成事件，react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 jsx 中常见的 onClick 、onChange 这些都是合成事件。 12345678910111213141516171819class Counter extends Component &#123; state = &#123;count: 0&#125; increment = () =&gt; &#123; console.log('setState()之前', this.state.count) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()之后', this.state.count) &#125; render() &#123; console.log('render()', this.state.count) return ( &lt;div onClick=&#123;this.increment&#125;&gt; &#123;`Counter is: $&#123;this.state.count&#125;`&#125; &lt;/div&gt; ) &#125;&#125; 点击调用，输出顺序如下： 1234&gt; render() 0&gt; setState()之前 0&gt; setState()之后 0&gt; render() 1 setState() 此时也是异步执行的。 定时器中的 setState()首先得了解一下什么是合成事件，react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 jsx 中常见的 onClick 、onChange 这些都是合成事件。 123456789101112131415161718192021class Counter extends Component &#123; state = &#123;count: 0&#125; componentDidMount() &#123; setTimeout(() =&gt; &#123; console.log('setState()之前', this.state.count) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()之后', this.state.count) &#125;, 0) &#125; render() &#123; console.log('render()', this.state.count) return ( &lt;div&gt; &#123;`Counter is: $&#123;this.state.count&#125;`&#125; &lt;/div&gt; ) &#125;&#125; 输出顺序如下： 1234&gt; render() 0&gt; setState()之前 0&gt; render() 1&gt; setState()之后 1 此时，setState() 此时是同步执行的。 在定时器中去 setState() 并不算是一个单独的场景，它是随着你外层去决定的。你可以在合成事件中使用定时器，可以在钩子函数中使用定时器 ，也可以在原生事件使用定时器，但是不管是哪个场景下，基于事件轮询机制（event loop）下， 定时器中的 setState() 永远是同步执行的。 原生事件监听回调中的 setState() 原生事件是指非 react 合成事件，原生自带的事件监听 addEventListener ，或者也可以用原生js、jq直接 document.querySelector().onclick 这种绑定事件的形式都属于原生事件。 1234567891011121314151617181920212223class App extends Component &#123; state = &#123; count: 0 &#125; changeValue = () =&gt; &#123; console.log('setState()之前', this.state.count) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()之后', this.state.count) &#125; componentDidMount() &#123; document.body.addEventListener('click', this.changeValue) &#125; render() &#123; console.log('render()', this.state.count) return ( &lt;div&gt; &#123;`Counter is: $&#123;this.state.count&#125;`&#125; &lt;/div&gt; ) &#125;&#125; 点击调用，输出顺序如下： 1234&gt; render() 0&gt; setState()之前 0&gt; render() 1&gt; setState()之后 1 此时的setState() 此时也是同步执行的。 promise回调中的 setState()123456789101112131415161718192021class App extends Component &#123; state = &#123; count: 0 &#125; componentDidMount() &#123; Promise.resolve().then(() =&gt; &#123; console.log('setState()之前', this.state.count) this.setState(&#123; count: this.state.count + 1 &#125;) console.log('setState()之后', this.state.count) &#125;) &#125; render() &#123; console.log('render()', this.state.count) return ( &lt;div&gt; &#123;`Counter is: $&#123;this.state.count&#125;`&#125; &lt;/div&gt; ) &#125;&#125; 输出顺序如下： 1234&gt; render() 0&gt; setState()之前 0&gt; render() 1&gt; setState()之后 1 此时的setState() 此时也是同步执行的。 这里， promise 回调中的 setState()，和之前所说的一样，不管是哪个场景下，promise 回调中的 setState() 永远是同步执行的。 同步/异步 是由什么决定的呢？深入源码你会发现：引自参考文章 6 在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中回头再说，而 isBatchingUpdates 默认是 false，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。 关于异步的setState()的批量处理例：123456789···test4 = () =&gt; &#123; this.setState(&#123;count: this.state.count + 1&#125;) this.setState(&#123;count: this.state.count + 1&#125;) console.log('setState()4之后', this.state.count)&#125;··· 以组件 Counter 为例，点击按钮 A 测试4，调用函数 test4，控制台输出以下内容： 12&gt; setState()4之后 0&gt; A render() 1 同一周期内会对多个 setState 进行批量处理。例如，如果在同一周期内多次设置 count 增加，则相当于： 123456Object.assign( previousState, &#123;count: this.state.count + 1&#125;, &#123;count: this.state.count + 1&#125;, ...) 后调用的 setState() 将覆盖同一周期内先调用 setState 的值，因此 count 得值仅增加一次， 如果后续状态取决于当前状态，建议使用 updater 函数的形式代替： 12345test5 = () =&gt; &#123; this.setState(state =&gt; (&#123;count: state.count + 1&#125;)) this.setState(state =&gt; (&#123;count: state.count + 1&#125;)) console.log('setState()5之后', this.state.count)&#125; 由于接收的参数 state 和 props 的值永远被保证为最新的，所以输出以下结果： 12&gt; setState()5之后 0&gt; A render() 2 多次调用, 如何处理? setState({}): 合并更新一次状态, 只调用一次 render() 更新界面 ===&gt; 状态更新和界面更新都合并了。 setState(fn): 更新多次状态, 但只调用一次 render() 更新界面 ===&gt; 状态更新没有合并, 但界面更新合并了。 结论：由于 React 会对同一周期内的 setState() 进行合并，所以， 在使用 React 的时候，并不需要担心多次进行 setState 会带来性能问题 结语掌握 setState() 的基本用法，分清 setState() 在不同应用场景下的执行流程，注意 setState() 的合并处理。开发中基本不会再跳这个方法的坑了。 如果哪里有说的不对的地方，欢迎指正。 参考文章 React官方文档 —— setState() 阮一峰的网络日志 —— React 入门实例教程 React.js 小书 —— 组件的 state 和 setState 菜鸟教程 —— React State(状态) 你真的理解setState吗？ 问一个react更新State的问题？ - Lucas HC的回答 - 知乎","categories":[{"name":"React","slug":"React","permalink":"http://wzw1016.ml/categories/React/"}],"tags":[]},{"title":"Component和PureComponent","slug":"Component和PureComponent","date":"2020-02-14T15:31:13.000Z","updated":"2020-04-05T05:30:41.433Z","comments":true,"path":"2020/02/14/Component和PureComponent/","link":"","permalink":"http://wzw1016.ml/2020/02/14/Component%E5%92%8CPureComponent/","excerpt":"React.PureComponent 与 React.Component 很相似。两者的区别在于 React.Component 并未实现 shouldComponentUpdate()，而 React.PureComponent 中以浅层对比 prop 和 state 的方式来实现了该函数。","text":"React.PureComponent 与 React.Component 很相似。两者的区别在于 React.Component 并未实现 shouldComponentUpdate()，而 React.PureComponent 中以浅层对比 prop 和 state 的方式来实现了该函数。 使用Component存在的问题例我们先来看看下面这段代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&#x2F;&#x2F; 父组件class A extends React.Component &#123; state &#x3D; &#123; m1: &#123; count: 1 &#125; &#125; testA &#x3D; () &#x3D;&gt; &#123; this.setState(&#123;&#125;) &#125; render() &#123; console.log(&#39;A render()&#39;) return ( &lt;div&gt; &lt;h1&gt;A组件: m1.count&#x3D;&#123;this.state.m1.count&#125;&lt;&#x2F;h1&gt; &lt;button onClick&#x3D;&#123;this.testA&#125;&gt;test A&lt;&#x2F;button&gt; &lt;B m1&#x3D;&#123;this.state.m1&#125;&#x2F;&gt; &lt;&#x2F;div&gt; ) &#125;&#125;&#x2F;&#x2F; 子组件class B extends React.Component &#123; state &#x3D; &#123; m2: &#123; count: 2 &#125; &#125; render() &#123; console.log(&#39;B render()&#39;) return ( &lt;div&gt; &lt;h1&gt;B组件: &lt;&#x2F;h1&gt; &lt;div&gt;m2.count&#x3D;&#123;this.state.m2.count&#125;&lt;&#x2F;div&gt; &lt;div&gt;m1.count&#x3D;&#123;this.props.m1.count&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; ) &#125;&#125;ReactDOM.render(&lt;A&#x2F;&gt;, document.getElementById(&#39;example&#39;)) 上面的代码中，组件A是组件B的父组件。同时，组件A将维护的状态 m1 作为B组件的属性传递给他。 点击 test A，输出以下内容： 12&gt; A render()&gt; B render() 我们会发现，此时，即使 A组件 的 state 没有发生变化，A组件也会重新渲染。即使 B组件 的 state 和 props 都没有发生改变，但只要 A组件 重新渲染，B组件 也会重新渲染。 也就是说，当前使用的继承类 Component 存在这两个问题： 当前组件 setState()，会重新执行 render()，即使 state 没有任何变化。 父组件重新 render(), 当前组件也会重新执行 render(), 即使 state 和 porps 没有任何变化。 这样，就导致了本不必要的性能浪费。 为什么会存在这些问题？首先我们来看一下 React 的生命周期： 图源来自网络 从这张图中可以很轻松的看到，组件运行时，无论是父组件重新 render()，还是子组件的 state 发生改变，都会调用 shouldComponentUpdate() 这个方法。 它接收两个参数：nextProps和nextState，分别表示新的 props 和新的 state 的值。并且，当函数返回 ture 时，组件会重新调用 render() 进行 update ；当函数返回 false 时，组件不会重新渲染。 然而，Component 类的 shouldComponentUpdate() 默认返回 true, 即使数据没有变化 render() 也会重新执行，这就导致了我们上方的问题。 解决办法重写shouldComponentUpdate()上面我们说，shouldComponentUpdate() 默认返回 true，所以导致了不必要的重新渲染。于是我们可以在shouldComponentUpdate()中加入条件判断，从而优化性能。 在上面的例子中，我们在 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#x2F;&#x2F; 父组件class A extends React.Component &#123; state &#x3D; &#123; m1: &#123; count: 1 &#125; &#125; testA &#x3D; () &#x3D;&gt; &#123; this.setState(&#123;&#125;) &#125; shouldComponentUpdate(nextProps, nextState)&#123; return nextState.m1 &#x3D;&#x3D;&#x3D; this.state.m1 ? false : true &#125; render() &#123; console.log(&#39;A render()&#39;) return ( &lt;div&gt; &lt;h1&gt;A组件: m1.count&#x3D;&#123;this.state.m1.count&#125;&lt;&#x2F;h1&gt; &lt;button onClick&#x3D;&#123;this.testA&#125;&gt;test A&lt;&#x2F;button&gt; &lt;B m1&#x3D;&#123;this.state.m1&#125;&#x2F;&gt; &lt;&#x2F;div&gt; ) &#125;&#125;&#x2F;&#x2F; 子组件class B extends React.Component &#123; state &#x3D; &#123; m2: &#123; count: 2 &#125; &#125; shouldComponentUpdate(nextProps, nextState)&#123; return nextProps.m1 &#x3D;&#x3D;&#x3D; this.props.m1 &amp;&amp; nextState.m2 &#x3D;&#x3D;&#x3D; this.state.m2 ? false : true &#125; render() &#123; console.log(&#39;B render()&#39;) return ( &lt;div&gt; &lt;h1&gt;B组件: &lt;&#x2F;h1&gt; &lt;div&gt;m2.count&#x3D;&#123;this.state.m2.count&#125;&lt;&#x2F;div&gt; &lt;div&gt;m1.count&#x3D;&#123;this.props.m1.count&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; ) &#125;&#125;ReactDOM.render(&lt;A&#x2F;&gt;, document.getElementById(&#39;example&#39;)) 可是这样，又有了一个新的问题。当组件的 state 或 props 很多时，这样无疑会非常麻烦。 所以，我们可以使用 PureComponent 很轻松的解决。 使用PureComponent React中提供了一个 PureComponent 的类，当我们的组件继承于它时，组件更新时就会默认先比较新旧属性和状态，从而决定组件是否更新。 不过值得注意的是，PureComponent进行的是浅比较，所以组件状态或属性改变时，都需要返回一个新的对象或数组。 就像这样： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#x2F;&#x2F; 父组件class A extends React.PureComponent &#123; state &#x3D; &#123; m1: &#123; count: 1 &#125; &#125; testA &#x3D; () &#x3D;&gt; &#123; this.setState(state &#x3D;&gt; (&#123; m1: &#123;...state.m1, count: 2&#125; &#125;)) &#125; shouldComponentUpdate(nextProps, nextState)&#123; return nextState.m1 &#x3D;&#x3D;&#x3D; this.state.m1 ? false : true &#125; render() &#123; console.log(&#39;A render()&#39;) return ( &lt;div&gt; &lt;h1&gt;A组件: m1.count&#x3D;&#123;this.state.m1.count&#125;&lt;&#x2F;h1&gt; &lt;button onClick&#x3D;&#123;this.testA&#125;&gt;test A&lt;&#x2F;button&gt; &lt;B m1&#x3D;&#123;this.state.m1&#125;&#x2F;&gt; &lt;&#x2F;div&gt; ) &#125;&#125;&#x2F;&#x2F; 子组件class B extends React.PureComponent &#123; state &#x3D; &#123; m2: &#123; count: 2 &#125; &#125; shouldComponentUpdate(nextProps, nextState)&#123; return nextProps.m1 &#x3D;&#x3D;&#x3D; this.props.m1 &amp;&amp; nextState.m2 &#x3D;&#x3D;&#x3D; this.state.m2 ? false : true &#125; render() &#123; console.log(&#39;B render()&#39;) return ( &lt;div&gt; &lt;h1&gt;B组件: &lt;&#x2F;h1&gt; &lt;div&gt;m2.count&#x3D;&#123;this.state.m2.count&#125;&lt;&#x2F;div&gt; &lt;div&gt;m1.count&#x3D;&#123;this.props.m1.count&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; ) &#125;&#125;ReactDOM.render(&lt;A&#x2F;&gt;, document.getElementById(&#39;example&#39;)) 参考文章 React官方文档 —— React.PureComponent","categories":[{"name":"React","slug":"React","permalink":"http://wzw1016.ml/categories/React/"}],"tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://wzw1016.ml/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"同步回调与异步回调","slug":"同步回调与异步回调","date":"2020-02-06T07:11:09.000Z","updated":"2020-02-22T06:18:37.912Z","comments":true,"path":"2020/02/06/同步回调与异步回调/","link":"","permalink":"http://wzw1016.ml/2020/02/06/%E5%90%8C%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/","excerpt":"前言 对js回调函数进行归纳总结 涉及的名词：单线程、回调函数","text":"前言 对js回调函数进行归纳总结 涉及的名词：单线程、回调函数 知识准备js是单线程的什么是单线程？所谓“单线程”，就是同一时间只能处理一个任务，如果有多个任务，就必须依次执行。只有当前一个任务执行完了，后一个任务才会执行。 1234(() =&gt; &#123; alert('1') console.log('2')&#125;)() 执行上面的代码，执行顺序： 页面弹窗显示1，此时控制台没有内容。 点击弹窗确定，控制台输出2。 即console.log(&#39;2&#39;)这条语句会在alert(&#39;1&#39;)执行结束后才开始执行 为什么JavaScript是单线程？JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？ 所以，为了避免复杂性，从一诞生，JavaScript就是单线程。 回调函数回调函数是什么？MDN对回调函数的定义： 被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数 。 想要弄清楚回调函数，首先要清楚js中的函数，JavaScript中的函数本质是一个对象，准确来说是通过new Function()创建的Function的实例对象。因此我们可以将函数像对象一样存保存在变量中，当然也就可以将保存在变量中的函数通过参数传递给另一个函数，这个作为参数传递的函数，就是回调函数。 1234const fn = (a) =&gt; &#123; console.log(a)&#125;setTimeOut(fn(1), 1000) 为什么使用回调函数？js的单线程特性，使得所有任务需依次执行，如果前一个任务的执行需要很长时间，那么整个程序的执行时间就都会被拉长。 为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous） 。 同步任务指的是需要在主线程上排队依次执行的任务，前一个任务结束，才会执行后一个任务。 任务执行的顺序与代码排列的顺序是一致的、同步的，同步任务会导致阻塞；异步任务指的是不会阻塞主线程上的下一个同步任务，而是会进入的回调队列（callback queue）的任务。 而回调函数，正是实现异步编程的方法之一。 同步回调与异步回调回调函数不等于异步， 同步(阻塞)的场景下也经常用到回调 同步回调立即执行，完全执行完了才会执行下一个任务，不会放入回调队列中 如：数组遍历相关的回调函数 / Promise的excutor函数 例： 12345const arr = [1, 2, 3]arr.forEach((item, index) =&gt; &#123; console.log('遍历的回调', item, index)&#125;)console.log('forEach()之后') 数组的forEach()方法 1234// 遍历的回调, 1, 0// 遍历的回调, 2, 1// 遍历的回调, 3, 2// forEach()之后 执行结果 异步回调不会立即执行, 会放入回调队列中将来执行 如：定时器回调 / ajax回调 / 事件监听回调/ Promise的成功和失败的回调 例： 1234setTimeout(() =&gt; &#123; console.log('回调函数')&#125;, 0)console.log('setTimeout()之后') 定时器回调 12// setTimeout()之后// 回调函数 执行结果 参考文章 JavaScript 运行机制详解：再谈Event Loop Javascript异步编程的4种方法","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wzw1016.ml/categories/JavaScript/"}],"tags":[{"name":"回调函数","slug":"回调函数","permalink":"http://wzw1016.ml/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"}]}]}