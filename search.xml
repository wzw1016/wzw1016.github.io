<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>详解state与setState</title>
    <url>/2020/02/15/%E8%AF%A6%E8%A7%A3state%E4%B8%8EsetState/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文参考了一些资料，逐一通过例子对 state 和 setState() 进行梳理、总结，并在此记录。</p>
</blockquote>
<blockquote>
<p>使用过 <strong><a href="https://reactjs.org/" target="_blank" rel="noopener">react</a></strong> 的小伙伴都知道， React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p>
<p>而 <strong>setState()</strong> 是 react 中的一个非常重要的方法。当我们调用 setState() 的时候，react 会更新组件的状态 <strong>state</strong>，并且自动重新调用 <strong>render</strong> 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p> 一个组件的显示形态是可以由它数据状态和配置参数决定的。一个组件可以拥有自己的<strong>状态</strong>， react 的 <strong><a href="https://reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">state</a></strong> 就是用来存储这种可变化的状态的。</p>
<p>以下方这个 Counter 计数器为例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击按钮 'A 测试1', count数量加1</span></span><br><span class="line">  test1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="number">3</span> &#125;)  <span class="comment">// 调用对象形式的setState()更新状态</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击按钮 'A 测试2', count数量加1</span></span><br><span class="line">  test2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;  <span class="comment">// 调用函数形式的setState()更新状态</span></span><br><span class="line">      count: state.count + <span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()2之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击按钮 'A 测试3', 调用带回调函数的setState()</span></span><br><span class="line">  test3 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(</span><br><span class="line">      state =&gt; (&#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;),</span><br><span class="line">      () =&gt; &#123;<span class="comment">// 状态数据更新且界面更新后立即执行</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'在callback中'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击按钮 'A 测试4', 调用两次参数为对象形式的setState()</span></span><br><span class="line">  test4 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()4之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击按钮 'A 测试5', 调用两次参数为函数形式的setState()</span></span><br><span class="line">  test5 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;))</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()5之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'A render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;A组件: &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.test1&#125;&gt;A 测试1&lt;/</span>button&gt; &amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.test2&#125;&gt;A 测试<span class="number">2</span>&lt;<span class="regexp">/button&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.test3&#125;&gt;A 测试3&lt;/</span>button&gt; &amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.test4&#125;&gt;A 测试<span class="number">4</span>&lt;<span class="regexp">/button&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.test5&#125;&gt;A 测试5&lt;/</span>button&gt; &amp;nbsp;&amp;nbsp;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Counter /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure>

<p>  上面代码是一个 <code>Counter</code> 组件，<code>count</code> 存放在的实例的 <code>state</code> 对象当中，这个对象在构造函数里面初始化。这个组件的 <code>render</code> 函数内，会根据组件的 <code>state</code> 的中的 <code>count</code> 值的变化而对应显示。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p> 当我们要改变组件的状态的时候，不能直接用 <del><code>this.state = xxx</code></del> 这种方式来修改，如果这样做 React 就没办法知道你修改了组件的状态，它也就没有办法更新页面。所以，一定要使用 React 提供的 <code>setState</code> 方法，<strong>它接受一个函数或者对象作为参数</strong>。 </p>
<p> 例如，此代码不会重新渲染组件： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.count = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> 而是应该使用 <code>setState()</code>: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="setState-的基本用法"><a href="#setState-的基本用法" class="headerlink" title="setState()的基本用法"></a>setState()的基本用法</h2><p><code>setState()</code> 更新状态的两种用法</p>
<h3 id="setState-stateChange-callback-——-接收的第一个参数为对象"><a href="#setState-stateChange-callback-——-接收的第一个参数为对象" class="headerlink" title="setState(stateChange[, callback]) —— 接收的第一个参数为对象"></a>setState(stateChange[, callback]) —— 接收的第一个参数为对象</h3><ul>
<li><strong>stateChange</strong> 为一个<strong>对象</strong>， 这个对象表示该组件的新状态。但你只需要传入需要更新的部分，而不需要传入整个对象 。 <code>stateChange</code> 会将传入的对象<strong>浅层合并</strong>到新的 state 中 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">test1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setState()2之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>以上方这个组件 Counter 为例，点击按钮 <kbd>A 测试1</kbd>，调用函数 test1，控制台输出以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; setState()之后 0</span><br><span class="line">&gt; A render() 1</span><br></pre></td></tr></table></figure>

<p>我们可以看出，这种形式的setState()是异步的。</p>
<h3 id="setState-updater-callback-——-接收的第一个参数为函数"><a href="#setState-updater-callback-——-接收的第一个参数为函数" class="headerlink" title="setState(updater[, callback]) —— 接收的第一个参数为函数"></a>setState(updater[, callback]) —— 接收的第一个参数为函数</h3><ul>
<li><strong>updater</strong> 为返回值为 <strong>stateChange对象</strong>的<strong>函数</strong>：<code>(state, props) =&gt; stateChange</code>。React 会把上一个 <code>setState</code> 的结果传入这个函数作为第一个参数， 将此次更新被应用时的 <a href="https://zh-hans.reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">props</a> 做为第二个参数 。即：<strong>updater 函数中 接收的参数 state 和 props 的值永远被保证为最新的</strong>。并且，updater 的返回值会与 state 进行<strong>浅合并</strong>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">test2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      count: state.count + <span class="number">1</span></span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>以组件 Counter 为例，点击按钮 <kbd>A 测试2</kbd>，调用函数 test2，控制台输出以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; setState()2之后 0</span><br><span class="line">&gt; A render() 1</span><br></pre></td></tr></table></figure>

<p>这种形式的setState()也是异步的。</p>
<h3 id="setState-param-callback-——-带回调函数的setState"><a href="#setState-param-callback-——-带回调函数的setState" class="headerlink" title="setState(param, callback) —— 带回调函数的setState()"></a>setState(param, callback) —— 带回调函数的setState()</h3><ul>
<li><strong>callback</strong> 是可选的回调函数,  它将在 <code>setState</code> 完成合并并重新渲染组件后执行 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">test3 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(</span><br><span class="line">    state =&gt; (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;),</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'在callback中'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>以组件 Counter 为例，点击按钮 <kbd>A 测试3</kbd>，调用函数 test3，控制台输出以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; A render() 1</span><br><span class="line">&gt; 在callback中 1</span><br></pre></td></tr></table></figure>

<p>此时可以获取到 <code>setState()</code> 后最新的状态数据。</p>
<p><strong>注意：</strong></p>
<p>关于 setState() 的第二个参数为可选的回调函数，React官方文档中是这样描述的： <strong>通常，我们建议使用 <code>componentDidUpdate()</code> 来代替此方式</strong>。  </p>
<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><blockquote>
<blockquote>
<p><strong>如果后续状态不依赖于当前状态 ===&gt; 使用对象方式</strong></p>
</blockquote>
<blockquote>
<p><strong>如果后续状态依赖于当前状态 ===&gt; 使用函数方式</strong></p>
</blockquote>
</blockquote>
<hr>
<h2 id="setState-真的是异步的吗？"><a href="#setState-真的是异步的吗？" class="headerlink" title="setState()真的是异步的吗？"></a>setState()真的是异步的吗？</h2><p>在上面的代码中，我们可以看到，在此时的场景中，对象参数形式 和 函数参数形式 的 <code>setState()</code>都是异步的。那么， <code>setState()</code> 真的是异步的吗？</p>
<h3 id="先给出结论："><a href="#先给出结论：" class="headerlink" title="先给出结论："></a>先给出结论：</h3><ul>
<li><strong>由 React 控制的事件处理过程中的 <code>setState</code> 都是异步的，如：生命周期函数、合成事件</strong>  </li>
<li><strong>由非 React 控制的事件处理过程中的 <code>setState</code> 都是同步的，如：定时器回调中、原生事件监听回调中、promise成功/失败的回调中 ……</strong></li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>接下来我们用几个例子验证一下：</p>
<h4 id="生命周期函数中的-setState"><a href="#生命周期函数中的-setState" class="headerlink" title="生命周期函数中的 setState()"></a>生命周期函数中的 <code>setState()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之前'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="string">`Counter is: <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span>`</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; render() 0</span><br><span class="line">&gt; setState()之前 0</span><br><span class="line">&gt; setState()之后 0</span><br><span class="line">&gt; render() 1</span><br></pre></td></tr></table></figure>

<p>结果显而易见，<code>setState()</code> 此时是异步执行的。</p>
<h4 id="合成事件中的-setState"><a href="#合成事件中的-setState" class="headerlink" title="合成事件中的 setState()"></a>合成事件中的 <code>setState()</code></h4><p> 首先得了解一下什么是合成事件，react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 <code>jsx</code> 中常见的 <code>onClick</code> 、<code>onChange</code> 这些都是合成事件。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之前'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.increment&#125;&gt;</span><br><span class="line">        &#123;<span class="string">`Counter is: <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span>`</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>点击调用，输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; render() 0</span><br><span class="line">&gt; setState()之前 0</span><br><span class="line">&gt; setState()之后 0</span><br><span class="line">&gt; render() 1</span><br></pre></td></tr></table></figure>

<p><code>setState()</code> 此时也是异步执行的。</p>
<h4 id="定时器中的-setState"><a href="#定时器中的-setState" class="headerlink" title="定时器中的 setState()"></a>定时器中的 <code>setState()</code></h4><p>首先得了解一下什么是合成事件，react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 <code>jsx</code> 中常见的 <code>onClick</code> 、<code>onChange</code> 这些都是合成事件。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'setState()之前'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="string">`Counter is: <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span>`</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; render() 0</span><br><span class="line">&gt; setState()之前 0</span><br><span class="line">&gt; render() 1</span><br><span class="line">&gt; setState()之后 1</span><br></pre></td></tr></table></figure>

<p>此时，<code>setState()</code> 此时是同步执行的。</p>
<p>在定时器中去 <code>setState()</code> 并不算是一个单独的场景，它是随着你外层去决定的。你可以在合成事件中使用定时器，可以在钩子函数中使用定时器 ，也可以在原生事件使用定时器，但是不管是哪个场景下，基于事件轮询机制（event loop）下， 定时器中的 <code>setState()</code> 永远是同步执行的。</p>
<h4 id="原生事件监听回调中的-setState"><a href="#原生事件监听回调中的-setState" class="headerlink" title="原生事件监听回调中的 setState()"></a>原生事件监听回调中的 <code>setState()</code></h4><p> 原生事件是指非 react 合成事件，原生自带的事件监听 <code>addEventListener</code> ，或者也可以用原生js、jq直接 <code>document.querySelector().onclick</code> 这种绑定事件的形式都属于原生事件。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  changeValue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之前'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.changeValue)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="string">`Counter is: <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span>`</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>点击调用，输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; render() 0</span><br><span class="line">&gt; setState()之前 0</span><br><span class="line">&gt; render() 1</span><br><span class="line">&gt; setState()之后 1</span><br></pre></td></tr></table></figure>

<p>此时的<code>setState()</code> 此时也是同步执行的。</p>
<h4 id="promise回调中的-setState"><a href="#promise回调中的-setState" class="headerlink" title="promise回调中的 setState()"></a>promise回调中的 <code>setState()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'setState()之前'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'setState()之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render()'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="string">`Counter is: <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span>`</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; render() 0</span><br><span class="line">&gt; setState()之前 0</span><br><span class="line">&gt; render() 1</span><br><span class="line">&gt; setState()之后 1</span><br></pre></td></tr></table></figure>

<p>此时的<code>setState()</code> 此时也是同步执行的。</p>
<p>这里， promise 回调中的 <code>setState()</code>，和之前所说的一样，不管是哪个场景下，promise 回调中的 <code>setState()</code> 永远是同步执行的。</p>
<h3 id="同步-异步-是由什么决定的呢？"><a href="#同步-异步-是由什么决定的呢？" class="headerlink" title="同步/异步 是由什么决定的呢？"></a>同步/异步 是由什么决定的呢？</h3><p>深入源码你会发现：<sup>引自参考文章 6</sup></p>
<blockquote>
<p>在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中回头再说，而 isBatchingUpdates 默认是 false，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是<strong>由 React 控制的事件处理过程 setState 不会同步更新 this.state</strong>。  </p>
</blockquote>
<hr>
<h2 id="关于异步的setState-的批量处理"><a href="#关于异步的setState-的批量处理" class="headerlink" title="关于异步的setState()的批量处理"></a>关于异步的setState()的批量处理</h2><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">test4 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setState()4之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>以组件 Counter 为例，点击按钮 <kbd>A 测试4</kbd>，调用函数 test4，控制台输出以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; setState()4之后 0</span><br><span class="line">&gt; A render() 1</span><br></pre></td></tr></table></figure>

<p> 同一周期内会对多个 <code>setState</code> 进行批量处理。例如，如果在同一周期内多次设置 count 增加，则相当于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(</span><br><span class="line">	previousState,</span><br><span class="line">    &#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p> 后调用的 <code>setState()</code> 将覆盖同一周期内先调用 <code>setState</code> 的值，因此 count 得值仅增加一次， 如果后续状态取决于当前状态，建议使用 updater 函数的形式代替： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test5 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setState()5之后'</span>, <span class="keyword">this</span>.state.count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>由于接收的参数 state 和 props 的值永远被保证为最新的</strong>，所以输出以下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; setState()5之后 0</span><br><span class="line">&gt; A render() 2</span><br></pre></td></tr></table></figure>



<h3 id="多次调用-如何处理"><a href="#多次调用-如何处理" class="headerlink" title="多次调用, 如何处理?"></a>多次调用, 如何处理?</h3><ul>
<li>setState({}): 合并更新一次状态, 只调用一次 <code>render()</code> 更新界面 ===&gt; <strong>状态更新和界面更新都合并了</strong>。</li>
<li>setState(fn): 更新多次状态, 但只调用一次 <code>render()</code> 更新界面 ===&gt; <strong>状态更新没有合并, 但界面更新合并了</strong>。</li>
</ul>
<h3 id="结论：-1"><a href="#结论：-1" class="headerlink" title="结论："></a>结论：</h3><p><strong>由于 React 会对同一周期内的 <code>setState()</code> 进行合并，所以， 在使用 React 的时候，并不需要担心多次进行 <code>setState</code> 会带来性能问题</strong>  </p>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>掌握 <code>setState()</code> 的基本用法，分清 <code>setState()</code> 在不同应用场景下的执行流程，注意  <code>setState()</code> 的合并处理。开发中基本不会再跳这个方法的坑了。</p>
<p> 如果哪里有说的不对的地方，欢迎指正。</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate" target="_blank" rel="noopener">React官方文档 —— setState()</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">阮一峰的网络日志 —— React 入门实例教程</a></li>
<li><a href="http://huziketang.mangojuice.top/books/react/lesson10" target="_blank" rel="noopener">React.js 小书 —— 组件的 state 和 setState</a></li>
<li><a href="https://www.runoob.com/react/react-state.html" target="_blank" rel="noopener">菜鸟教程 —— React State(状态)</a></li>
<li><a href="https://juejin.im/post/5b45c57c51882519790c7441#heading-0" target="_blank" rel="noopener">你真的理解setState吗？</a></li>
<li><a href="https://www.zhihu.com/question/66749082/answer/246217812" target="_blank" rel="noopener">问一个react更新State的问题？ - Lucas HC的回答 - 知乎 </a></li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Component和PureComponent</title>
    <url>/2020/02/14/Component%E5%92%8CPureComponent/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>同步回调与异步回调</title>
    <url>/2020/02/06/%E5%90%8C%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>对js回调函数进行归纳总结</p>
</blockquote>
<blockquote>
<p>涉及的名词：单线程、回调函数  </p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><h3 id="js是单线程的"><a href="#js是单线程的" class="headerlink" title="js是单线程的"></a>js是单线程的</h3><h4 id="什么是单线程？"><a href="#什么是单线程？" class="headerlink" title="什么是单线程？"></a>什么是单线程？</h4><p>所谓“单线程”，就是同一时间只能处理一个任务，如果有多个任务，就必须依次执行。只有当前一个任务执行完了，后一个任务才会执行。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'1'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>执行上面的代码，执行顺序：</p>
<ol>
<li>页面弹窗显示<strong>1</strong>，此时控制台没有内容。</li>
<li>点击弹窗确定，控制台输出<strong>2。</strong>  </li>
</ol>
<p>即<code>console.log(&#39;2&#39;)</code>这条语句会在<code>alert(&#39;1&#39;)</code>执行结束后才开始执行</p>
<h4 id="为什么JavaScript是单线程？"><a href="#为什么JavaScript是单线程？" class="headerlink" title="为什么JavaScript是单线程？"></a>为什么JavaScript是单线程？</h4><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p>
<p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程。  </p>
<hr>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><h4 id="回调函数是什么？"><a href="#回调函数是什么？" class="headerlink" title="回调函数是什么？"></a>回调函数是什么？</h4><p>MDN对回调函数的定义： 被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为<strong>回调函数</strong> 。</p>
<p>想要弄清楚回调函数，首先要清楚js中的函数，JavaScript中的函数本质是一个对象，准确来说是通过<code>new Function()</code>创建的Function的实例对象。因此我们可以将函数像对象一样存保存在变量中，当然也就可以将保存在变量中的函数通过参数传递给另一个函数，这个作为参数传递的函数，就是<strong>回调函数</strong>。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">setTimeOut(fn(<span class="number">1</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>



<h4 id="为什么使用回调函数？"><a href="#为什么使用回调函数？" class="headerlink" title="为什么使用回调函数？"></a>为什么使用回调函数？</h4><p>js的单线程特性，使得所有任务需依次执行，如果前一个任务的执行需要很长时间，那么整个程序的执行时间就都会被拉长。</p>
<p> 为了解决这个问题，Javascript语言将任务的执行模式分成两种：<u>同步（Synchronous）</u>和<u>异步（Asynchronous）</u> 。</p>
<p><strong>同步任务</strong>指的是需要在主线程上排队依次执行的任务，前一个任务结束，才会执行后一个任务。 任务执行的顺序与代码排列的顺序是一致的、同步的，同步任务会导致阻塞；<strong>异步任务</strong>指的是不会阻塞主线程上的下一个同步任务，而是会进入的回调队列（callback queue）的任务。</p>
<p>而回调函数，正是实现异步编程的方法之一。  </p>
<hr>
<h2 id="同步回调与异步回调"><a href="#同步回调与异步回调" class="headerlink" title="同步回调与异步回调"></a>同步回调与异步回调</h2><p>回调函数不等于异步， 同步(阻塞)的场景下也经常用到回调</p>
<h3 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h3><p>立即执行，完全执行完了才会执行下一个任务，不会放入回调队列中</p>
<p>如：数组遍历相关的回调函数 / Promise的excutor函数</p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'遍历的回调'</span>, item, index)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'forEach()之后'</span>)</span><br></pre></td></tr></table></figure>

<p>数组的forEach()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历的回调, 1, 0</span></span><br><span class="line"><span class="comment">// 遍历的回调, 2, 1</span></span><br><span class="line"><span class="comment">// 遍历的回调, 3, 2</span></span><br><span class="line"><span class="comment">// forEach()之后</span></span><br></pre></td></tr></table></figure>

<p>执行结果  </p>
<h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><p>不会立即执行, 会放入回调队列中将来执行</p>
<p>如：定时器回调 / ajax回调 / 事件监听回调/ Promise的成功和失败的回调</p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'回调函数'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setTimeout()之后'</span>)</span><br></pre></td></tr></table></figure>

<p>定时器回调</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setTimeout()之后</span></span><br><span class="line"><span class="comment">// 回调函数</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a></li>
<li><a href="[http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html](http://www.ruanyifeng.com/blog/2012/12/asynchronous＿javascript.html)">Javascript异步编程的4种方法</a></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>回调函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
